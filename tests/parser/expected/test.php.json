{"body_character":"<?php\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nnamespace Symfony\\Component\\DomCrawler\\Field;\n/**\n * ChoiceFormField represents a choice form field.\n * function asss () {\n    \n\n * It is constructed from a HTML select tag, or a HTML checkbox, or radio inputs.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\n// daky dalso\n// daky dalso2\n// daky dalso3\n// daky dalso6\n// daky dalso4\nclass ChoiceFormField extends FormField\n{\n    /**\n     * @var string\n     */\n    private $type;\n    /**\n     * @var bool\n     */\n    private $multiple;\n    /**\n     * @var array\n     */\n    private $options;\n    /**\n     * @var bool\n     */\n    private $validationDisabled = false;\n    /**\n     * Returns true if the field should be included in the submitted values.\n     *\n     * @return bool true if the field should be included in the submitted values, false otherwise\n     */\n    public function hasValue()\n    {\n        // don't send a value for unchecked checkboxes'\n        if (in_array($this->type, array('checkbox', 'radio')) && null === $this->value) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Check if the current selected option is disabled.\n     *\n     * @return bool\n     */\n    public function isDisabled()\n    {\n        if (parent::isDisabled() && 'select' === $this->type) {\n            return true;\n        }\n        foreach ($this->options as $option) {\n            if ($option['value'] == $this->value && $option['disabled']) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Sets the value of the field.\n     *\n     * @param string $value The value of the field\n     */\n    public function select($value)\n    {\n        $this->setValue($value);\n    }\n    /**\n     * Ticks a checkbox.\n     *\n     * @throws \\LogicException When the type provided is not correct\n     */\n    public function tick()\n    {\n        if ('checkbox' !== $this->type) {\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s).', $this->name, $this->type));\n        }\n        $this->setValue(true);\n    }\n    /**\n     * Ticks a checkbox.\n     *\n     * @throws \\LogicException When the type provided is not correct\n     */\n    public function untick()\n    {\n        if ('checkbox' !== $this->type) {\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s).', $this->name, $this->type));\n        }\n        $this->setValue(false);\n    }\n    /**\n     * Sets the value of the field.\n     *\n     * @param string $value The value of the field\n     *\n     * @throws \\InvalidArgumentException When value type provided is not correct\n     */\n    public function setValue($value)\n    {\n        if ('checkbox' === $this->type && false === $value) {\n            // uncheck\n            $this->value = null;\n        } elseif ('checkbox' === $this->type && true === $value) {\n            // check\n            $this->value = $this->options[0]['value'];\n        } else {\n            if (is_array($value)) {\n                if (!$this->multiple) {\n                    throw new \\InvalidArgumentException(sprintf('The value for \"%s\" cannot be an array.', $this->name));\n                }\n                foreach ($value as $v) {\n                    if (!$this->containsOption($v, $this->options)) {\n                        throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s).', $this->name, $v, implode(', ', $this->availableOptionValues())));\n                    }\n                }\n            } elseif (!$this->containsOption($value, $this->options)) {\n                throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s).', $this->name, $value, implode(', ', $this->availableOptionValues())));\n            }\n            if ($this->multiple) {\n                $value = (array) $value;\n            }\n            if (is_array($value)) {\n                $this->value = $value;\n            } else {\n                parent::setValue($value);\n            }\n        }\n    }\n    /**\n     * Adds a choice to the current ones.\n     *\n     * This method should only be used internally.\n     *\n     * @param \\DOMElement $node\n     *\n     * @throws \\LogicException When choice provided is not multiple nor radio\n     */\n    public function addChoice(\\DOMElement $node)\n    {\n        if (!$this->multiple && 'radio' !== $this->type) {\n            throw new \\LogicException(sprintf('Unable to add a choice for \"%s\" as it is not multiple or is not a radio button.', $this->name));\n        }\n        $option = $this->buildOptionValue($node);\n        $this->options[] = $option;\n        if ($node->hasAttribute('checked')) {\n            $this->value = $option['value'];\n        }\n    }\n    /**\n     * Returns the type of the choice field (radio, select, or checkbox).\n     *\n     * @return string The type\n     */\n    public function getType()\n    {\n        return $this->type;\n    }\n    /**\n     * Returns true if the field accepts multiple values.\n     *\n     * @return bool true if the field accepts multiple values, false otherwise\n     */\n    public function isMultiple()\n    {\n        return $this->multiple;\n    }\n    /**\n     * Initializes the form field.\n     *\n     * @throws \\LogicException When node type is incorrect\n     */\n    protected function initialize()\n    {\n        if ('input' !== $this->node->nodeName && 'select' !== $this->node->nodeName) {\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input or select tag (%s given).', $this->node->nodeName));\n        }\n        if ('input' === $this->node->nodeName && 'checkbox' !== strtolower($this->node->getAttribute('type')) && 'radio' !== strtolower($this->node->getAttribute('type'))) {\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input tag with a type of checkbox or radio (given type is %s).', $this->node->getAttribute('type')));\n        }\n        $this->value = null;\n        $this->options = array();\n        $this->multiple = false;\n        if ('input' == $this->node->nodeName) {\n            $this->type = strtolower($this->node->getAttribute('type'));\n            $optionValue = $this->buildOptionValue($this->node);\n            $this->options[] = $optionValue;\n            if ($this->node->hasAttribute('checked')) {\n                $this->value = $optionValue['value'];\n            }\n        } else {\n            $this->type = 'select';\n            if ($this->node->hasAttribute('multiple')) {\n                $this->multiple = true;\n                $this->value = array();\n                $this->name = str_replace('[]', '', $this->name);\n            }\n            $found = false;\n            foreach ($this->xpath->query('descendant::option', $this->node) as $option) {\n                $optionValue = $this->buildOptionValue($option);\n                $this->options[] = $optionValue;\n                if ($option->hasAttribute('selected')) {\n                    $found = true;\n                    if ($this->multiple) {\n                        $this->value[] = $optionValue['value'];\n                    } else {\n                        $this->value = $optionValue['value'];\n                    }\n                }\n            }\n            // if no option is selected and if it is a simple select box, take the first option as the value\n            if (!$found && !$this->multiple && !empty($this->options)) {\n                $this->value = $this->options[0]['value'];\n            }\n        }\n    }\n    /**\n     * Returns option value with associated disabled flag.\n     *\n     * @param \\DOMElement $node\n     *\n     * @return array\n     */\n    private function buildOptionValue(\\DOMElement $node)\n    {\n        $option = array();\n        $defaultDefaultValue = 'select' === $this->node->nodeName ? '' : 'on';\n        $defaultValue = (isset($node->nodeValue) && !empty($node->nodeValue)) ? $node->nodeValue : $defaultDefaultValue;\n        $option['value'] = $node->hasAttribute('value') ? $node->getAttribute('value') : $defaultValue;\n        $option['disabled'] = $node->hasAttribute('disabled');\n        return $option;\n    }\n    /**\n     * Checks whether given value is in the existing options.\n     *\n     * @param string $optionValue\n     * @param array  $options\n     *\n     * @return bool\n     */\n    public function containsOption($optionValue, $options)\n    {\n        if ($this->validationDisabled) {\n            return true;\n        }\n        foreach ($options as $option) {\n            if ($option['value'] == $optionValue) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Returns list of available field options.\n     *\n     * @return array\n     */\n    public function availableOptionValues()\n    {\n        $values = array();\n        foreach ($this->options as $option) {\n            $values[] = $option['value'];\n        }\n        return $values;\n    }\n    /**\n     * Disables the internal validation of the field.\n     *\n     * @return self\n     */\n    public function disableValidation()\n    {\n        $this->validationDisabled = true;\n        return $this;\n    }\n}","children":[{"body_character":"/**\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *","children":[],"id":"0","children_ids":[],"type":"comment","name":null,"body":"/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */","line_start":2,"line_end":9,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":2,"start_statement_line_end":2,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":9,"end_statement_line_end":9,"end_statement_line_in_start":8,"end_statement_line_in_end":8,"char_start":6,"start_statement_char_start":6,"start_statement_char_end":8,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":235,"end_statement_char_start":233,"end_statement_char_end":235,"end_statement_char_in_start":227,"end_statement_char_in_end":229},{"body_character":"/***\n * ChoiceFormField represents a choice form field.\n * function asss () {\n    \n\n * It is constructed from a HTML select tag, or a HTML checkbox, or radio inputs.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n *","children":[],"id":"1","children_ids":[],"type":"comment","name":null,"body":"/**\n * ChoiceFormField represents a choice form field.\n * function asss () {\n    \n\n * It is constructed from a HTML select tag, or a HTML checkbox, or radio inputs.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */","line_start":11,"line_end":19,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":11,"start_statement_line_end":11,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":19,"end_statement_line_end":19,"end_statement_line_in_start":9,"end_statement_line_in_end":9,"char_start":282,"start_statement_char_start":282,"start_statement_char_end":284,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":502,"end_statement_char_start":500,"end_statement_char_end":502,"end_statement_char_in_start":218,"end_statement_char_in_end":220},{"body_character":"/// daky dalso\n","children":[],"id":"2","children_ids":[],"type":"comment","name":null,"body":"// daky dalso\n","line_start":20,"line_end":20,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":20,"start_statement_line_end":20,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":19,"end_statement_line_end":20,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":503,"start_statement_char_start":503,"start_statement_char_end":505,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":517,"end_statement_char_start":516,"end_statement_char_end":517,"end_statement_char_in_start":13,"end_statement_char_in_end":14},{"body_character":"/// daky dalso2\n","children":[],"id":"3","children_ids":[],"type":"comment","name":null,"body":"// daky dalso2\n","line_start":21,"line_end":21,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":21,"start_statement_line_end":21,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":20,"end_statement_line_end":21,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":517,"start_statement_char_start":517,"start_statement_char_end":519,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":532,"end_statement_char_start":531,"end_statement_char_end":532,"end_statement_char_in_start":14,"end_statement_char_in_end":15},{"body_character":"/// daky dalso3\n","children":[],"id":"4","children_ids":[],"type":"comment","name":null,"body":"// daky dalso3\n","line_start":22,"line_end":22,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":22,"start_statement_line_end":22,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":21,"end_statement_line_end":22,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":532,"start_statement_char_start":532,"start_statement_char_end":534,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":547,"end_statement_char_start":546,"end_statement_char_end":547,"end_statement_char_in_start":14,"end_statement_char_in_end":15},{"body_character":"/// daky dalso6\n","children":[],"id":"5","children_ids":[],"type":"comment","name":null,"body":"// daky dalso6\n","line_start":23,"line_end":23,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":23,"start_statement_line_end":23,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":22,"end_statement_line_end":23,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":547,"start_statement_char_start":547,"start_statement_char_end":549,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":562,"end_statement_char_start":561,"end_statement_char_end":562,"end_statement_char_in_start":14,"end_statement_char_in_end":15},{"body_character":"/// daky dalso4\n","children":[],"id":"6","children_ids":[],"type":"comment","name":null,"body":"// daky dalso4\n","line_start":24,"line_end":24,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"   ","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":24,"start_statement_line_end":24,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":23,"end_statement_line_end":24,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":562,"start_statement_char_start":562,"start_statement_char_end":564,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":577,"end_statement_char_start":576,"end_statement_char_end":577,"end_statement_char_in_start":14,"end_statement_char_in_end":15},{"body_character":"class ChoiceFormField extends FormField\n{lass ChoiceFormField extends FormField\n{\n    /**\n     * @var string\n     */\n    private $type;\n    /**\n     * @var bool\n     */\n    private $multiple;\n    /**\n     * @var array\n     */\n    private $options;\n    /**\n     * @var bool\n     */\n    private $validationDisabled = false;\n    /**\n     * Returns true if the field should be included in the submitted values.\n     *\n     * @return bool true if the field should be included in the submitted values, false otherwise\n     */\n    public function hasValue()\n    {\n        // don't send a value for unchecked checkboxes'\n        if (in_array($this->type, array('checkbox, 'radio)) && null === $this->value) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Check if the current selected option is disabled.\n     *\n     * @return bool\n     */\n    public function isDisabled()\n    {\n        if (parent::isDisabled() && 'select === $this->type) {\n            return true;\n        }\n        foreach ($this->options as $option) {\n            if ($option['value] == $this->value && $option['disabled]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Sets the value of the field.\n     *\n     * @param string $value The value of the field\n     */\n    public function select($value)\n    {\n        $this->setValue($value);\n    }\n    /**\n     * Ticks a checkbox.\n     *\n     * @throws \\LogicException When the type provided is not correct\n     */\n    public function tick()\n    {\n        if ('checkbox !== $this->type) {\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s)., $this->name, $this->type));\n        }\n        $this->setValue(true);\n    }\n    /**\n     * Ticks a checkbox.\n     *\n     * @throws \\LogicException When the type provided is not correct\n     */\n    public function untick()\n    {\n        if ('checkbox !== $this->type) {\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s)., $this->name, $this->type));\n        }\n        $this->setValue(false);\n    }\n    /**\n     * Sets the value of the field.\n     *\n     * @param string $value The value of the field\n     *\n     * @throws \\InvalidArgumentException When value type provided is not correct\n     */\n    public function setValue($value)\n    {\n        if ('checkbox === $this->type && false === $value) {\n            // uncheck\n            $this->value = null;\n        } elseif ('checkbox === $this->type && true === $value) {\n            // check\n            $this->value = $this->options[0]['value];\n        } else {\n            if (is_array($value)) {\n                if (!$this->multiple) {\n                    throw new \\InvalidArgumentException(sprintf('The value for \"%s\" cannot be an array., $this->name));\n                }\n                foreach ($value as $v) {\n                    if (!$this->containsOption($v, $this->options)) {\n                        throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s)., $this->name, $v, implode(', , $this->availableOptionValues())));\n                    }\n                }\n            } elseif (!$this->containsOption($value, $this->options)) {\n                throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s)., $this->name, $value, implode(', , $this->availableOptionValues())));\n            }\n            if ($this->multiple) {\n                $value = (array) $value;\n            }\n            if (is_array($value)) {\n                $this->value = $value;\n            } else {\n                parent::setValue($value);\n            }\n        }\n    }\n    /**\n     * Adds a choice to the current ones.\n     *\n     * This method should only be used internally.\n     *\n     * @param \\DOMElement $node\n     *\n     * @throws \\LogicException When choice provided is not multiple nor radio\n     */\n    public function addChoice(\\DOMElement $node)\n    {\n        if (!$this->multiple && 'radio !== $this->type) {\n            throw new \\LogicException(sprintf('Unable to add a choice for \"%s\" as it is not multiple or is not a radio button., $this->name));\n        }\n        $option = $this->buildOptionValue($node);\n        $this->options[] = $option;\n        if ($node->hasAttribute('checked)) {\n            $this->value = $option['value];\n        }\n    }\n    /**\n     * Returns the type of the choice field (radio, select, or checkbox).\n     *\n     * @return string The type\n     */\n    public function getType()\n    {\n        return $this->type;\n    }\n    /**\n     * Returns true if the field accepts multiple values.\n     *\n     * @return bool true if the field accepts multiple values, false otherwise\n     */\n    public function isMultiple()\n    {\n        return $this->multiple;\n    }\n    /**\n     * Initializes the form field.\n     *\n     * @throws \\LogicException When node type is incorrect\n     */\n    protected function initialize()\n    {\n        if ('input !== $this->node->nodeName && 'select !== $this->node->nodeName) {\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input or select tag (%s given)., $this->node->nodeName));\n        }\n        if ('input === $this->node->nodeName && 'checkbox !== strtolower($this->node->getAttribute('type)) && 'radio !== strtolower($this->node->getAttribute('type))) {\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input tag with a type of checkbox or radio (given type is %s)., $this->node->getAttribute('type)));\n        }\n        $this->value = null;\n        $this->options = array();\n        $this->multiple = false;\n        if ('input == $this->node->nodeName) {\n            $this->type = strtolower($this->node->getAttribute('type));\n            $optionValue = $this->buildOptionValue($this->node);\n            $this->options[] = $optionValue;\n            if ($this->node->hasAttribute('checked)) {\n                $this->value = $optionValue['value];\n            }\n        } else {\n            $this->type = 'select;\n            if ($this->node->hasAttribute('multiple)) {\n                $this->multiple = true;\n                $this->value = array();\n                $this->name = str_replace('[], ', $this->name);\n            }\n            $found = false;\n            foreach ($this->xpath->query('descendant::option, $this->node) as $option) {\n                $optionValue = $this->buildOptionValue($option);\n                $this->options[] = $optionValue;\n                if ($option->hasAttribute('selected)) {\n                    $found = true;\n                    if ($this->multiple) {\n                        $this->value[] = $optionValue['value];\n                    } else {\n                        $this->value = $optionValue['value];\n                    }\n                }\n            }\n            // if no option is selected and if it is a simple select box, take the first option as the value\n            if (!$found && !$this->multiple && !empty($this->options)) {\n                $this->value = $this->options[0]['value];\n            }\n        }\n    }\n    /**\n     * Returns option value with associated disabled flag.\n     *\n     * @param \\DOMElement $node\n     *\n     * @return array\n     */\n    private function buildOptionValue(\\DOMElement $node)\n    {\n        $option = array();\n        $defaultDefaultValue = 'select === $this->node->nodeName ? ' : 'on;\n        $defaultValue = (isset($node->nodeValue) && !empty($node->nodeValue)) ? $node->nodeValue : $defaultDefaultValue;\n        $option['value] = $node->hasAttribute('value) ? $node->getAttribute('value) : $defaultValue;\n        $option['disabled] = $node->hasAttribute('disabled);\n        return $option;\n    }\n    /**\n     * Checks whether given value is in the existing options.\n     *\n     * @param string $optionValue\n     * @param array  $options\n     *\n     * @return bool\n     */\n    public function containsOption($optionValue, $options)\n    {\n        if ($this->validationDisabled) {\n            return true;\n        }\n        foreach ($options as $option) {\n            if ($option['value] == $optionValue) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Returns list of available field options.\n     *\n     * @return array\n     */\n    public function availableOptionValues()\n    {\n        $values = array();\n        foreach ($this->options as $option) {\n            $values[] = $option['value];\n        }\n        return $values;\n    }\n    /**\n     * Disables the internal validation of the field.\n     *\n     * @return self\n     */\n    public function disableValidation()\n    {\n        $this->validationDisabled = true;\n        return $this;\n    }\n}","children":[{"body_character":"/***\n     * @var string\n     *","children":[],"id":"8","children_ids":[],"type":"comment","name":null,"body":"/**\n     * @var string\n     */","line_start":27,"line_end":29,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":27,"start_statement_line_end":27,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":29,"end_statement_line_end":29,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":623,"start_statement_char_start":623,"start_statement_char_end":625,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":653,"end_statement_char_start":651,"end_statement_char_end":653,"end_statement_char_in_start":28,"end_statement_char_in_end":30},{"body_character":"$type;type;","children":[],"id":"9","children_ids":[],"type":"attribute","name":"type","body":"$type","line_start":30,"line_end":30,"line_preserve_start_whitespaces":"     ","line_preserve_end_whitespaces":"","start_statement":"$type;","end_statement":"","start_statement_regexp":"/\\$([a-zA-Z0-9_]+)\\s*;/","start_statement_matched":"$type;","start_statement_line_start":30,"start_statement_line_end":30,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":30,"end_statement_line_end":30,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":666,"start_statement_char_start":666,"start_statement_char_end":672,"start_statement_char_in_start":0,"start_statement_char_in_end":6,"char_end":671,"end_statement_char_start":671,"end_statement_char_end":671,"end_statement_char_in_start":5,"end_statement_char_in_end":5},{"body_character":"/***\n     * @var bool\n     *","children":[],"id":"10","children_ids":[],"type":"comment","name":null,"body":"/**\n     * @var bool\n     */","line_start":31,"line_end":33,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":31,"start_statement_line_end":31,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":33,"end_statement_line_end":33,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":677,"start_statement_char_start":677,"start_statement_char_end":679,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":705,"end_statement_char_start":703,"end_statement_char_end":705,"end_statement_char_in_start":26,"end_statement_char_in_end":28},{"body_character":"$multiple;multiple;","children":[],"id":"11","children_ids":[],"type":"attribute","name":"multiple","body":"$multiple","line_start":34,"line_end":34,"line_preserve_start_whitespaces":"     ","line_preserve_end_whitespaces":"","start_statement":"$multiple;","end_statement":"","start_statement_regexp":"/\\$([a-zA-Z0-9_]+)\\s*;/","start_statement_matched":"$multiple;","start_statement_line_start":34,"start_statement_line_end":34,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":34,"end_statement_line_end":34,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":718,"start_statement_char_start":718,"start_statement_char_end":728,"start_statement_char_in_start":0,"start_statement_char_in_end":10,"char_end":727,"end_statement_char_start":727,"end_statement_char_end":727,"end_statement_char_in_start":9,"end_statement_char_in_end":9},{"body_character":"/***\n     * @var array\n     *","children":[],"id":"12","children_ids":[],"type":"comment","name":null,"body":"/**\n     * @var array\n     */","line_start":35,"line_end":37,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":35,"start_statement_line_end":35,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":37,"end_statement_line_end":37,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":733,"start_statement_char_start":733,"start_statement_char_end":735,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":762,"end_statement_char_start":760,"end_statement_char_end":762,"end_statement_char_in_start":27,"end_statement_char_in_end":29},{"body_character":"$options;options;","children":[],"id":"13","children_ids":[],"type":"attribute","name":"options","body":"$options","line_start":38,"line_end":38,"line_preserve_start_whitespaces":"     ","line_preserve_end_whitespaces":"","start_statement":"$options;","end_statement":"","start_statement_regexp":"/\\$([a-zA-Z0-9_]+)\\s*;/","start_statement_matched":"$options;","start_statement_line_start":38,"start_statement_line_end":38,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":38,"end_statement_line_end":38,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":775,"start_statement_char_start":775,"start_statement_char_end":784,"start_statement_char_in_start":0,"start_statement_char_in_end":9,"char_end":783,"end_statement_char_start":783,"end_statement_char_end":783,"end_statement_char_in_start":8,"end_statement_char_in_end":8},{"body_character":"/***\n     * @var bool\n     *","children":[],"id":"14","children_ids":[],"type":"comment","name":null,"body":"/**\n     * @var bool\n     */","line_start":39,"line_end":41,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":39,"start_statement_line_end":39,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":41,"end_statement_line_end":41,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":789,"start_statement_char_start":789,"start_statement_char_end":791,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":817,"end_statement_char_start":815,"end_statement_char_end":817,"end_statement_char_in_start":26,"end_statement_char_in_end":28},{"body_character":"$validationDisabled =validationDisabled = false;","children":[],"id":"15","children_ids":[],"type":"attribute-assignment","name":"validationDisabled","body":"$validationDisabled = false;","line_start":42,"line_end":42,"line_preserve_start_whitespaces":"     ","line_preserve_end_whitespaces":"","start_statement":"$validationDisabled =","end_statement":";","start_statement_regexp":"/\\$([a-zA-Z0-9_]+)\\s*=/","start_statement_matched":"$validationDisabled =","start_statement_line_start":42,"start_statement_line_end":42,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/;/","end_statement_matched":";","end_statement_line_start":42,"end_statement_line_end":42,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":830,"start_statement_char_start":830,"start_statement_char_end":851,"start_statement_char_in_start":0,"start_statement_char_in_end":21,"char_end":858,"end_statement_char_start":857,"end_statement_char_end":858,"end_statement_char_in_start":27,"end_statement_char_in_end":28},{"body_character":"/***\n     * Returns true if the field should be included in the submitted values.\n     *\n     * @return bool true if the field should be included in the submitted values, false otherwise\n     *","children":[],"id":"16","children_ids":[],"type":"comment","name":null,"body":"/**\n     * Returns true if the field should be included in the submitted values.\n     *\n     * @return bool true if the field should be included in the submitted values, false otherwise\n     */","line_start":43,"line_end":47,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":43,"start_statement_line_end":43,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":47,"end_statement_line_end":47,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":863,"start_statement_char_start":863,"start_statement_char_end":865,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":1056,"end_statement_char_start":1054,"end_statement_char_end":1056,"end_statement_char_in_start":191,"end_statement_char_in_end":193},{"body_character":"public function hasValue()\n    {ublic function hasValue()\n    {\n        // don't send a value for unchecked checkboxes'\n        if (in_array($this->type, array('checkbox, 'radio)) && null === $this->value) {\n            return false;\n        }\n        return true;\n    }","children":[{"body_character":"/// don't send a value for unchecked checkboxes'\n","children":[],"id":"18","children_ids":[],"type":"comment","name":null,"body":"// don't send a value for unchecked checkboxes'\n","line_start":50,"line_end":50,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"                ","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":50,"start_statement_line_end":50,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":49,"end_statement_line_end":50,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":1102,"start_statement_char_start":1102,"start_statement_char_end":1104,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":1150,"end_statement_char_start":1149,"end_statement_char_end":1150,"end_statement_char_in_start":47,"end_statement_char_in_end":48},{"body_character":"{\n            return false;\n        }","children":[],"id":"19","children_ids":[],"type":"statement","name":null,"body":"{\n            return false;\n        }","line_start":51,"line_end":53,"line_preserve_start_whitespaces":"                ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":51,"start_statement_line_end":51,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":53,"end_statement_line_end":53,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":1238,"start_statement_char_start":1238,"start_statement_char_end":1239,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":1275,"end_statement_char_start":1274,"end_statement_char_end":1275,"end_statement_char_in_start":36,"end_statement_char_in_end":37}],"id":"17","children_ids":["18","19"],"type":"method","name":"hasValue()","body":"public function hasValue()\n    {\n        // don't send a value for unchecked checkboxes'\n        if (in_array($this->type, array('checkbox', 'radio')) && null === $this->value) {\n            return false;\n        }\n        return true;\n    }","line_start":48,"line_end":55,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"public function hasValue()\n    {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\([()a-zA-Z,_'\"\\$=0-9\\[\\]\\s><]*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public function hasValue()\n    {","start_statement_line_start":48,"start_statement_line_end":49,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":55,"end_statement_line_end":55,"end_statement_line_in_start":8,"end_statement_line_in_end":8,"char_start":1061,"start_statement_char_start":1061,"start_statement_char_end":1093,"start_statement_char_in_start":0,"start_statement_char_in_end":32,"char_end":1302,"end_statement_char_start":1301,"end_statement_char_end":1302,"end_statement_char_in_start":240,"end_statement_char_in_end":241},{"body_character":"/***\n     * Check if the current selected option is disabled.\n     *\n     * @return bool\n     *","children":[],"id":"20","children_ids":[],"type":"comment","name":null,"body":"/**\n     * Check if the current selected option is disabled.\n     *\n     * @return bool\n     */","line_start":56,"line_end":60,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":56,"start_statement_line_end":56,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":60,"end_statement_line_end":60,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":1307,"start_statement_char_start":1307,"start_statement_char_end":1309,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":1402,"end_statement_char_start":1400,"end_statement_char_end":1402,"end_statement_char_in_start":93,"end_statement_char_in_end":95},{"body_character":"public function isDisabled()\n    {ublic function isDisabled()\n    {\n        if (parent::isDisabled() && 'select === $this->type) {\n            return true;\n        }\n        foreach ($this->options as $option) {\n            if ($option['value] == $this->value && $option['disabled]) {\n                return true;\n            }\n        }\n        return false;\n    }","children":[{"body_character":"{\n            return true;\n        }","children":[],"id":"22","children_ids":[],"type":"statement","name":null,"body":"{\n            return true;\n        }","line_start":63,"line_end":65,"line_preserve_start_whitespaces":"              ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":63,"start_statement_line_end":63,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":65,"end_statement_line_end":65,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":1504,"start_statement_char_start":1504,"start_statement_char_end":1505,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":1540,"end_statement_char_start":1539,"end_statement_char_end":1540,"end_statement_char_in_start":35,"end_statement_char_in_end":36},{"body_character":"{\n            if ($option['value] == $this->value && $option['disabled]) {\n                return true;\n            }\n        }","children":[{"body_character":"{\n                return true;\n            }","children":[],"id":"24","children_ids":[],"type":"statement","name":null,"body":"{\n                return true;\n            }","line_start":67,"line_end":69,"line_preserve_start_whitespaces":"                  ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":67,"start_statement_line_end":67,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":69,"end_statement_line_end":69,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":1660,"start_statement_char_start":1660,"start_statement_char_end":1661,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":1704,"end_statement_char_start":1703,"end_statement_char_end":1704,"end_statement_char_in_start":43,"end_statement_char_in_end":44}],"id":"23","children_ids":["24"],"type":"statement","name":null,"body":"{\n            if ($option['value'] == $this->value && $option['disabled']) {\n                return true;\n            }\n        }","line_start":66,"line_end":70,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":66,"start_statement_line_end":66,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":70,"end_statement_line_end":70,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":1585,"start_statement_char_start":1585,"start_statement_char_end":1586,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":1714,"end_statement_char_start":1713,"end_statement_char_end":1714,"end_statement_char_in_start":128,"end_statement_char_in_end":129}],"id":"21","children_ids":["22","23"],"type":"method","name":"isDisabled()","body":"public function isDisabled()\n    {\n        if (parent::isDisabled() && 'select' === $this->type) {\n            return true;\n        }\n        foreach ($this->options as $option) {\n            if ($option['value'] == $this->value && $option['disabled']) {\n                return true;\n            }\n        }\n        return false;\n    }","line_start":61,"line_end":72,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"public function isDisabled()\n    {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\([()a-zA-Z,_'\"\\$=0-9\\[\\]\\s><]*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public function isDisabled()\n    {","start_statement_line_start":61,"start_statement_line_end":62,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":72,"end_statement_line_end":72,"end_statement_line_in_start":12,"end_statement_line_in_end":12,"char_start":1407,"start_statement_char_start":1407,"start_statement_char_end":1441,"start_statement_char_in_start":0,"start_statement_char_in_end":34,"char_end":1742,"end_statement_char_start":1741,"end_statement_char_end":1742,"end_statement_char_in_start":334,"end_statement_char_in_end":335},{"body_character":"/***\n     * Sets the value of the field.\n     *\n     * @param string $value The value of the field\n     *","children":[],"id":"25","children_ids":[],"type":"comment","name":null,"body":"/**\n     * Sets the value of the field.\n     *\n     * @param string $value The value of the field\n     */","line_start":73,"line_end":77,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":73,"start_statement_line_end":73,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":77,"end_statement_line_end":77,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":1747,"start_statement_char_start":1747,"start_statement_char_end":1749,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":1852,"end_statement_char_start":1850,"end_statement_char_end":1852,"end_statement_char_in_start":103,"end_statement_char_in_end":105},{"body_character":"public function select($value)\n    {ublic function select($value)\n    {\n        $this->setValue($value);\n    }","children":[],"id":"26","children_ids":[],"type":"method","name":"select($value)","body":"public function select($value)\n    {\n        $this->setValue($value);\n    }","line_start":78,"line_end":81,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"public function select($value)\n    {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\([()a-zA-Z,_'\"\\$=0-9\\[\\]\\s><]*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public function select($value)\n    {","start_statement_line_start":78,"start_statement_line_end":79,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":81,"end_statement_line_end":81,"end_statement_line_in_start":4,"end_statement_line_in_end":4,"char_start":1857,"start_statement_char_start":1857,"start_statement_char_end":1893,"start_statement_char_in_start":0,"start_statement_char_in_end":36,"char_end":1932,"end_statement_char_start":1931,"end_statement_char_end":1932,"end_statement_char_in_start":74,"end_statement_char_in_end":75},{"body_character":"/***\n     * Ticks a checkbox.\n     *\n     * @throws \\LogicException When the type provided is not correct\n     *","children":[],"id":"27","children_ids":[],"type":"comment","name":null,"body":"/**\n     * Ticks a checkbox.\n     *\n     * @throws \\LogicException When the type provided is not correct\n     */","line_start":82,"line_end":86,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":82,"start_statement_line_end":82,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":86,"end_statement_line_end":86,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":1937,"start_statement_char_start":1937,"start_statement_char_end":1939,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":2049,"end_statement_char_start":2047,"end_statement_char_end":2049,"end_statement_char_in_start":110,"end_statement_char_in_end":112},{"body_character":"public function tick()\n    {ublic function tick()\n    {\n        if ('checkbox !== $this->type) {\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s)., $this->name, $this->type));\n        }\n        $this->setValue(true);\n    }","children":[{"body_character":"{\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s)., $this->name, $this->type));\n        }","children":[],"id":"29","children_ids":[],"type":"statement","name":null,"body":"{\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s).', $this->name, $this->type));\n        }","line_start":89,"line_end":91,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":89,"start_statement_line_end":89,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":91,"end_statement_line_end":91,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":2123,"start_statement_char_start":2123,"start_statement_char_end":2124,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":2262,"end_statement_char_start":2261,"end_statement_char_end":2262,"end_statement_char_in_start":138,"end_statement_char_in_end":139}],"id":"28","children_ids":["29"],"type":"method","name":"tick()","body":"public function tick()\n    {\n        if ('checkbox' !== $this->type) {\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s).', $this->name, $this->type));\n        }\n        $this->setValue(true);\n    }","line_start":87,"line_end":93,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"public function tick()\n    {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\([()a-zA-Z,_'\"\\$=0-9\\[\\]\\s><]*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public function tick()\n    {","start_statement_line_start":87,"start_statement_line_end":88,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":93,"end_statement_line_end":93,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":2054,"start_statement_char_start":2054,"start_statement_char_end":2082,"start_statement_char_in_start":0,"start_statement_char_in_end":28,"char_end":2299,"end_statement_char_start":2298,"end_statement_char_end":2299,"end_statement_char_in_start":244,"end_statement_char_in_end":245},{"body_character":"/***\n     * Ticks a checkbox.\n     *\n     * @throws \\LogicException When the type provided is not correct\n     *","children":[],"id":"30","children_ids":[],"type":"comment","name":null,"body":"/**\n     * Ticks a checkbox.\n     *\n     * @throws \\LogicException When the type provided is not correct\n     */","line_start":94,"line_end":98,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":94,"start_statement_line_end":94,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":98,"end_statement_line_end":98,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":2304,"start_statement_char_start":2304,"start_statement_char_end":2306,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":2416,"end_statement_char_start":2414,"end_statement_char_end":2416,"end_statement_char_in_start":110,"end_statement_char_in_end":112},{"body_character":"public function untick()\n    {ublic function untick()\n    {\n        if ('checkbox !== $this->type) {\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s)., $this->name, $this->type));\n        }\n        $this->setValue(false);\n    }","children":[{"body_character":"{\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s)., $this->name, $this->type));\n        }","children":[],"id":"32","children_ids":[],"type":"statement","name":null,"body":"{\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s).', $this->name, $this->type));\n        }","line_start":101,"line_end":103,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":101,"start_statement_line_end":101,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":103,"end_statement_line_end":103,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":2492,"start_statement_char_start":2492,"start_statement_char_end":2493,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":2631,"end_statement_char_start":2630,"end_statement_char_end":2631,"end_statement_char_in_start":138,"end_statement_char_in_end":139}],"id":"31","children_ids":["32"],"type":"method","name":"untick()","body":"public function untick()\n    {\n        if ('checkbox' !== $this->type) {\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s).', $this->name, $this->type));\n        }\n        $this->setValue(false);\n    }","line_start":99,"line_end":105,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"public function untick()\n    {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\([()a-zA-Z,_'\"\\$=0-9\\[\\]\\s><]*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public function untick()\n    {","start_statement_line_start":99,"start_statement_line_end":100,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":105,"end_statement_line_end":105,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":2421,"start_statement_char_start":2421,"start_statement_char_end":2451,"start_statement_char_in_start":0,"start_statement_char_in_end":30,"char_end":2669,"end_statement_char_start":2668,"end_statement_char_end":2669,"end_statement_char_in_start":247,"end_statement_char_in_end":248},{"body_character":"/***\n     * Sets the value of the field.\n     *\n     * @param string $value The value of the field\n     *\n     * @throws \\InvalidArgumentException When value type provided is not correct\n     *","children":[],"id":"33","children_ids":[],"type":"comment","name":null,"body":"/**\n     * Sets the value of the field.\n     *\n     * @param string $value The value of the field\n     *\n     * @throws \\InvalidArgumentException When value type provided is not correct\n     */","line_start":106,"line_end":112,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":106,"start_statement_line_end":106,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":112,"end_statement_line_end":112,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":2674,"start_statement_char_start":2674,"start_statement_char_end":2676,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":2867,"end_statement_char_start":2865,"end_statement_char_end":2867,"end_statement_char_in_start":191,"end_statement_char_in_end":193},{"body_character":"public function setValue($value)\n    {ublic function setValue($value)\n    {\n        if ('checkbox === $this->type && false === $value) {\n            // uncheck\n            $this->value = null;\n        } elseif ('checkbox === $this->type && true === $value) {\n            // check\n            $this->value = $this->options[0]['value];\n        } else {\n            if (is_array($value)) {\n                if (!$this->multiple) {\n                    throw new \\InvalidArgumentException(sprintf('The value for \"%s\" cannot be an array., $this->name));\n                }\n                foreach ($value as $v) {\n                    if (!$this->containsOption($v, $this->options)) {\n                        throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s)., $this->name, $v, implode(', , $this->availableOptionValues())));\n                    }\n                }\n            } elseif (!$this->containsOption($value, $this->options)) {\n                throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s)., $this->name, $value, implode(', , $this->availableOptionValues())));\n            }\n            if ($this->multiple) {\n                $value = (array) $value;\n            }\n            if (is_array($value)) {\n                $this->value = $value;\n            } else {\n                parent::setValue($value);\n            }\n        }\n    }","children":[{"body_character":"{\n            // uncheck\n            $this->value = null;\n        }","children":[{"body_character":"/// uncheck\n","children":[],"id":"36","children_ids":[],"type":"comment","name":null,"body":"// uncheck\n","line_start":116,"line_end":116,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"              ","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":116,"start_statement_line_end":116,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":115,"end_statement_line_end":116,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":2985,"start_statement_char_start":2985,"start_statement_char_end":2987,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":2996,"end_statement_char_start":2995,"end_statement_char_end":2996,"end_statement_char_in_start":10,"end_statement_char_in_end":11}],"id":"35","children_ids":["36"],"type":"statement","name":null,"body":"{\n            // uncheck\n            $this->value = null;\n        }","line_start":115,"line_end":118,"line_preserve_start_whitespaces":"                ","line_preserve_end_whitespaces":"         ","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":115,"start_statement_line_end":115,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":118,"end_statement_line_end":118,"end_statement_line_in_start":4,"end_statement_line_in_end":4,"char_start":2971,"start_statement_char_start":2971,"start_statement_char_end":2972,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":3038,"end_statement_char_start":3037,"end_statement_char_end":3038,"end_statement_char_in_start":66,"end_statement_char_in_end":67},{"body_character":"{\n            // check\n            $this->value = $this->options[0]['value];\n        }","children":[{"body_character":"/// check\n","children":[],"id":"38","children_ids":[],"type":"comment","name":null,"body":"// check\n","line_start":119,"line_end":119,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"              ","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":119,"start_statement_line_end":119,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":118,"end_statement_line_end":119,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":3108,"start_statement_char_start":3108,"start_statement_char_end":3110,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":3117,"end_statement_char_start":3116,"end_statement_char_end":3117,"end_statement_char_in_start":8,"end_statement_char_in_end":9}],"id":"37","children_ids":["38"],"type":"statement","name":null,"body":"{\n            // check\n            $this->value = $this->options[0]['value'];\n        }","line_start":118,"line_end":121,"line_preserve_start_whitespaces":"         ","line_preserve_end_whitespaces":"  ","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":118,"start_statement_line_end":118,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":121,"end_statement_line_end":121,"end_statement_line_in_start":4,"end_statement_line_in_end":4,"char_start":3094,"start_statement_char_start":3094,"start_statement_char_end":3095,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":3181,"end_statement_char_start":3180,"end_statement_char_end":3181,"end_statement_char_in_start":86,"end_statement_char_in_end":87},{"body_character":"{\n            if (is_array($value)) {\n                if (!$this->multiple) {\n                    throw new \\InvalidArgumentException(sprintf('The value for \"%s\" cannot be an array., $this->name));\n                }\n                foreach ($value as $v) {\n                    if (!$this->containsOption($v, $this->options)) {\n                        throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s)., $this->name, $v, implode(', , $this->availableOptionValues())));\n                    }\n                }\n            } elseif (!$this->containsOption($value, $this->options)) {\n                throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s)., $this->name, $value, implode(', , $this->availableOptionValues())));\n            }\n            if ($this->multiple) {\n                $value = (array) $value;\n            }\n            if (is_array($value)) {\n                $this->value = $value;\n            } else {\n                parent::setValue($value);\n            }\n        }","children":[{"body_character":"{\n                if (!$this->multiple) {\n                    throw new \\InvalidArgumentException(sprintf('The value for \"%s\" cannot be an array., $this->name));\n                }\n                foreach ($value as $v) {\n                    if (!$this->containsOption($v, $this->options)) {\n                        throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s)., $this->name, $v, implode(', , $this->availableOptionValues())));\n                    }\n                }\n            }","children":[{"body_character":"{\n                    throw new \\InvalidArgumentException(sprintf('The value for \"%s\" cannot be an array., $this->name));\n                }","children":[],"id":"41","children_ids":[],"type":"statement","name":null,"body":"{\n                    throw new \\InvalidArgumentException(sprintf('The value for \"%s\" cannot be an array.', $this->name));\n                }","line_start":123,"line_end":125,"line_preserve_start_whitespaces":"                  ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":123,"start_statement_line_end":123,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":125,"end_statement_line_end":125,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":3263,"start_statement_char_start":3263,"start_statement_char_end":3264,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":3403,"end_statement_char_start":3402,"end_statement_char_end":3403,"end_statement_char_in_start":139,"end_statement_char_in_end":140},{"body_character":"{\n                    if (!$this->containsOption($v, $this->options)) {\n                        throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s)., $this->name, $v, implode(', , $this->availableOptionValues())));\n                    }\n                }","children":[{"body_character":"{\n                        throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s)., $this->name, $v, implode(', , $this->availableOptionValues())));\n                    }","children":[],"id":"43","children_ids":[],"type":"statement","name":null,"body":"{\n                        throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s).', $this->name, $v, implode(', ', $this->availableOptionValues())));\n                    }","line_start":127,"line_end":129,"line_preserve_start_whitespaces":"                       ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":127,"start_statement_line_end":127,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":129,"end_statement_line_end":129,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":3513,"start_statement_char_start":3513,"start_statement_char_end":3514,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":3735,"end_statement_char_start":3734,"end_statement_char_end":3735,"end_statement_char_in_start":221,"end_statement_char_in_end":222}],"id":"42","children_ids":["43"],"type":"statement","name":null,"body":"{\n                    if (!$this->containsOption($v, $this->options)) {\n                        throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s).', $this->name, $v, implode(', ', $this->availableOptionValues())));\n                    }\n                }","line_start":126,"line_end":130,"line_preserve_start_whitespaces":"                    ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":126,"start_statement_line_end":126,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":130,"end_statement_line_end":130,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":3443,"start_statement_char_start":3443,"start_statement_char_end":3444,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":3753,"end_statement_char_start":3752,"end_statement_char_end":3753,"end_statement_char_in_start":309,"end_statement_char_in_end":310}],"id":"40","children_ids":["41","42"],"type":"statement","name":null,"body":"{\n                if (!$this->multiple) {\n                    throw new \\InvalidArgumentException(sprintf('The value for \"%s\" cannot be an array.', $this->name));\n                }\n                foreach ($value as $v) {\n                    if (!$this->containsOption($v, $this->options)) {\n                        throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s).', $this->name, $v, implode(', ', $this->availableOptionValues())));\n                    }\n                }\n            }","line_start":122,"line_end":131,"line_preserve_start_whitespaces":"              ","line_preserve_end_whitespaces":"    ","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":122,"start_statement_line_end":122,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":131,"end_statement_line_end":131,"end_statement_line_in_start":10,"end_statement_line_in_end":10,"char_start":3223,"start_statement_char_start":3223,"start_statement_char_end":3224,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":3767,"end_statement_char_start":3766,"end_statement_char_end":3767,"end_statement_char_in_start":543,"end_statement_char_in_end":544},{"body_character":"{\n                throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s)., $this->name, $value, implode(', , $this->availableOptionValues())));\n            }","children":[],"id":"44","children_ids":[],"type":"statement","name":null,"body":"{\n                throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s).', $this->name, $value, implode(', ', $this->availableOptionValues())));\n            }","line_start":131,"line_end":133,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":131,"start_statement_line_end":131,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":133,"end_statement_line_end":133,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":3824,"start_statement_char_start":3824,"start_statement_char_end":3825,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4034,"end_statement_char_start":4033,"end_statement_char_end":4034,"end_statement_char_in_start":209,"end_statement_char_in_end":210},{"body_character":"{\n                $value = (array) $value;\n            }","children":[],"id":"45","children_ids":[],"type":"statement","name":null,"body":"{\n                $value = (array) $value;\n            }","line_start":134,"line_end":136,"line_preserve_start_whitespaces":"              ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":134,"start_statement_line_end":134,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":136,"end_statement_line_end":136,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":4068,"start_statement_char_start":4068,"start_statement_char_end":4069,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4124,"end_statement_char_start":4123,"end_statement_char_end":4124,"end_statement_char_in_start":55,"end_statement_char_in_end":56},{"body_character":"{\n                $this->value = $value;\n            }","children":[],"id":"46","children_ids":[],"type":"statement","name":null,"body":"{\n                $this->value = $value;\n            }","line_start":137,"line_end":139,"line_preserve_start_whitespaces":"              ","line_preserve_end_whitespaces":"  ","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":137,"start_statement_line_end":137,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":139,"end_statement_line_end":139,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":4159,"start_statement_char_start":4159,"start_statement_char_end":4160,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4213,"end_statement_char_start":4212,"end_statement_char_end":4213,"end_statement_char_in_start":53,"end_statement_char_in_end":54},{"body_character":"{\n                parent::setValue($value);\n            }","children":[],"id":"47","children_ids":[],"type":"statement","name":null,"body":"{\n                parent::setValue($value);\n            }","line_start":139,"line_end":141,"line_preserve_start_whitespaces":"  ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":139,"start_statement_line_end":139,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":141,"end_statement_line_end":141,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":4219,"start_statement_char_start":4219,"start_statement_char_end":4220,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4276,"end_statement_char_start":4275,"end_statement_char_end":4276,"end_statement_char_in_start":56,"end_statement_char_in_end":57}],"id":"39","children_ids":["40","44","45","46","47"],"type":"statement","name":null,"body":"{\n            if (is_array($value)) {\n                if (!$this->multiple) {\n                    throw new \\InvalidArgumentException(sprintf('The value for \"%s\" cannot be an array.', $this->name));\n                }\n                foreach ($value as $v) {\n                    if (!$this->containsOption($v, $this->options)) {\n                        throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s).', $this->name, $v, implode(', ', $this->availableOptionValues())));\n                    }\n                }\n            } elseif (!$this->containsOption($value, $this->options)) {\n                throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s).', $this->name, $value, implode(', ', $this->availableOptionValues())));\n            }\n            if ($this->multiple) {\n                $value = (array) $value;\n            }\n            if (is_array($value)) {\n                $this->value = $value;\n            } else {\n                parent::setValue($value);\n            }\n        }","line_start":121,"line_end":142,"line_preserve_start_whitespaces":"  ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":121,"start_statement_line_end":121,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":142,"end_statement_line_end":142,"end_statement_line_in_start":22,"end_statement_line_in_end":22,"char_start":3187,"start_statement_char_start":3187,"start_statement_char_end":3188,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4286,"end_statement_char_start":4285,"end_statement_char_end":4286,"end_statement_char_in_start":1098,"end_statement_char_in_end":1099}],"id":"34","children_ids":["35","37","39"],"type":"method","name":"setValue($value)","body":"public function setValue($value)\n    {\n        if ('checkbox' === $this->type && false === $value) {\n            // uncheck\n            $this->value = null;\n        } elseif ('checkbox' === $this->type && true === $value) {\n            // check\n            $this->value = $this->options[0]['value'];\n        } else {\n            if (is_array($value)) {\n                if (!$this->multiple) {\n                    throw new \\InvalidArgumentException(sprintf('The value for \"%s\" cannot be an array.', $this->name));\n                }\n                foreach ($value as $v) {\n                    if (!$this->containsOption($v, $this->options)) {\n                        throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s).', $this->name, $v, implode(', ', $this->availableOptionValues())));\n                    }\n                }\n            } elseif (!$this->containsOption($value, $this->options)) {\n                throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s).', $this->name, $value, implode(', ', $this->availableOptionValues())));\n            }\n            if ($this->multiple) {\n                $value = (array) $value;\n            }\n            if (is_array($value)) {\n                $this->value = $value;\n            } else {\n                parent::setValue($value);\n            }\n        }\n    }","line_start":113,"line_end":143,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"public function setValue($value)\n    {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\([()a-zA-Z,_'\"\\$=0-9\\[\\]\\s><]*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public function setValue($value)\n    {","start_statement_line_start":113,"start_statement_line_end":114,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":143,"end_statement_line_end":143,"end_statement_line_in_start":31,"end_statement_line_in_end":31,"char_start":2872,"start_statement_char_start":2872,"start_statement_char_end":2910,"start_statement_char_in_start":0,"start_statement_char_in_end":38,"char_end":4292,"end_statement_char_start":4291,"end_statement_char_end":4292,"end_statement_char_in_start":1419,"end_statement_char_in_end":1420},{"body_character":"/***\n     * Adds a choice to the current ones.\n     *\n     * This method should only be used internally.\n     *\n     * @param \\DOMElement $node\n     *\n     * @throws \\LogicException When choice provided is not multiple nor radio\n     *","children":[],"id":"48","children_ids":[],"type":"comment","name":null,"body":"/**\n     * Adds a choice to the current ones.\n     *\n     * This method should only be used internally.\n     *\n     * @param \\DOMElement $node\n     *\n     * @throws \\LogicException When choice provided is not multiple nor radio\n     */","line_start":144,"line_end":152,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":144,"start_statement_line_end":144,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":152,"end_statement_line_end":152,"end_statement_line_in_start":9,"end_statement_line_in_end":9,"char_start":4297,"start_statement_char_start":4297,"start_statement_char_end":4299,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":4532,"end_statement_char_start":4530,"end_statement_char_end":4532,"end_statement_char_in_start":233,"end_statement_char_in_end":235},{"body_character":"{\n        if (!$this->multiple && 'radio !== $this->type) {\n            throw new \\LogicException(sprintf('Unable to add a choice for \"%s\" as it is not multiple or is not a radio button., $this->name));\n        }\n        $option = $this->buildOptionValue($node);\n        $this->options[] = $option;\n        if ($node->hasAttribute('checked)) {\n            $this->value = $option['value];\n        }\n    }","children":[{"body_character":"{\n            throw new \\LogicException(sprintf('Unable to add a choice for \"%s\" as it is not multiple or is not a radio button., $this->name));\n        }","children":[],"id":"50","children_ids":[],"type":"statement","name":null,"body":"{\n            throw new \\LogicException(sprintf('Unable to add a choice for \"%s\" as it is not multiple or is not a radio button.', $this->name));\n        }","line_start":155,"line_end":157,"line_preserve_start_whitespaces":"              ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":155,"start_statement_line_end":155,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":157,"end_statement_line_end":157,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":4645,"start_statement_char_start":4645,"start_statement_char_end":4646,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4800,"end_statement_char_start":4799,"end_statement_char_end":4800,"end_statement_char_in_start":154,"end_statement_char_in_end":155},{"body_character":"{\n            $this->value = $option['value];\n        }","children":[],"id":"51","children_ids":[],"type":"statement","name":null,"body":"{\n            $this->value = $option['value'];\n        }","line_start":160,"line_end":162,"line_preserve_start_whitespaces":"          ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":160,"start_statement_line_end":160,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":162,"end_statement_line_end":162,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":4931,"start_statement_char_start":4931,"start_statement_char_end":4932,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4987,"end_statement_char_start":4986,"end_statement_char_end":4987,"end_statement_char_in_start":55,"end_statement_char_in_end":56}],"id":"49","children_ids":["50","51"],"type":"statement","name":null,"body":"{\n        if (!$this->multiple && 'radio' !== $this->type) {\n            throw new \\LogicException(sprintf('Unable to add a choice for \"%s\" as it is not multiple or is not a radio button.', $this->name));\n        }\n        $option = $this->buildOptionValue($node);\n        $this->options[] = $option;\n        if ($node->hasAttribute('checked')) {\n            $this->value = $option['value'];\n        }\n    }","line_start":154,"line_end":163,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":154,"start_statement_line_end":154,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":163,"end_statement_line_end":163,"end_statement_line_in_start":10,"end_statement_line_in_end":10,"char_start":4586,"start_statement_char_start":4586,"start_statement_char_end":4587,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4993,"end_statement_char_start":4992,"end_statement_char_end":4993,"end_statement_char_in_start":406,"end_statement_char_in_end":407},{"body_character":"/***\n     * Returns the type of the choice field (radio, select, or checkbox).\n     *\n     * @return string The type\n     *","children":[],"id":"52","children_ids":[],"type":"comment","name":null,"body":"/**\n     * Returns the type of the choice field (radio, select, or checkbox).\n     *\n     * @return string The type\n     */","line_start":164,"line_end":168,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":164,"start_statement_line_end":164,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":168,"end_statement_line_end":168,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":4998,"start_statement_char_start":4998,"start_statement_char_end":5000,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":5121,"end_statement_char_start":5119,"end_statement_char_end":5121,"end_statement_char_in_start":121,"end_statement_char_in_end":123},{"body_character":"public function getType()\n    {ublic function getType()\n    {\n        return $this->type;\n    }","children":[],"id":"53","children_ids":[],"type":"method","name":"getType()","body":"public function getType()\n    {\n        return $this->type;\n    }","line_start":169,"line_end":172,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"public function getType()\n    {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\([()a-zA-Z,_'\"\\$=0-9\\[\\]\\s><]*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public function getType()\n    {","start_statement_line_start":169,"start_statement_line_end":170,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":172,"end_statement_line_end":172,"end_statement_line_in_start":4,"end_statement_line_in_end":4,"char_start":5126,"start_statement_char_start":5126,"start_statement_char_end":5157,"start_statement_char_in_start":0,"start_statement_char_in_end":31,"char_end":5191,"end_statement_char_start":5190,"end_statement_char_end":5191,"end_statement_char_in_start":64,"end_statement_char_in_end":65},{"body_character":"/***\n     * Returns true if the field accepts multiple values.\n     *\n     * @return bool true if the field accepts multiple values, false otherwise\n     *","children":[],"id":"54","children_ids":[],"type":"comment","name":null,"body":"/**\n     * Returns true if the field accepts multiple values.\n     *\n     * @return bool true if the field accepts multiple values, false otherwise\n     */","line_start":173,"line_end":177,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":173,"start_statement_line_end":173,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":177,"end_statement_line_end":177,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":5196,"start_statement_char_start":5196,"start_statement_char_end":5198,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":5351,"end_statement_char_start":5349,"end_statement_char_end":5351,"end_statement_char_in_start":153,"end_statement_char_in_end":155},{"body_character":"public function isMultiple()\n    {ublic function isMultiple()\n    {\n        return $this->multiple;\n    }","children":[],"id":"55","children_ids":[],"type":"method","name":"isMultiple()","body":"public function isMultiple()\n    {\n        return $this->multiple;\n    }","line_start":178,"line_end":181,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"public function isMultiple()\n    {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\([()a-zA-Z,_'\"\\$=0-9\\[\\]\\s><]*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public function isMultiple()\n    {","start_statement_line_start":178,"start_statement_line_end":179,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":181,"end_statement_line_end":181,"end_statement_line_in_start":4,"end_statement_line_in_end":4,"char_start":5356,"start_statement_char_start":5356,"start_statement_char_end":5390,"start_statement_char_in_start":0,"start_statement_char_in_end":34,"char_end":5428,"end_statement_char_start":5427,"end_statement_char_end":5428,"end_statement_char_in_start":71,"end_statement_char_in_end":72},{"body_character":"/***\n     * Initializes the form field.\n     *\n     * @throws \\LogicException When node type is incorrect\n     *","children":[],"id":"56","children_ids":[],"type":"comment","name":null,"body":"/**\n     * Initializes the form field.\n     *\n     * @throws \\LogicException When node type is incorrect\n     */","line_start":182,"line_end":186,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":182,"start_statement_line_end":182,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":186,"end_statement_line_end":186,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":5433,"start_statement_char_start":5433,"start_statement_char_end":5435,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":5545,"end_statement_char_start":5543,"end_statement_char_end":5545,"end_statement_char_in_start":110,"end_statement_char_in_end":112},{"body_character":"protected function initialize()\n    {rotected function initialize()\n    {\n        if ('input !== $this->node->nodeName && 'select !== $this->node->nodeName) {\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input or select tag (%s given)., $this->node->nodeName));\n        }\n        if ('input === $this->node->nodeName && 'checkbox !== strtolower($this->node->getAttribute('type)) && 'radio !== strtolower($this->node->getAttribute('type))) {\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input tag with a type of checkbox or radio (given type is %s)., $this->node->getAttribute('type)));\n        }\n        $this->value = null;\n        $this->options = array();\n        $this->multiple = false;\n        if ('input == $this->node->nodeName) {\n            $this->type = strtolower($this->node->getAttribute('type));\n            $optionValue = $this->buildOptionValue($this->node);\n            $this->options[] = $optionValue;\n            if ($this->node->hasAttribute('checked)) {\n                $this->value = $optionValue['value];\n            }\n        } else {\n            $this->type = 'select;\n            if ($this->node->hasAttribute('multiple)) {\n                $this->multiple = true;\n                $this->value = array();\n                $this->name = str_replace('[], ', $this->name);\n            }\n            $found = false;\n            foreach ($this->xpath->query('descendant::option, $this->node) as $option) {\n                $optionValue = $this->buildOptionValue($option);\n                $this->options[] = $optionValue;\n                if ($option->hasAttribute('selected)) {\n                    $found = true;\n                    if ($this->multiple) {\n                        $this->value[] = $optionValue['value];\n                    } else {\n                        $this->value = $optionValue['value];\n                    }\n                }\n            }\n            // if no option is selected and if it is a simple select box, take the first option as the value\n            if (!$found && !$this->multiple && !empty($this->options)) {\n                $this->value = $this->options[0]['value];\n            }\n        }\n    }","children":[{"body_character":"{\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input or select tag (%s given)., $this->node->nodeName));\n        }","children":[],"id":"58","children_ids":[],"type":"statement","name":null,"body":"{\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input or select tag (%s given).', $this->node->nodeName));\n        }","line_start":189,"line_end":191,"line_preserve_start_whitespaces":"                ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":189,"start_statement_line_end":189,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":191,"end_statement_line_end":191,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":5673,"start_statement_char_start":5673,"start_statement_char_end":5674,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":5836,"end_statement_char_start":5835,"end_statement_char_end":5836,"end_statement_char_in_start":162,"end_statement_char_in_end":163},{"body_character":"{\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input tag with a type of checkbox or radio (given type is %s)., $this->node->getAttribute('type)));\n        }","children":[],"id":"59","children_ids":[],"type":"statement","name":null,"body":"{\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input tag with a type of checkbox or radio (given type is %s).', $this->node->getAttribute('type')));\n        }","line_start":192,"line_end":194,"line_preserve_start_whitespaces":"                    ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":192,"start_statement_line_end":192,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":194,"end_statement_line_end":194,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":6009,"start_statement_char_start":6009,"start_statement_char_end":6010,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":6215,"end_statement_char_start":6214,"end_statement_char_end":6215,"end_statement_char_in_start":205,"end_statement_char_in_end":206},{"body_character":"{\n            $this->type = strtolower($this->node->getAttribute('type));\n            $optionValue = $this->buildOptionValue($this->node);\n            $this->options[] = $optionValue;\n            if ($this->node->hasAttribute('checked)) {\n                $this->value = $optionValue['value];\n            }\n        }","children":[{"body_character":"{\n                $this->value = $optionValue['value];\n            }","children":[],"id":"61","children_ids":[],"type":"statement","name":null,"body":"{\n                $this->value = $optionValue['value'];\n            }","line_start":202,"line_end":204,"line_preserve_start_whitespaces":"              ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":202,"start_statement_line_end":202,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":204,"end_statement_line_end":204,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":6597,"start_statement_char_start":6597,"start_statement_char_end":6598,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":6666,"end_statement_char_start":6665,"end_statement_char_end":6666,"end_statement_char_in_start":68,"end_statement_char_in_end":69}],"id":"60","children_ids":["61"],"type":"statement","name":null,"body":"{\n            $this->type = strtolower($this->node->getAttribute('type'));\n            $optionValue = $this->buildOptionValue($this->node);\n            $this->options[] = $optionValue;\n            if ($this->node->hasAttribute('checked')) {\n                $this->value = $optionValue['value'];\n            }\n        }","line_start":198,"line_end":205,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"  ","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":198,"start_statement_line_end":198,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":205,"end_statement_line_end":205,"end_statement_line_in_start":8,"end_statement_line_in_end":8,"char_start":6358,"start_statement_char_start":6358,"start_statement_char_end":6359,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":6676,"end_statement_char_start":6675,"end_statement_char_end":6676,"end_statement_char_in_start":317,"end_statement_char_in_end":318},{"body_character":"{\n            $this->type = 'select;\n            if ($this->node->hasAttribute('multiple)) {\n                $this->multiple = true;\n                $this->value = array();\n                $this->name = str_replace('[], ', $this->name);\n            }\n            $found = false;\n            foreach ($this->xpath->query('descendant::option, $this->node) as $option) {\n                $optionValue = $this->buildOptionValue($option);\n                $this->options[] = $optionValue;\n                if ($option->hasAttribute('selected)) {\n                    $found = true;\n                    if ($this->multiple) {\n                        $this->value[] = $optionValue['value];\n                    } else {\n                        $this->value = $optionValue['value];\n                    }\n                }\n            }\n            // if no option is selected and if it is a simple select box, take the first option as the value\n            if (!$found && !$this->multiple && !empty($this->options)) {\n                $this->value = $this->options[0]['value];\n            }\n        }","children":[{"body_character":"{\n                $this->multiple = true;\n                $this->value = array();\n                $this->name = str_replace('[], ', $this->name);\n            }","children":[],"id":"63","children_ids":[],"type":"statement","name":null,"body":"{\n                $this->multiple = true;\n                $this->value = array();\n                $this->name = str_replace('[]', '', $this->name);\n            }","line_start":207,"line_end":211,"line_preserve_start_whitespaces":"              ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":207,"start_statement_line_end":207,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":211,"end_statement_line_end":211,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":6775,"start_statement_char_start":6775,"start_statement_char_end":6776,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":6936,"end_statement_char_start":6935,"end_statement_char_end":6936,"end_statement_char_in_start":160,"end_statement_char_in_end":161},{"body_character":"{\n                $optionValue = $this->buildOptionValue($option);\n                $this->options[] = $optionValue;\n                if ($option->hasAttribute('selected)) {\n                    $found = true;\n                    if ($this->multiple) {\n                        $this->value[] = $optionValue['value];\n                    } else {\n                        $this->value = $optionValue['value];\n                    }\n                }\n            }","children":[{"body_character":"{\n                    $found = true;\n                    if ($this->multiple) {\n                        $this->value[] = $optionValue['value];\n                    } else {\n                        $this->value = $optionValue['value];\n                    }\n                }","children":[{"body_character":"{\n                        $this->value[] = $optionValue['value];\n                    }","children":[],"id":"66","children_ids":[],"type":"statement","name":null,"body":"{\n                        $this->value[] = $optionValue['value'];\n                    }","line_start":218,"line_end":220,"line_preserve_start_whitespaces":"                      ","line_preserve_end_whitespaces":"  ","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":218,"start_statement_line_end":218,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":220,"end_statement_line_end":220,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":7302,"start_statement_char_start":7302,"start_statement_char_end":7303,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":7389,"end_statement_char_start":7388,"end_statement_char_end":7389,"end_statement_char_in_start":86,"end_statement_char_in_end":87},{"body_character":"{\n                        $this->value = $optionValue['value];\n                    }","children":[],"id":"67","children_ids":[],"type":"statement","name":null,"body":"{\n                        $this->value = $optionValue['value'];\n                    }","line_start":220,"line_end":222,"line_preserve_start_whitespaces":"  ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":220,"start_statement_line_end":220,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":222,"end_statement_line_end":222,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":7395,"start_statement_char_start":7395,"start_statement_char_end":7396,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":7480,"end_statement_char_start":7479,"end_statement_char_end":7480,"end_statement_char_in_start":84,"end_statement_char_in_end":85}],"id":"65","children_ids":["66","67"],"type":"statement","name":null,"body":"{\n                    $found = true;\n                    if ($this->multiple) {\n                        $this->value[] = $optionValue['value'];\n                    } else {\n                        $this->value = $optionValue['value'];\n                    }\n                }","line_start":216,"line_end":223,"line_preserve_start_whitespaces":"                  ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":216,"start_statement_line_end":216,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":223,"end_statement_line_end":223,"end_statement_line_in_start":8,"end_statement_line_in_end":8,"char_start":7224,"start_statement_char_start":7224,"start_statement_char_end":7225,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":7498,"end_statement_char_start":7497,"end_statement_char_end":7498,"end_statement_char_in_start":273,"end_statement_char_in_end":274}],"id":"64","children_ids":["65"],"type":"statement","name":null,"body":"{\n                $optionValue = $this->buildOptionValue($option);\n                $this->options[] = $optionValue;\n                if ($option->hasAttribute('selected')) {\n                    $found = true;\n                    if ($this->multiple) {\n                        $this->value[] = $optionValue['value'];\n                    } else {\n                        $this->value = $optionValue['value'];\n                    }\n                }\n            }","line_start":213,"line_end":224,"line_preserve_start_whitespaces":"                 ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":213,"start_statement_line_end":213,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":224,"end_statement_line_end":224,"end_statement_line_in_start":12,"end_statement_line_in_end":12,"char_start":7053,"start_statement_char_start":7053,"start_statement_char_end":7054,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":7512,"end_statement_char_start":7511,"end_statement_char_end":7512,"end_statement_char_in_start":458,"end_statement_char_in_end":459},{"body_character":"/// if no option is selected and if it is a simple select box, take the first option as the value\n","children":[],"id":"68","children_ids":[],"type":"comment","name":null,"body":"// if no option is selected and if it is a simple select box, take the first option as the value\n","line_start":225,"line_end":225,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"                  ","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":225,"start_statement_line_end":225,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":224,"end_statement_line_end":225,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":7525,"start_statement_char_start":7525,"start_statement_char_end":7527,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":7622,"end_statement_char_start":7621,"end_statement_char_end":7622,"end_statement_char_in_start":96,"end_statement_char_in_end":97},{"body_character":"{\n                $this->value = $this->options[0]['value];\n            }","children":[],"id":"69","children_ids":[],"type":"statement","name":null,"body":"{\n                $this->value = $this->options[0]['value'];\n            }","line_start":226,"line_end":228,"line_preserve_start_whitespaces":"                  ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":226,"start_statement_line_end":226,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":228,"end_statement_line_end":228,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":7693,"start_statement_char_start":7693,"start_statement_char_end":7694,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":7767,"end_statement_char_start":7766,"end_statement_char_end":7767,"end_statement_char_in_start":73,"end_statement_char_in_end":74}],"id":"62","children_ids":["63","64","68","69"],"type":"statement","name":null,"body":"{\n            $this->type = 'select';\n            if ($this->node->hasAttribute('multiple')) {\n                $this->multiple = true;\n                $this->value = array();\n                $this->name = str_replace('[]', '', $this->name);\n            }\n            $found = false;\n            foreach ($this->xpath->query('descendant::option', $this->node) as $option) {\n                $optionValue = $this->buildOptionValue($option);\n                $this->options[] = $optionValue;\n                if ($option->hasAttribute('selected')) {\n                    $found = true;\n                    if ($this->multiple) {\n                        $this->value[] = $optionValue['value'];\n                    } else {\n                        $this->value = $optionValue['value'];\n                    }\n                }\n            }\n            // if no option is selected and if it is a simple select box, take the first option as the value\n            if (!$found && !$this->multiple && !empty($this->options)) {\n                $this->value = $this->options[0]['value'];\n            }\n        }","line_start":205,"line_end":229,"line_preserve_start_whitespaces":"  ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":205,"start_statement_line_end":205,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":229,"end_statement_line_end":229,"end_statement_line_in_start":25,"end_statement_line_in_end":25,"char_start":6682,"start_statement_char_start":6682,"start_statement_char_end":6683,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":7777,"end_statement_char_start":7776,"end_statement_char_end":7777,"end_statement_char_in_start":1094,"end_statement_char_in_end":1095}],"id":"57","children_ids":["58","59","60","62"],"type":"method","name":"initialize()","body":"protected function initialize()\n    {\n        if ('input' !== $this->node->nodeName && 'select' !== $this->node->nodeName) {\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input or select tag (%s given).', $this->node->nodeName));\n        }\n        if ('input' === $this->node->nodeName && 'checkbox' !== strtolower($this->node->getAttribute('type')) && 'radio' !== strtolower($this->node->getAttribute('type'))) {\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input tag with a type of checkbox or radio (given type is %s).', $this->node->getAttribute('type')));\n        }\n        $this->value = null;\n        $this->options = array();\n        $this->multiple = false;\n        if ('input' == $this->node->nodeName) {\n            $this->type = strtolower($this->node->getAttribute('type'));\n            $optionValue = $this->buildOptionValue($this->node);\n            $this->options[] = $optionValue;\n            if ($this->node->hasAttribute('checked')) {\n                $this->value = $optionValue['value'];\n            }\n        } else {\n            $this->type = 'select';\n            if ($this->node->hasAttribute('multiple')) {\n                $this->multiple = true;\n                $this->value = array();\n                $this->name = str_replace('[]', '', $this->name);\n            }\n            $found = false;\n            foreach ($this->xpath->query('descendant::option', $this->node) as $option) {\n                $optionValue = $this->buildOptionValue($option);\n                $this->options[] = $optionValue;\n                if ($option->hasAttribute('selected')) {\n                    $found = true;\n                    if ($this->multiple) {\n                        $this->value[] = $optionValue['value'];\n                    } else {\n                        $this->value = $optionValue['value'];\n                    }\n                }\n            }\n            // if no option is selected and if it is a simple select box, take the first option as the value\n            if (!$found && !$this->multiple && !empty($this->options)) {\n                $this->value = $this->options[0]['value'];\n            }\n        }\n    }","line_start":187,"line_end":230,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"protected function initialize()\n    {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\([()a-zA-Z,_'\"\\$=0-9\\[\\]\\s><]*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"protected function initialize()\n    {","start_statement_line_start":187,"start_statement_line_end":188,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":230,"end_statement_line_end":230,"end_statement_line_in_start":44,"end_statement_line_in_end":44,"char_start":5550,"start_statement_char_start":5550,"start_statement_char_end":5587,"start_statement_char_in_start":0,"start_statement_char_in_end":37,"char_end":7783,"end_statement_char_start":7782,"end_statement_char_end":7783,"end_statement_char_in_start":2232,"end_statement_char_in_end":2233},{"body_character":"/***\n     * Returns option value with associated disabled flag.\n     *\n     * @param \\DOMElement $node\n     *\n     * @return array\n     *","children":[],"id":"70","children_ids":[],"type":"comment","name":null,"body":"/**\n     * Returns option value with associated disabled flag.\n     *\n     * @param \\DOMElement $node\n     *\n     * @return array\n     */","line_start":231,"line_end":237,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":231,"start_statement_line_end":231,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":237,"end_statement_line_end":237,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":7788,"start_statement_char_start":7788,"start_statement_char_end":7790,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":7925,"end_statement_char_start":7923,"end_statement_char_end":7925,"end_statement_char_in_start":135,"end_statement_char_in_end":137},{"body_character":"{\n        $option = array();\n        $defaultDefaultValue = 'select === $this->node->nodeName ? ' : 'on;\n        $defaultValue = (isset($node->nodeValue) && !empty($node->nodeValue)) ? $node->nodeValue : $defaultDefaultValue;\n        $option['value] = $node->hasAttribute('value) ? $node->getAttribute('value) : $defaultValue;\n        $option['disabled] = $node->hasAttribute('disabled);\n        return $option;\n    }","children":[],"id":"71","children_ids":[],"type":"statement","name":null,"body":"{\n        $option = array();\n        $defaultDefaultValue = 'select' === $this->node->nodeName ? '' : 'on';\n        $defaultValue = (isset($node->nodeValue) && !empty($node->nodeValue)) ? $node->nodeValue : $defaultDefaultValue;\n        $option['value'] = $node->hasAttribute('value') ? $node->getAttribute('value') : $defaultValue;\n        $option['disabled'] = $node->hasAttribute('disabled');\n        return $option;\n    }","line_start":239,"line_end":246,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":239,"start_statement_line_end":239,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":246,"end_statement_line_end":246,"end_statement_line_in_start":8,"end_statement_line_in_end":8,"char_start":7987,"start_statement_char_start":7987,"start_statement_char_end":7988,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":8412,"end_statement_char_start":8411,"end_statement_char_end":8412,"end_statement_char_in_start":424,"end_statement_char_in_end":425},{"body_character":"/***\n     * Checks whether given value is in the existing options.\n     *\n     * @param string $optionValue\n     * @param array  $options\n     *\n     * @return bool\n     *","children":[],"id":"72","children_ids":[],"type":"comment","name":null,"body":"/**\n     * Checks whether given value is in the existing options.\n     *\n     * @param string $optionValue\n     * @param array  $options\n     *\n     * @return bool\n     */","line_start":247,"line_end":254,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":247,"start_statement_line_end":247,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":254,"end_statement_line_end":254,"end_statement_line_in_start":8,"end_statement_line_in_end":8,"char_start":8417,"start_statement_char_start":8417,"start_statement_char_end":8419,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":8588,"end_statement_char_start":8586,"end_statement_char_end":8588,"end_statement_char_in_start":169,"end_statement_char_in_end":171},{"body_character":"public function containsOption($optionValue, $options)\n    {ublic function containsOption($optionValue, $options)\n    {\n        if ($this->validationDisabled) {\n            return true;\n        }\n        foreach ($options as $option) {\n            if ($option['value] == $optionValue) {\n                return true;\n            }\n        }\n        return false;\n    }","children":[{"body_character":"{\n            return true;\n        }","children":[],"id":"74","children_ids":[],"type":"statement","name":null,"body":"{\n            return true;\n        }","line_start":257,"line_end":259,"line_preserve_start_whitespaces":"          ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":257,"start_statement_line_end":257,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":259,"end_statement_line_end":259,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":8693,"start_statement_char_start":8693,"start_statement_char_end":8694,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":8729,"end_statement_char_start":8728,"end_statement_char_end":8729,"end_statement_char_in_start":35,"end_statement_char_in_end":36},{"body_character":"{\n            if ($option['value] == $optionValue) {\n                return true;\n            }\n        }","children":[{"body_character":"{\n                return true;\n            }","children":[],"id":"76","children_ids":[],"type":"statement","name":null,"body":"{\n                return true;\n            }","line_start":261,"line_end":263,"line_preserve_start_whitespaces":"                ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":261,"start_statement_line_end":261,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":263,"end_statement_line_end":263,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":8820,"start_statement_char_start":8820,"start_statement_char_end":8821,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":8864,"end_statement_char_start":8863,"end_statement_char_end":8864,"end_statement_char_in_start":43,"end_statement_char_in_end":44}],"id":"75","children_ids":["76"],"type":"statement","name":null,"body":"{\n            if ($option['value'] == $optionValue) {\n                return true;\n            }\n        }","line_start":260,"line_end":264,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":260,"start_statement_line_end":260,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":264,"end_statement_line_end":264,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":8768,"start_statement_char_start":8768,"start_statement_char_end":8769,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":8874,"end_statement_char_start":8873,"end_statement_char_end":8874,"end_statement_char_in_start":105,"end_statement_char_in_end":106}],"id":"73","children_ids":["74","75"],"type":"method","name":"containsOption($optionValue, $options)","body":"public function containsOption($optionValue, $options)\n    {\n        if ($this->validationDisabled) {\n            return true;\n        }\n        foreach ($options as $option) {\n            if ($option['value'] == $optionValue) {\n                return true;\n            }\n        }\n        return false;\n    }","line_start":255,"line_end":266,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"public function containsOption($optionValue, $options)\n    {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\([()a-zA-Z,_'\"\\$=0-9\\[\\]\\s><]*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public function containsOption($optionValue, $options)\n    {","start_statement_line_start":255,"start_statement_line_end":256,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":266,"end_statement_line_end":266,"end_statement_line_in_start":12,"end_statement_line_in_end":12,"char_start":8593,"start_statement_char_start":8593,"start_statement_char_end":8653,"start_statement_char_in_start":0,"start_statement_char_in_end":60,"char_end":8902,"end_statement_char_start":8901,"end_statement_char_end":8902,"end_statement_char_in_start":308,"end_statement_char_in_end":309},{"body_character":"/***\n     * Returns list of available field options.\n     *\n     * @return array\n     *","children":[],"id":"77","children_ids":[],"type":"comment","name":null,"body":"/**\n     * Returns list of available field options.\n     *\n     * @return array\n     */","line_start":267,"line_end":271,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":267,"start_statement_line_end":267,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":271,"end_statement_line_end":271,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":8907,"start_statement_char_start":8907,"start_statement_char_end":8909,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":8994,"end_statement_char_start":8992,"end_statement_char_end":8994,"end_statement_char_in_start":85,"end_statement_char_in_end":87},{"body_character":"public function availableOptionValues()\n    {ublic function availableOptionValues()\n    {\n        $values = array();\n        foreach ($this->options as $option) {\n            $values[] = $option['value];\n        }\n        return $values;\n    }","children":[{"body_character":"{\n            $values[] = $option['value];\n        }","children":[],"id":"79","children_ids":[],"type":"statement","name":null,"body":"{\n            $values[] = $option['value'];\n        }","line_start":275,"line_end":277,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":275,"start_statement_line_end":275,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":277,"end_statement_line_end":277,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":9116,"start_statement_char_start":9116,"start_statement_char_end":9117,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":9169,"end_statement_char_start":9168,"end_statement_char_end":9169,"end_statement_char_in_start":52,"end_statement_char_in_end":53}],"id":"78","children_ids":["79"],"type":"method","name":"availableOptionValues()","body":"public function availableOptionValues()\n    {\n        $values = array();\n        foreach ($this->options as $option) {\n            $values[] = $option['value'];\n        }\n        return $values;\n    }","line_start":272,"line_end":279,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"public function availableOptionValues()\n    {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\([()a-zA-Z,_'\"\\$=0-9\\[\\]\\s><]*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public function availableOptionValues()\n    {","start_statement_line_start":272,"start_statement_line_end":273,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":279,"end_statement_line_end":279,"end_statement_line_in_start":8,"end_statement_line_in_end":8,"char_start":8999,"start_statement_char_start":8999,"start_statement_char_end":9044,"start_statement_char_in_start":0,"start_statement_char_in_end":45,"char_end":9199,"end_statement_char_start":9198,"end_statement_char_end":9199,"end_statement_char_in_start":199,"end_statement_char_in_end":200},{"body_character":"/***\n     * Disables the internal validation of the field.\n     *\n     * @return self\n     *","children":[],"id":"80","children_ids":[],"type":"comment","name":null,"body":"/**\n     * Disables the internal validation of the field.\n     *\n     * @return self\n     */","line_start":280,"line_end":284,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":280,"start_statement_line_end":280,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":284,"end_statement_line_end":284,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":9204,"start_statement_char_start":9204,"start_statement_char_end":9206,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":9296,"end_statement_char_start":9294,"end_statement_char_end":9296,"end_statement_char_in_start":90,"end_statement_char_in_end":92},{"body_character":"public function disableValidation()\n    {ublic function disableValidation()\n    {\n        $this->validationDisabled = true;\n        return $this;\n    }","children":[],"id":"81","children_ids":[],"type":"method","name":"disableValidation()","body":"public function disableValidation()\n    {\n        $this->validationDisabled = true;\n        return $this;\n    }","line_start":285,"line_end":289,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"public function disableValidation()\n    {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\([()a-zA-Z,_'\"\\$=0-9\\[\\]\\s><]*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public function disableValidation()\n    {","start_statement_line_start":285,"start_statement_line_end":286,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":289,"end_statement_line_end":289,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":9301,"start_statement_char_start":9301,"start_statement_char_end":9342,"start_statement_char_in_start":0,"start_statement_char_in_end":41,"char_end":9412,"end_statement_char_start":9411,"end_statement_char_end":9412,"end_statement_char_in_start":110,"end_statement_char_in_end":111}],"id":"7","children_ids":["8","9","10","11","12","13","14","15","16","17","20","21","25","26","27","28","30","31","33","34","48","49","52","53","54","55","56","57","70","71","72","73","77","78","80","81"],"type":"class","name":"ChoiceFormField","body":"class ChoiceFormField extends FormField\n{\n    /**\n     * @var string\n     */\n    private $type;\n    /**\n     * @var bool\n     */\n    private $multiple;\n    /**\n     * @var array\n     */\n    private $options;\n    /**\n     * @var bool\n     */\n    private $validationDisabled = false;\n    /**\n     * Returns true if the field should be included in the submitted values.\n     *\n     * @return bool true if the field should be included in the submitted values, false otherwise\n     */\n    public function hasValue()\n    {\n        // don't send a value for unchecked checkboxes'\n        if (in_array($this->type, array('checkbox', 'radio')) && null === $this->value) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Check if the current selected option is disabled.\n     *\n     * @return bool\n     */\n    public function isDisabled()\n    {\n        if (parent::isDisabled() && 'select' === $this->type) {\n            return true;\n        }\n        foreach ($this->options as $option) {\n            if ($option['value'] == $this->value && $option['disabled']) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Sets the value of the field.\n     *\n     * @param string $value The value of the field\n     */\n    public function select($value)\n    {\n        $this->setValue($value);\n    }\n    /**\n     * Ticks a checkbox.\n     *\n     * @throws \\LogicException When the type provided is not correct\n     */\n    public function tick()\n    {\n        if ('checkbox' !== $this->type) {\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s).', $this->name, $this->type));\n        }\n        $this->setValue(true);\n    }\n    /**\n     * Ticks a checkbox.\n     *\n     * @throws \\LogicException When the type provided is not correct\n     */\n    public function untick()\n    {\n        if ('checkbox' !== $this->type) {\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s).', $this->name, $this->type));\n        }\n        $this->setValue(false);\n    }\n    /**\n     * Sets the value of the field.\n     *\n     * @param string $value The value of the field\n     *\n     * @throws \\InvalidArgumentException When value type provided is not correct\n     */\n    public function setValue($value)\n    {\n        if ('checkbox' === $this->type && false === $value) {\n            // uncheck\n            $this->value = null;\n        } elseif ('checkbox' === $this->type && true === $value) {\n            // check\n            $this->value = $this->options[0]['value'];\n        } else {\n            if (is_array($value)) {\n                if (!$this->multiple) {\n                    throw new \\InvalidArgumentException(sprintf('The value for \"%s\" cannot be an array.', $this->name));\n                }\n                foreach ($value as $v) {\n                    if (!$this->containsOption($v, $this->options)) {\n                        throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s).', $this->name, $v, implode(', ', $this->availableOptionValues())));\n                    }\n                }\n            } elseif (!$this->containsOption($value, $this->options)) {\n                throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s).', $this->name, $value, implode(', ', $this->availableOptionValues())));\n            }\n            if ($this->multiple) {\n                $value = (array) $value;\n            }\n            if (is_array($value)) {\n                $this->value = $value;\n            } else {\n                parent::setValue($value);\n            }\n        }\n    }\n    /**\n     * Adds a choice to the current ones.\n     *\n     * This method should only be used internally.\n     *\n     * @param \\DOMElement $node\n     *\n     * @throws \\LogicException When choice provided is not multiple nor radio\n     */\n    public function addChoice(\\DOMElement $node)\n    {\n        if (!$this->multiple && 'radio' !== $this->type) {\n            throw new \\LogicException(sprintf('Unable to add a choice for \"%s\" as it is not multiple or is not a radio button.', $this->name));\n        }\n        $option = $this->buildOptionValue($node);\n        $this->options[] = $option;\n        if ($node->hasAttribute('checked')) {\n            $this->value = $option['value'];\n        }\n    }\n    /**\n     * Returns the type of the choice field (radio, select, or checkbox).\n     *\n     * @return string The type\n     */\n    public function getType()\n    {\n        return $this->type;\n    }\n    /**\n     * Returns true if the field accepts multiple values.\n     *\n     * @return bool true if the field accepts multiple values, false otherwise\n     */\n    public function isMultiple()\n    {\n        return $this->multiple;\n    }\n    /**\n     * Initializes the form field.\n     *\n     * @throws \\LogicException When node type is incorrect\n     */\n    protected function initialize()\n    {\n        if ('input' !== $this->node->nodeName && 'select' !== $this->node->nodeName) {\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input or select tag (%s given).', $this->node->nodeName));\n        }\n        if ('input' === $this->node->nodeName && 'checkbox' !== strtolower($this->node->getAttribute('type')) && 'radio' !== strtolower($this->node->getAttribute('type'))) {\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input tag with a type of checkbox or radio (given type is %s).', $this->node->getAttribute('type')));\n        }\n        $this->value = null;\n        $this->options = array();\n        $this->multiple = false;\n        if ('input' == $this->node->nodeName) {\n            $this->type = strtolower($this->node->getAttribute('type'));\n            $optionValue = $this->buildOptionValue($this->node);\n            $this->options[] = $optionValue;\n            if ($this->node->hasAttribute('checked')) {\n                $this->value = $optionValue['value'];\n            }\n        } else {\n            $this->type = 'select';\n            if ($this->node->hasAttribute('multiple')) {\n                $this->multiple = true;\n                $this->value = array();\n                $this->name = str_replace('[]', '', $this->name);\n            }\n            $found = false;\n            foreach ($this->xpath->query('descendant::option', $this->node) as $option) {\n                $optionValue = $this->buildOptionValue($option);\n                $this->options[] = $optionValue;\n                if ($option->hasAttribute('selected')) {\n                    $found = true;\n                    if ($this->multiple) {\n                        $this->value[] = $optionValue['value'];\n                    } else {\n                        $this->value = $optionValue['value'];\n                    }\n                }\n            }\n            // if no option is selected and if it is a simple select box, take the first option as the value\n            if (!$found && !$this->multiple && !empty($this->options)) {\n                $this->value = $this->options[0]['value'];\n            }\n        }\n    }\n    /**\n     * Returns option value with associated disabled flag.\n     *\n     * @param \\DOMElement $node\n     *\n     * @return array\n     */\n    private function buildOptionValue(\\DOMElement $node)\n    {\n        $option = array();\n        $defaultDefaultValue = 'select' === $this->node->nodeName ? '' : 'on';\n        $defaultValue = (isset($node->nodeValue) && !empty($node->nodeValue)) ? $node->nodeValue : $defaultDefaultValue;\n        $option['value'] = $node->hasAttribute('value') ? $node->getAttribute('value') : $defaultValue;\n        $option['disabled'] = $node->hasAttribute('disabled');\n        return $option;\n    }\n    /**\n     * Checks whether given value is in the existing options.\n     *\n     * @param string $optionValue\n     * @param array  $options\n     *\n     * @return bool\n     */\n    public function containsOption($optionValue, $options)\n    {\n        if ($this->validationDisabled) {\n            return true;\n        }\n        foreach ($options as $option) {\n            if ($option['value'] == $optionValue) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Returns list of available field options.\n     *\n     * @return array\n     */\n    public function availableOptionValues()\n    {\n        $values = array();\n        foreach ($this->options as $option) {\n            $values[] = $option['value'];\n        }\n        return $values;\n    }\n    /**\n     * Disables the internal validation of the field.\n     *\n     * @return self\n     */\n    public function disableValidation()\n    {\n        $this->validationDisabled = true;\n        return $this;\n    }\n}","line_start":25,"line_end":290,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":"class ChoiceFormField extends FormField\n{","end_statement":"}","start_statement_regexp":"/class\\s+([A-Za-z0-9_]+)[A-Za-z0-9_\\\\\\s]*{/","start_statement_matched":"class ChoiceFormField extends FormField\n{","start_statement_line_start":25,"start_statement_line_end":26,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":290,"end_statement_line_end":290,"end_statement_line_in_start":266,"end_statement_line_in_end":266,"char_start":577,"start_statement_char_start":577,"start_statement_char_end":618,"start_statement_char_in_start":0,"start_statement_char_in_end":41,"char_end":9414,"end_statement_char_start":9413,"end_statement_char_end":9414,"end_statement_char_in_start":8836,"end_statement_char_in_end":8837}],"id":null,"children_ids":[],"type":"file","name":null,"body":"<?php\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nnamespace Symfony\\Component\\DomCrawler\\Field;\n/**\n * ChoiceFormField represents a choice form field.\n * function asss () {\n    \n\n * It is constructed from a HTML select tag, or a HTML checkbox, or radio inputs.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\n// daky dalso\n// daky dalso2\n// daky dalso3\n// daky dalso6\n// daky dalso4\nclass ChoiceFormField extends FormField\n{\n    /**\n     * @var string\n     */\n    private $type;\n    /**\n     * @var bool\n     */\n    private $multiple;\n    /**\n     * @var array\n     */\n    private $options;\n    /**\n     * @var bool\n     */\n    private $validationDisabled = false;\n    /**\n     * Returns true if the field should be included in the submitted values.\n     *\n     * @return bool true if the field should be included in the submitted values, false otherwise\n     */\n    public function hasValue()\n    {\n        // don't send a value for unchecked checkboxes'\n        if (in_array($this->type, array('checkbox', 'radio')) && null === $this->value) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Check if the current selected option is disabled.\n     *\n     * @return bool\n     */\n    public function isDisabled()\n    {\n        if (parent::isDisabled() && 'select' === $this->type) {\n            return true;\n        }\n        foreach ($this->options as $option) {\n            if ($option['value'] == $this->value && $option['disabled']) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Sets the value of the field.\n     *\n     * @param string $value The value of the field\n     */\n    public function select($value)\n    {\n        $this->setValue($value);\n    }\n    /**\n     * Ticks a checkbox.\n     *\n     * @throws \\LogicException When the type provided is not correct\n     */\n    public function tick()\n    {\n        if ('checkbox' !== $this->type) {\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s).', $this->name, $this->type));\n        }\n        $this->setValue(true);\n    }\n    /**\n     * Ticks a checkbox.\n     *\n     * @throws \\LogicException When the type provided is not correct\n     */\n    public function untick()\n    {\n        if ('checkbox' !== $this->type) {\n            throw new \\LogicException(sprintf('You cannot tick \"%s\" as it is not a checkbox (%s).', $this->name, $this->type));\n        }\n        $this->setValue(false);\n    }\n    /**\n     * Sets the value of the field.\n     *\n     * @param string $value The value of the field\n     *\n     * @throws \\InvalidArgumentException When value type provided is not correct\n     */\n    public function setValue($value)\n    {\n        if ('checkbox' === $this->type && false === $value) {\n            // uncheck\n            $this->value = null;\n        } elseif ('checkbox' === $this->type && true === $value) {\n            // check\n            $this->value = $this->options[0]['value'];\n        } else {\n            if (is_array($value)) {\n                if (!$this->multiple) {\n                    throw new \\InvalidArgumentException(sprintf('The value for \"%s\" cannot be an array.', $this->name));\n                }\n                foreach ($value as $v) {\n                    if (!$this->containsOption($v, $this->options)) {\n                        throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s).', $this->name, $v, implode(', ', $this->availableOptionValues())));\n                    }\n                }\n            } elseif (!$this->containsOption($value, $this->options)) {\n                throw new \\InvalidArgumentException(sprintf('Input \"%s\" cannot take \"%s\" as a value (possible values: %s).', $this->name, $value, implode(', ', $this->availableOptionValues())));\n            }\n            if ($this->multiple) {\n                $value = (array) $value;\n            }\n            if (is_array($value)) {\n                $this->value = $value;\n            } else {\n                parent::setValue($value);\n            }\n        }\n    }\n    /**\n     * Adds a choice to the current ones.\n     *\n     * This method should only be used internally.\n     *\n     * @param \\DOMElement $node\n     *\n     * @throws \\LogicException When choice provided is not multiple nor radio\n     */\n    public function addChoice(\\DOMElement $node)\n    {\n        if (!$this->multiple && 'radio' !== $this->type) {\n            throw new \\LogicException(sprintf('Unable to add a choice for \"%s\" as it is not multiple or is not a radio button.', $this->name));\n        }\n        $option = $this->buildOptionValue($node);\n        $this->options[] = $option;\n        if ($node->hasAttribute('checked')) {\n            $this->value = $option['value'];\n        }\n    }\n    /**\n     * Returns the type of the choice field (radio, select, or checkbox).\n     *\n     * @return string The type\n     */\n    public function getType()\n    {\n        return $this->type;\n    }\n    /**\n     * Returns true if the field accepts multiple values.\n     *\n     * @return bool true if the field accepts multiple values, false otherwise\n     */\n    public function isMultiple()\n    {\n        return $this->multiple;\n    }\n    /**\n     * Initializes the form field.\n     *\n     * @throws \\LogicException When node type is incorrect\n     */\n    protected function initialize()\n    {\n        if ('input' !== $this->node->nodeName && 'select' !== $this->node->nodeName) {\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input or select tag (%s given).', $this->node->nodeName));\n        }\n        if ('input' === $this->node->nodeName && 'checkbox' !== strtolower($this->node->getAttribute('type')) && 'radio' !== strtolower($this->node->getAttribute('type'))) {\n            throw new \\LogicException(sprintf('A ChoiceFormField can only be created from an input tag with a type of checkbox or radio (given type is %s).', $this->node->getAttribute('type')));\n        }\n        $this->value = null;\n        $this->options = array();\n        $this->multiple = false;\n        if ('input' == $this->node->nodeName) {\n            $this->type = strtolower($this->node->getAttribute('type'));\n            $optionValue = $this->buildOptionValue($this->node);\n            $this->options[] = $optionValue;\n            if ($this->node->hasAttribute('checked')) {\n                $this->value = $optionValue['value'];\n            }\n        } else {\n            $this->type = 'select';\n            if ($this->node->hasAttribute('multiple')) {\n                $this->multiple = true;\n                $this->value = array();\n                $this->name = str_replace('[]', '', $this->name);\n            }\n            $found = false;\n            foreach ($this->xpath->query('descendant::option', $this->node) as $option) {\n                $optionValue = $this->buildOptionValue($option);\n                $this->options[] = $optionValue;\n                if ($option->hasAttribute('selected')) {\n                    $found = true;\n                    if ($this->multiple) {\n                        $this->value[] = $optionValue['value'];\n                    } else {\n                        $this->value = $optionValue['value'];\n                    }\n                }\n            }\n            // if no option is selected and if it is a simple select box, take the first option as the value\n            if (!$found && !$this->multiple && !empty($this->options)) {\n                $this->value = $this->options[0]['value'];\n            }\n        }\n    }\n    /**\n     * Returns option value with associated disabled flag.\n     *\n     * @param \\DOMElement $node\n     *\n     * @return array\n     */\n    private function buildOptionValue(\\DOMElement $node)\n    {\n        $option = array();\n        $defaultDefaultValue = 'select' === $this->node->nodeName ? '' : 'on';\n        $defaultValue = (isset($node->nodeValue) && !empty($node->nodeValue)) ? $node->nodeValue : $defaultDefaultValue;\n        $option['value'] = $node->hasAttribute('value') ? $node->getAttribute('value') : $defaultValue;\n        $option['disabled'] = $node->hasAttribute('disabled');\n        return $option;\n    }\n    /**\n     * Checks whether given value is in the existing options.\n     *\n     * @param string $optionValue\n     * @param array  $options\n     *\n     * @return bool\n     */\n    public function containsOption($optionValue, $options)\n    {\n        if ($this->validationDisabled) {\n            return true;\n        }\n        foreach ($options as $option) {\n            if ($option['value'] == $optionValue) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Returns list of available field options.\n     *\n     * @return array\n     */\n    public function availableOptionValues()\n    {\n        $values = array();\n        foreach ($this->options as $option) {\n            $values[] = $option['value'];\n        }\n        return $values;\n    }\n    /**\n     * Disables the internal validation of the field.\n     *\n     * @return self\n     */\n    public function disableValidation()\n    {\n        $this->validationDisabled = true;\n        return $this;\n    }\n}","line_start":1,"line_end":290,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":null,"end_statement":null,"start_statement_regexp":null,"start_statement_matched":null,"start_statement_line_start":null,"start_statement_line_end":null,"start_statement_line_in_start":null,"start_statement_line_in_end":null,"end_statement_regexp":null,"end_statement_matched":null,"end_statement_line_start":null,"end_statement_line_end":null,"end_statement_line_in_start":null,"end_statement_line_in_end":null}