{"body_character":"\nvar Logger      = require('../logger'),\n    Merger      = require('../merger'),\n    MergeHelper      = require('../merger/helper'),\n    logger      = new Logger(['console']),\n    parser      = require('../parser'),\n    utils       = require('../helpers/utils'),\n    fs = require(\"fs\"),\n    fstools     = require('../helpers/fstools'),\n    Promise     = require('promise'),\n    argv        = require('minimist')(process.argv.slice(2)),\n    path = require('path');\n\nmodule.exports = function (db) {\n\n    var a = 3;\n\n    this.dmpTree = function (tree, indent) {\n        if (!indent) indent = \"\";\n        console.log(indent+tree.name+\": \"+tree.type+\" - \"+tree.line_start+\":\"+tree.line_end+\"    MATCH:\"+tree.start_statement_matched);\n        if (tree.childs.length > 0) {\n            for (var i in tree.childs) {\n                this.dmpTree(tree.childs[i], indent+\"  \");\n            }\n        }\n    };\n\n    this.init = function (project, done) {\n\n\n        var blockParser = parser.block('js');\n        var changeBlock = blockParser.parse(fs.readFileSync(\"/home/dash/IdeaProjects/DizP/v3/test/code/model/test.js\", 'utf8'), 'js');\n        this.dmpTree(changeBlock.tree);\n        return;\n\n        /**\n         * TODO: in init everything has precedence over use case files\n         *\n         * - update database of all use case files first (AND SKIP MERGE)\n         * - Then, go through base-code and MERGE\n         * - Then, go through other files and MERGE\n         * - Then, merge use case files\n         *\n         * And change ignoreInitial to true in chokidar...\n         */\n\n        var _this               = this,\n            watch_path = path.resolve(argv['watch']),\n            base_code_path = path.resolve(argv['base-code']),\n\n\n            test = function () {\n\n                var aasas = 3,\n                    b = 3,\n                    c = [\n                        '1',\n                        2,\n                        3,\n                        function () {\n\n                        }\n                    ];\n                \n\n\n                var    i  =  123,\n                       b  =  23;\n\n            },\n            test_paths          = [],\n            usecase_paths       = [],\n            mergeHelper         = new MergeHelper(db)\n\n        fstools.walk(argv.watch, function (err, paths) {\n            if (err) throw err;\n\n            var syncs = [];\n            var useCaseParser       = new parser.Usecase();\n\n            for (var i in paths) {\n                var p = path.resolve(paths[i]),\n                    parser_usecase      = useCaseParser.parse(p);\n\n                syncs.push(mergeHelper.syncUseCase(project, parser_usecase));\n\n                if (utils.endsWith(p.toLowerCase(), '.feature')) {\n                    test_paths.push(p);\n                }\n                if (parser_usecase) {\n                    usecase_paths.push(p);\n                }\n            }\n\n            Promise.all(syncs).then(function () {\n\n\n                /**\n                 * After sync\n                 */\n                if ('base-code' in argv) {\n\n                    var bases = [];\n\n                    bases.push(new Promise(function(resolve, reject) {\n                        fstools.walk(argv['base-code'], function (err, paths) {\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        });\n\n                    }));\n                }\n\n                Promise.all(bases).then(function () {\n\n\n                    var tests = [];\n\n                    for (var i in test_paths) {\n\n                        var path = paths[i];\n                        tests.push(mergeHelper.mergeFull(project, path, watch_path));\n\n                    }\n\n\n                    Promise.all(tests).then(function () {\n\n                        var usecases = [];\n\n                        for (var i in usecase_paths) {\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }\n\n\n                        Promise.all(usecases).then(function () {\n\n\n                            logger.log('Initialized!');\n                            // finally init is done\n                            done();\n                        });\n\n\n                    });\n\n\n                });\n\n\n            });\n\n            // a \n        });\n\n\n    };\n\n\n};\n","children":[{"body_character":"var ar ","children":[],"id":"0","children_ids":[],"type":"assignment","name":null,"body":"var","line_start":2,"line_end":2,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":" ","start_statement":"var ","end_statement":"","start_statement_regexp":"/var\\s/","start_statement_matched":"var ","start_statement_line_start":2,"start_statement_line_end":2,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":2,"end_statement_line_end":2,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":1,"start_statement_char_start":1,"start_statement_char_end":5,"start_statement_char_in_start":0,"start_statement_char_in_end":4,"char_end":4,"end_statement_char_start":4,"end_statement_char_end":4,"end_statement_char_in_start":3,"end_statement_char_in_end":3},{"body_character":"Logger      = require('../logger'),ogger      = require('../logger),","children":[],"id":"1","children_ids":[],"type":"assignment","name":"Logger","body":"Logger      = require('../logger')","line_start":2,"line_end":2,"line_preserve_start_whitespaces":" ","line_preserve_end_whitespaces":"","start_statement":"Logger      = require('../logger'),","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"Logger      = require('../logger'),","start_statement_line_start":2,"start_statement_line_end":2,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":2,"end_statement_line_end":2,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":5,"start_statement_char_start":5,"start_statement_char_end":40,"start_statement_char_in_start":0,"start_statement_char_in_end":35,"char_end":39,"end_statement_char_start":39,"end_statement_char_end":39,"end_statement_char_in_start":34,"end_statement_char_in_end":34},{"body_character":"Merger      = require('../merger'),erger      = require('../merger),","children":[],"id":"2","children_ids":[],"type":"assignment","name":"Merger","body":"Merger      = require('../merger')","line_start":3,"line_end":3,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"Merger      = require('../merger'),","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"Merger      = require('../merger'),","start_statement_line_start":3,"start_statement_line_end":3,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":3,"end_statement_line_end":3,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":45,"start_statement_char_start":45,"start_statement_char_end":80,"start_statement_char_in_start":0,"start_statement_char_in_end":35,"char_end":79,"end_statement_char_start":79,"end_statement_char_end":79,"end_statement_char_in_start":34,"end_statement_char_in_end":34},{"body_character":"MergeHelper      = require('../merger/helper'),ergeHelper      = require('../merger/helper),","children":[],"id":"3","children_ids":[],"type":"assignment","name":"MergeHelper","body":"MergeHelper      = require('../merger/helper')","line_start":4,"line_end":4,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"MergeHelper      = require('../merger/helper'),","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"MergeHelper      = require('../merger/helper'),","start_statement_line_start":4,"start_statement_line_end":4,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":4,"end_statement_line_end":4,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":85,"start_statement_char_start":85,"start_statement_char_end":132,"start_statement_char_in_start":0,"start_statement_char_in_end":47,"char_end":131,"end_statement_char_start":131,"end_statement_char_end":131,"end_statement_char_in_start":46,"end_statement_char_in_end":46},{"body_character":"logger      = new Logger(['console']),ogger      = new Logger(['console]),","children":[],"id":"4","children_ids":[],"type":"assignment","name":"logger","body":"logger      = new Logger(['console'])","line_start":5,"line_end":5,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"logger      = new Logger(['console']),","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"logger      = new Logger(['console']),","start_statement_line_start":5,"start_statement_line_end":5,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":5,"end_statement_line_end":5,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":137,"start_statement_char_start":137,"start_statement_char_end":175,"start_statement_char_in_start":0,"start_statement_char_in_end":38,"char_end":174,"end_statement_char_start":174,"end_statement_char_end":174,"end_statement_char_in_start":37,"end_statement_char_in_end":37},{"body_character":"parser      = require('../parser'),arser      = require('../parser),","children":[],"id":"5","children_ids":[],"type":"assignment","name":"parser","body":"parser      = require('../parser')","line_start":6,"line_end":6,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"parser      = require('../parser'),","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"parser      = require('../parser'),","start_statement_line_start":6,"start_statement_line_end":6,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":6,"end_statement_line_end":6,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":180,"start_statement_char_start":180,"start_statement_char_end":215,"start_statement_char_in_start":0,"start_statement_char_in_end":35,"char_end":214,"end_statement_char_start":214,"end_statement_char_end":214,"end_statement_char_in_start":34,"end_statement_char_in_end":34},{"body_character":"utils       = require('../helpers/utils'),tils       = require('../helpers/utils),","children":[],"id":"6","children_ids":[],"type":"assignment","name":"utils","body":"utils       = require('../helpers/utils')","line_start":7,"line_end":7,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"utils       = require('../helpers/utils'),","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"utils       = require('../helpers/utils'),","start_statement_line_start":7,"start_statement_line_end":7,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":7,"end_statement_line_end":7,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":220,"start_statement_char_start":220,"start_statement_char_end":262,"start_statement_char_in_start":0,"start_statement_char_in_end":42,"char_end":261,"end_statement_char_start":261,"end_statement_char_end":261,"end_statement_char_in_start":41,"end_statement_char_in_end":41},{"body_character":"fs = require(\"fs\"),s = require(\"fs),","children":[],"id":"7","children_ids":[],"type":"assignment","name":"fs","body":"fs = require(\"fs\")","line_start":8,"line_end":8,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"fs = require(\"fs\"),","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"fs = require(\"fs\"),","start_statement_line_start":8,"start_statement_line_end":8,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":8,"end_statement_line_end":8,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":267,"start_statement_char_start":267,"start_statement_char_end":286,"start_statement_char_in_start":0,"start_statement_char_in_end":19,"char_end":285,"end_statement_char_start":285,"end_statement_char_end":285,"end_statement_char_in_start":18,"end_statement_char_in_end":18},{"body_character":"fstools     = require('../helpers/fstools'),stools     = require('../helpers/fstools),","children":[],"id":"8","children_ids":[],"type":"assignment","name":"fstools","body":"fstools     = require('../helpers/fstools')","line_start":9,"line_end":9,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"fstools     = require('../helpers/fstools'),","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"fstools     = require('../helpers/fstools'),","start_statement_line_start":9,"start_statement_line_end":9,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":9,"end_statement_line_end":9,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":291,"start_statement_char_start":291,"start_statement_char_end":335,"start_statement_char_in_start":0,"start_statement_char_in_end":44,"char_end":334,"end_statement_char_start":334,"end_statement_char_end":334,"end_statement_char_in_start":43,"end_statement_char_in_end":43},{"body_character":"Promise     = require('promise'),romise     = require('promise),","children":[],"id":"9","children_ids":[],"type":"assignment","name":"Promise","body":"Promise     = require('promise')","line_start":10,"line_end":10,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"Promise     = require('promise'),","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"Promise     = require('promise'),","start_statement_line_start":10,"start_statement_line_end":10,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":10,"end_statement_line_end":10,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":340,"start_statement_char_start":340,"start_statement_char_end":373,"start_statement_char_in_start":0,"start_statement_char_in_end":33,"char_end":372,"end_statement_char_start":372,"end_statement_char_end":372,"end_statement_char_in_start":32,"end_statement_char_in_end":32},{"body_character":"argv        = require('minimist')(process.argv.slice(2)),rgv        = require('minimist)(process.argv.slice(2)),","children":[],"id":"10","children_ids":[],"type":"assignment","name":"argv","body":"argv        = require('minimist')(process.argv.slice(2))","line_start":11,"line_end":11,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"argv        = require('minimist')(process.argv.slice(2)),","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"argv        = require('minimist')(process.argv.slice(2)),","start_statement_line_start":11,"start_statement_line_end":11,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":11,"end_statement_line_end":11,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":378,"start_statement_char_start":378,"start_statement_char_end":435,"start_statement_char_in_start":0,"start_statement_char_in_end":57,"char_end":434,"end_statement_char_start":434,"end_statement_char_end":434,"end_statement_char_in_start":56,"end_statement_char_in_end":56},{"body_character":"path = require('path');ath = require('path);","children":[],"id":"11","children_ids":[],"type":"assignment","name":"path","body":"path = require('path')","line_start":12,"line_end":12,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"path = require('path');","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"path = require('path');","start_statement_line_start":12,"start_statement_line_end":12,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":12,"end_statement_line_end":12,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":440,"start_statement_char_start":440,"start_statement_char_end":463,"start_statement_char_in_start":0,"start_statement_char_in_end":23,"char_end":462,"end_statement_char_start":462,"end_statement_char_end":462,"end_statement_char_in_start":22,"end_statement_char_in_end":22},{"body_character":"module.exports = function (db) {odule.exports = function (db) {\n\n    var a = 3;\n\n    this.dmpTree = function (tree, indent) {\n        if (!indent) indent = \";\n        console.log(indent+tree.name+\": +tree.type+\" - +tree.line_start+\":+tree.line_end+\"    MATCH:+tree.start_statement_matched);\n        if (tree.childs.length > 0) {\n            for (var i in tree.childs) {\n                this.dmpTree(tree.childs[i], indent+\"  );\n            }\n        }\n    };\n\n    this.init = function (project, done) {\n\n\n        var blockParser = parser.block('js);\n        var changeBlock = blockParser.parse(fs.readFileSync(\"/home/dash/IdeaProjects/DizP/v3/test/code/model/test.js, 'utf8), 'js);\n        this.dmpTree(changeBlock.tree);\n        return;\n\n        /**\n         * TODO: in init everything has precedence over use case files\n         *\n         * - update database of all use case files first (AND SKIP MERGE)\n         * - Then, go through base-code and MERGE\n         * - Then, go through other files and MERGE\n         * - Then, merge use case files\n         *\n         * And change ignoreInitial to true in chokidar...\n         */\n\n        var _this               = this,\n            watch_path = path.resolve(argv['watch]),\n            base_code_path = path.resolve(argv['base-code]),\n\n\n            test = function () {\n\n                var aasas = 3,\n                    b = 3,\n                    c = [\n                        '1,\n                        2,\n                        3,\n                        function () {\n\n                        }\n                    ];\n                \n\n\n                var    i  =  123,\n                       b  =  23;\n\n            },\n            test_paths          = [],\n            usecase_paths       = [],\n            mergeHelper         = new MergeHelper(db)\n\n        fstools.walk(argv.watch, function (err, paths) {\n            if (err) throw err;\n\n            var syncs = [];\n            var useCaseParser       = new parser.Usecase();\n\n            for (var i in paths) {\n                var p = path.resolve(paths[i]),\n                    parser_usecase      = useCaseParser.parse(p);\n\n                syncs.push(mergeHelper.syncUseCase(project, parser_usecase));\n\n                if (utils.endsWith(p.toLowerCase(), '.feature)) {\n                    test_paths.push(p);\n                }\n                if (parser_usecase) {\n                    usecase_paths.push(p);\n                }\n            }\n\n            Promise.all(syncs).then(function () {\n\n\n                /**\n                 * After sync\n                 */\n                if ('base-code in argv) {\n\n                    var bases = [];\n\n                    bases.push(new Promise(function(resolve, reject) {\n                        fstools.walk(argv['base-code], function (err, paths) {\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        });\n\n                    }));\n                }\n\n                Promise.all(bases).then(function () {\n\n\n                    var tests = [];\n\n                    for (var i in test_paths) {\n\n                        var path = paths[i];\n                        tests.push(mergeHelper.mergeFull(project, path, watch_path));\n\n                    }\n\n\n                    Promise.all(tests).then(function () {\n\n                        var usecases = [];\n\n                        for (var i in usecase_paths) {\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }\n\n\n                        Promise.all(usecases).then(function () {\n\n\n                            logger.log('Initialized!);\n                            // finally init is done\n                            done();\n                        });\n\n\n                    });\n\n\n                });\n\n\n            });\n\n            // a \n        });\n\n\n    };\n\n\n}","children":[{"body_character":"var ar ","children":[],"id":"13","children_ids":[],"type":"assignment","name":null,"body":"var","line_start":16,"line_end":16,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":" ","start_statement":"var ","end_statement":"","start_statement_regexp":"/var\\s/","start_statement_matched":"var ","start_statement_line_start":16,"start_statement_line_end":16,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":16,"end_statement_line_end":16,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":503,"start_statement_char_start":503,"start_statement_char_end":507,"start_statement_char_in_start":0,"start_statement_char_in_end":4,"char_end":506,"end_statement_char_start":506,"end_statement_char_end":506,"end_statement_char_in_start":3,"end_statement_char_in_end":3},{"body_character":"a = 3; = 3;","children":[],"id":"14","children_ids":[],"type":"assignment","name":"a","body":"a = 3","line_start":16,"line_end":16,"line_preserve_start_whitespaces":" ","line_preserve_end_whitespaces":"","start_statement":"a = 3;","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"a = 3;","start_statement_line_start":16,"start_statement_line_end":16,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":16,"end_statement_line_end":16,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":507,"start_statement_char_start":507,"start_statement_char_end":513,"start_statement_char_in_start":0,"start_statement_char_in_end":6,"char_end":512,"end_statement_char_start":512,"end_statement_char_end":512,"end_statement_char_in_start":5,"end_statement_char_in_end":5},{"body_character":"this.dmpTree = function (tree, indent) {his.dmpTree = function (tree, indent) {\n        if (!indent) indent = \";\n        console.log(indent+tree.name+\": +tree.type+\" - +tree.line_start+\":+tree.line_end+\"    MATCH:+tree.start_statement_matched);\n        if (tree.childs.length > 0) {\n            for (var i in tree.childs) {\n                this.dmpTree(tree.childs[i], indent+\"  );\n            }\n        }\n    }","children":[{"body_character":"indent = \"\";ndent = \";","children":[],"id":"16","children_ids":[],"type":"assignment","name":"indent","body":"indent = \"\"","line_start":19,"line_end":19,"line_preserve_start_whitespaces":"          ","line_preserve_end_whitespaces":"","start_statement":"indent = \"\";","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"indent = \"\";","start_statement_line_start":19,"start_statement_line_end":19,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":19,"end_statement_line_end":19,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":581,"start_statement_char_start":581,"start_statement_char_end":593,"start_statement_char_in_start":0,"start_statement_char_in_end":12,"char_end":592,"end_statement_char_start":592,"end_statement_char_end":592,"end_statement_char_in_start":11,"end_statement_char_in_end":11},{"body_character":"{\n            for (var i in tree.childs) {\n                this.dmpTree(tree.childs[i], indent+\"  );\n            }\n        }","children":[{"body_character":"{\n                this.dmpTree(tree.childs[i], indent+\"  );\n            }","children":[{"body_character":"[i]","children":[],"id":"19","children_ids":[],"type":"statement","name":null,"body":"[i]","line_start":23,"line_end":23,"line_preserve_start_whitespaces":"                ","line_preserve_end_whitespaces":"   ","start_statement":"[","end_statement":"]","start_statement_regexp":"/\\[/","start_statement_matched":"[","start_statement_line_start":23,"start_statement_line_end":23,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\]/","end_statement_matched":"]","end_statement_line_start":23,"end_statement_line_end":23,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":849,"start_statement_char_start":849,"start_statement_char_end":850,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":852,"end_statement_char_start":851,"end_statement_char_end":852,"end_statement_char_in_start":2,"end_statement_char_in_end":3}],"id":"18","children_ids":["19"],"type":"statement","name":null,"body":"{\n                this.dmpTree(tree.childs[i], indent+\"  \");\n            }","line_start":22,"line_end":24,"line_preserve_start_whitespaces":"                 ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":22,"start_statement_line_end":22,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":24,"end_statement_line_end":24,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":807,"start_statement_char_start":807,"start_statement_char_end":808,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":881,"end_statement_char_start":880,"end_statement_char_end":881,"end_statement_char_in_start":73,"end_statement_char_in_end":74}],"id":"17","children_ids":["18"],"type":"statement","name":null,"body":"{\n            for (var i in tree.childs) {\n                this.dmpTree(tree.childs[i], indent+\"  \");\n            }\n        }","line_start":21,"line_end":25,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":21,"start_statement_line_end":21,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":25,"end_statement_line_end":25,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":766,"start_statement_char_start":766,"start_statement_char_end":767,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":891,"end_statement_char_start":890,"end_statement_char_end":891,"end_statement_char_in_start":124,"end_statement_char_in_end":125}],"id":"15","children_ids":["16","17"],"type":"function","name":"this.dmpTree","body":"this.dmpTree = function (tree, indent) {\n        if (!indent) indent = \"\";\n        console.log(indent+tree.name+\": \"+tree.type+\" - \"+tree.line_start+\":\"+tree.line_end+\"    MATCH:\"+tree.start_statement_matched);\n        if (tree.childs.length > 0) {\n            for (var i in tree.childs) {\n                this.dmpTree(tree.childs[i], indent+\"  \");\n            }\n        }\n    }","line_start":18,"line_end":26,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"this.dmpTree = function (tree, indent) {","end_statement":"}","start_statement_regexp":"/([A-Za-z0-9_\\.]+)\\s*[=:]{1}\\s*function\\s*\\((.|\\n)*?\\)\\s*{/","start_statement_matched":"this.dmpTree = function (tree, indent) {","start_statement_line_start":18,"start_statement_line_end":18,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":26,"end_statement_line_end":26,"end_statement_line_in_start":9,"end_statement_line_in_end":9,"char_start":519,"start_statement_char_start":519,"start_statement_char_end":559,"start_statement_char_in_start":0,"start_statement_char_in_end":40,"char_end":897,"end_statement_char_start":896,"end_statement_char_end":897,"end_statement_char_in_start":377,"end_statement_char_in_end":378},{"body_character":"this.init = function (project, done) {his.init = function (project, done) {\n\n\n        var blockParser = parser.block('js);\n        var changeBlock = blockParser.parse(fs.readFileSync(\"/home/dash/IdeaProjects/DizP/v3/test/code/model/test.js, 'utf8), 'js);\n        this.dmpTree(changeBlock.tree);\n        return;\n\n        /**\n         * TODO: in init everything has precedence over use case files\n         *\n         * - update database of all use case files first (AND SKIP MERGE)\n         * - Then, go through base-code and MERGE\n         * - Then, go through other files and MERGE\n         * - Then, merge use case files\n         *\n         * And change ignoreInitial to true in chokidar...\n         */\n\n        var _this               = this,\n            watch_path = path.resolve(argv['watch]),\n            base_code_path = path.resolve(argv['base-code]),\n\n\n            test = function () {\n\n                var aasas = 3,\n                    b = 3,\n                    c = [\n                        '1,\n                        2,\n                        3,\n                        function () {\n\n                        }\n                    ];\n                \n\n\n                var    i  =  123,\n                       b  =  23;\n\n            },\n            test_paths          = [],\n            usecase_paths       = [],\n            mergeHelper         = new MergeHelper(db)\n\n        fstools.walk(argv.watch, function (err, paths) {\n            if (err) throw err;\n\n            var syncs = [];\n            var useCaseParser       = new parser.Usecase();\n\n            for (var i in paths) {\n                var p = path.resolve(paths[i]),\n                    parser_usecase      = useCaseParser.parse(p);\n\n                syncs.push(mergeHelper.syncUseCase(project, parser_usecase));\n\n                if (utils.endsWith(p.toLowerCase(), '.feature)) {\n                    test_paths.push(p);\n                }\n                if (parser_usecase) {\n                    usecase_paths.push(p);\n                }\n            }\n\n            Promise.all(syncs).then(function () {\n\n\n                /**\n                 * After sync\n                 */\n                if ('base-code in argv) {\n\n                    var bases = [];\n\n                    bases.push(new Promise(function(resolve, reject) {\n                        fstools.walk(argv['base-code], function (err, paths) {\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        });\n\n                    }));\n                }\n\n                Promise.all(bases).then(function () {\n\n\n                    var tests = [];\n\n                    for (var i in test_paths) {\n\n                        var path = paths[i];\n                        tests.push(mergeHelper.mergeFull(project, path, watch_path));\n\n                    }\n\n\n                    Promise.all(tests).then(function () {\n\n                        var usecases = [];\n\n                        for (var i in usecase_paths) {\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }\n\n\n                        Promise.all(usecases).then(function () {\n\n\n                            logger.log('Initialized!);\n                            // finally init is done\n                            done();\n                        });\n\n\n                    });\n\n\n                });\n\n\n            });\n\n            // a \n        });\n\n\n    }","children":[{"body_character":"var ar ","children":[],"id":"21","children_ids":[],"type":"assignment","name":null,"body":"var","line_start":31,"line_end":31,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":" ","start_statement":"var ","end_statement":"","start_statement_regexp":"/var\\s/","start_statement_matched":"var ","start_statement_line_start":31,"start_statement_line_end":31,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":31,"end_statement_line_end":31,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":953,"start_statement_char_start":953,"start_statement_char_end":957,"start_statement_char_in_start":0,"start_statement_char_in_end":4,"char_end":956,"end_statement_char_start":956,"end_statement_char_end":956,"end_statement_char_in_start":3,"end_statement_char_in_end":3},{"body_character":"blockParser = parser.block('js');lockParser = parser.block('js);","children":[],"id":"22","children_ids":[],"type":"assignment","name":"blockParser","body":"blockParser = parser.block('js')","line_start":31,"line_end":31,"line_preserve_start_whitespaces":" ","line_preserve_end_whitespaces":"","start_statement":"blockParser = parser.block('js');","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"blockParser = parser.block('js');","start_statement_line_start":31,"start_statement_line_end":31,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":31,"end_statement_line_end":31,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":957,"start_statement_char_start":957,"start_statement_char_end":990,"start_statement_char_in_start":0,"start_statement_char_in_end":33,"char_end":989,"end_statement_char_start":989,"end_statement_char_end":989,"end_statement_char_in_start":32,"end_statement_char_in_end":32},{"body_character":"var ar ","children":[],"id":"23","children_ids":[],"type":"assignment","name":null,"body":"var","line_start":32,"line_end":32,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":" ","start_statement":"var ","end_statement":"","start_statement_regexp":"/var\\s/","start_statement_matched":"var ","start_statement_line_start":32,"start_statement_line_end":32,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":32,"end_statement_line_end":32,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":999,"start_statement_char_start":999,"start_statement_char_end":1003,"start_statement_char_in_start":0,"start_statement_char_in_end":4,"char_end":1002,"end_statement_char_start":1002,"end_statement_char_end":1002,"end_statement_char_in_start":3,"end_statement_char_in_end":3},{"body_character":"changeBlock = blockParser.parse(fs.readFileSync(\"/home/dash/IdeaProjects/DizP/v3/test/code/model/test.js\",hangeBlock = blockParser.parse(fs.readFileSync(\"/home/dash/IdeaProjects/DizP/v3/test/code/model/test.js,","children":[],"id":"24","children_ids":[],"type":"assignment","name":"changeBlock","body":"changeBlock = blockParser.parse(fs.readFileSync(\"/home/dash/IdeaProjects/DizP/v3/test/code/model/test.js\"","line_start":32,"line_end":32,"line_preserve_start_whitespaces":" ","line_preserve_end_whitespaces":"","start_statement":"changeBlock = blockParser.parse(fs.readFileSync(\"/home/dash/IdeaProjects/DizP/v3/test/code/model/test.js\",","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"changeBlock = blockParser.parse(fs.readFileSync(\"/home/dash/IdeaProjects/DizP/v3/test/code/model/test.js\",","start_statement_line_start":32,"start_statement_line_end":32,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":32,"end_statement_line_end":32,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":1003,"start_statement_char_start":1003,"start_statement_char_end":1109,"start_statement_char_in_start":0,"start_statement_char_in_end":106,"char_end":1108,"end_statement_char_start":1108,"end_statement_char_end":1108,"end_statement_char_in_start":105,"end_statement_char_in_end":105},{"body_character":"/***\n         * TODO: in init everything has precedence over use case files\n         *\n         * - update database of all use case files first (AND SKIP MERGE)\n         * - Then, go through base-code and MERGE\n         * - Then, go through other files and MERGE\n         * - Then, merge use case files\n         *\n         * And change ignoreInitial to true in chokidar...\n         *","children":[],"id":"25","children_ids":[],"type":"comment","name":null,"body":"/**\n         * TODO: in init everything has precedence over use case files\n         *\n         * - update database of all use case files first (AND SKIP MERGE)\n         * - Then, go through base-code and MERGE\n         * - Then, go through other files and MERGE\n         * - Then, merge use case files\n         *\n         * And change ignoreInitial to true in chokidar...\n         */","line_start":36,"line_end":45,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":36,"start_statement_line_end":36,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":45,"end_statement_line_end":45,"end_statement_line_in_start":10,"end_statement_line_in_end":10,"char_start":1191,"start_statement_char_start":1191,"start_statement_char_end":1193,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":1574,"end_statement_char_start":1572,"end_statement_char_end":1574,"end_statement_char_in_start":381,"end_statement_char_in_end":383},{"body_character":"var ar ","children":[],"id":"26","children_ids":[],"type":"assignment","name":null,"body":"var","line_start":47,"line_end":47,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":" ","start_statement":"var ","end_statement":"","start_statement_regexp":"/var\\s/","start_statement_matched":"var ","start_statement_line_start":47,"start_statement_line_end":47,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":47,"end_statement_line_end":47,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":1584,"start_statement_char_start":1584,"start_statement_char_end":1588,"start_statement_char_in_start":0,"start_statement_char_in_end":4,"char_end":1587,"end_statement_char_start":1587,"end_statement_char_end":1587,"end_statement_char_in_start":3,"end_statement_char_in_end":3},{"body_character":"_this               = this,this               = this,","children":[],"id":"27","children_ids":[],"type":"assignment","name":"_this","body":"_this               = this","line_start":47,"line_end":47,"line_preserve_start_whitespaces":" ","line_preserve_end_whitespaces":"","start_statement":"_this               = this,","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"_this               = this,","start_statement_line_start":47,"start_statement_line_end":47,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":47,"end_statement_line_end":47,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":1588,"start_statement_char_start":1588,"start_statement_char_end":1615,"start_statement_char_in_start":0,"start_statement_char_in_end":27,"char_end":1614,"end_statement_char_start":1614,"end_statement_char_end":1614,"end_statement_char_in_start":26,"end_statement_char_in_end":26},{"body_character":"watch_path = path.resolve(argv['watch']),atch_path = path.resolve(argv['watch]),","children":[],"id":"28","children_ids":[],"type":"assignment","name":"watch_path","body":"watch_path = path.resolve(argv['watch'])","line_start":48,"line_end":48,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"watch_path = path.resolve(argv['watch']),","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"watch_path = path.resolve(argv['watch']),","start_statement_line_start":48,"start_statement_line_end":48,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":48,"end_statement_line_end":48,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":1628,"start_statement_char_start":1628,"start_statement_char_end":1669,"start_statement_char_in_start":0,"start_statement_char_in_end":41,"char_end":1668,"end_statement_char_start":1668,"end_statement_char_end":1668,"end_statement_char_in_start":40,"end_statement_char_in_end":40},{"body_character":"base_code_path = path.resolve(argv['base-code']),ase_code_path = path.resolve(argv['base-code]),","children":[],"id":"29","children_ids":[],"type":"assignment","name":"base_code_path","body":"base_code_path = path.resolve(argv['base-code'])","line_start":49,"line_end":49,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"base_code_path = path.resolve(argv['base-code']),","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"base_code_path = path.resolve(argv['base-code']),","start_statement_line_start":49,"start_statement_line_end":49,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":49,"end_statement_line_end":49,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":1682,"start_statement_char_start":1682,"start_statement_char_end":1731,"start_statement_char_in_start":0,"start_statement_char_in_end":49,"char_end":1730,"end_statement_char_start":1730,"end_statement_char_end":1730,"end_statement_char_in_start":48,"end_statement_char_in_end":48},{"body_character":"test = function () {est = function () {\n\n                var aasas = 3,\n                    b = 3,\n                    c = [\n                        '1,\n                        2,\n                        3,\n                        function () {\n\n                        }\n                    ];\n                \n\n\n                var    i  =  123,\n                       b  =  23;\n\n            }","children":[{"body_character":"var ar ","children":[],"id":"31","children_ids":[],"type":"assignment","name":null,"body":"var","line_start":54,"line_end":54,"line_preserve_start_whitespaces":"                ","line_preserve_end_whitespaces":" ","start_statement":"var ","end_statement":"","start_statement_regexp":"/var\\s/","start_statement_matched":"var ","start_statement_line_start":54,"start_statement_line_end":54,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":54,"end_statement_line_end":54,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":1784,"start_statement_char_start":1784,"start_statement_char_end":1788,"start_statement_char_in_start":0,"start_statement_char_in_end":4,"char_end":1787,"end_statement_char_start":1787,"end_statement_char_end":1787,"end_statement_char_in_start":3,"end_statement_char_in_end":3},{"body_character":"aasas = 3,asas = 3,","children":[],"id":"32","children_ids":[],"type":"assignment","name":"aasas","body":"aasas = 3","line_start":54,"line_end":54,"line_preserve_start_whitespaces":" ","line_preserve_end_whitespaces":"","start_statement":"aasas = 3,","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"aasas = 3,","start_statement_line_start":54,"start_statement_line_end":54,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":54,"end_statement_line_end":54,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":1788,"start_statement_char_start":1788,"start_statement_char_end":1798,"start_statement_char_in_start":0,"start_statement_char_in_end":10,"char_end":1797,"end_statement_char_start":1797,"end_statement_char_end":1797,"end_statement_char_in_start":9,"end_statement_char_in_end":9},{"body_character":"b = 3, = 3,","children":[],"id":"33","children_ids":[],"type":"assignment","name":"b","body":"b = 3","line_start":55,"line_end":55,"line_preserve_start_whitespaces":"                    ","line_preserve_end_whitespaces":"","start_statement":"b = 3,","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"b = 3,","start_statement_line_start":55,"start_statement_line_end":55,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":55,"end_statement_line_end":55,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":1819,"start_statement_char_start":1819,"start_statement_char_end":1825,"start_statement_char_in_start":0,"start_statement_char_in_end":6,"char_end":1824,"end_statement_char_start":1824,"end_statement_char_end":1824,"end_statement_char_in_start":5,"end_statement_char_in_end":5},{"body_character":"c = [\n = [\n","children":[],"id":"34","children_ids":[],"type":"assignment","name":"c","body":"c = [","line_start":56,"line_end":56,"line_preserve_start_whitespaces":"                    ","line_preserve_end_whitespaces":"","start_statement":"c = [\n","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"c = [\n","start_statement_line_start":56,"start_statement_line_end":57,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":56,"end_statement_line_end":56,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":1846,"start_statement_char_start":1846,"start_statement_char_end":1852,"start_statement_char_in_start":0,"start_statement_char_in_end":6,"char_end":1851,"end_statement_char_start":1851,"end_statement_char_end":1851,"end_statement_char_in_start":5,"end_statement_char_in_end":5},{"body_character":"{\n\n                        }","children":[],"id":"35","children_ids":[],"type":"statement","name":null,"body":"{\n\n                        }","line_start":60,"line_end":62,"line_preserve_start_whitespaces":"                          ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":60,"start_statement_line_end":60,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":62,"end_statement_line_end":62,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":1971,"start_statement_char_start":1971,"start_statement_char_end":1972,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":1999,"end_statement_char_start":1998,"end_statement_char_end":1999,"end_statement_char_in_start":27,"end_statement_char_in_end":28},{"body_character":"var ar ","children":[],"id":"36","children_ids":[],"type":"assignment","name":null,"body":"var","line_start":67,"line_end":67,"line_preserve_start_whitespaces":"                ","line_preserve_end_whitespaces":" ","start_statement":"var ","end_statement":"","start_statement_regexp":"/var\\s/","start_statement_matched":"var ","start_statement_line_start":67,"start_statement_line_end":67,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":67,"end_statement_line_end":67,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":2058,"start_statement_char_start":2058,"start_statement_char_end":2062,"start_statement_char_in_start":0,"start_statement_char_in_end":4,"char_end":2061,"end_statement_char_start":2061,"end_statement_char_end":2061,"end_statement_char_in_start":3,"end_statement_char_in_end":3},{"body_character":"i  =  123,  =  123,","children":[],"id":"37","children_ids":[],"type":"assignment","name":"i","body":"i  =  123","line_start":67,"line_end":67,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"i  =  123,","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"i  =  123,","start_statement_line_start":67,"start_statement_line_end":67,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":67,"end_statement_line_end":67,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":2065,"start_statement_char_start":2065,"start_statement_char_end":2075,"start_statement_char_in_start":0,"start_statement_char_in_end":10,"char_end":2074,"end_statement_char_start":2074,"end_statement_char_end":2074,"end_statement_char_in_start":9,"end_statement_char_in_end":9},{"body_character":"b  =  23;  =  23;","children":[],"id":"38","children_ids":[],"type":"assignment","name":"b","body":"b  =  23","line_start":68,"line_end":68,"line_preserve_start_whitespaces":"                       ","line_preserve_end_whitespaces":"","start_statement":"b  =  23;","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"b  =  23;","start_statement_line_start":68,"start_statement_line_end":68,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":68,"end_statement_line_end":68,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":2099,"start_statement_char_start":2099,"start_statement_char_end":2108,"start_statement_char_in_start":0,"start_statement_char_in_end":9,"char_end":2107,"end_statement_char_start":2107,"end_statement_char_end":2107,"end_statement_char_in_start":8,"end_statement_char_in_end":8}],"id":"30","children_ids":["31","32","33","34","35","36","37","38"],"type":"function","name":"test","body":"test = function () {\n\n                var aasas = 3,\n                    b = 3,\n                    c = [\n                        '1',\n                        2,\n                        3,\n                        function () {\n\n                        }\n                    ];\n                \n\n\n                var    i  =  123,\n                       b  =  23;\n\n            }","line_start":52,"line_end":70,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"test = function () {","end_statement":"}","start_statement_regexp":"/([A-Za-z0-9_\\.]+)\\s*[=:]{1}\\s*function\\s*\\((.|\\n)*?\\)\\s*{/","start_statement_matched":"test = function () {","start_statement_line_start":52,"start_statement_line_end":52,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":70,"end_statement_line_end":70,"end_statement_line_in_start":19,"end_statement_line_in_end":19,"char_start":1746,"start_statement_char_start":1746,"start_statement_char_end":1766,"start_statement_char_in_start":0,"start_statement_char_in_end":20,"char_end":2123,"end_statement_char_start":2122,"end_statement_char_end":2123,"end_statement_char_in_start":376,"end_statement_char_in_end":377},{"body_character":"test_paths          = [],est_paths          = [],","children":[],"id":"39","children_ids":[],"type":"assignment","name":"test_paths","body":"test_paths          = []","line_start":71,"line_end":71,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"test_paths          = [],","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"test_paths          = [],","start_statement_line_start":71,"start_statement_line_end":71,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":71,"end_statement_line_end":71,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":2137,"start_statement_char_start":2137,"start_statement_char_end":2162,"start_statement_char_in_start":0,"start_statement_char_in_end":25,"char_end":2161,"end_statement_char_start":2161,"end_statement_char_end":2161,"end_statement_char_in_start":24,"end_statement_char_in_end":24},{"body_character":"usecase_paths       = [],secase_paths       = [],","children":[],"id":"40","children_ids":[],"type":"assignment","name":"usecase_paths","body":"usecase_paths       = []","line_start":72,"line_end":72,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"usecase_paths       = [],","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"usecase_paths       = [],","start_statement_line_start":72,"start_statement_line_end":72,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":72,"end_statement_line_end":72,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":2175,"start_statement_char_start":2175,"start_statement_char_end":2200,"start_statement_char_in_start":0,"start_statement_char_in_end":25,"char_end":2199,"end_statement_char_start":2199,"end_statement_char_end":2199,"end_statement_char_in_start":24,"end_statement_char_in_end":24},{"body_character":"mergeHelper         = new MergeHelper(db)\nergeHelper         = new MergeHelper(db)\n","children":[],"id":"41","children_ids":[],"type":"assignment","name":"mergeHelper","body":"mergeHelper         = new MergeHelper(db)","line_start":73,"line_end":73,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"mergeHelper         = new MergeHelper(db)\n","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_]+)\\s*=(.|\\n)*?([,;]|([^,]\\s*?\\n))/","start_statement_matched":"mergeHelper         = new MergeHelper(db)\n","start_statement_line_start":73,"start_statement_line_end":74,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":73,"end_statement_line_end":73,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":2213,"start_statement_char_start":2213,"start_statement_char_end":2255,"start_statement_char_in_start":0,"start_statement_char_in_end":42,"char_end":2254,"end_statement_char_start":2254,"end_statement_char_end":2254,"end_statement_char_in_start":41,"end_statement_char_in_end":41},{"body_character":"{\n            if (err) throw err;\n\n            var syncs = [];\n            var useCaseParser       = new parser.Usecase();\n\n            for (var i in paths) {\n                var p = path.resolve(paths[i]),\n                    parser_usecase      = useCaseParser.parse(p);\n\n                syncs.push(mergeHelper.syncUseCase(project, parser_usecase));\n\n                if (utils.endsWith(p.toLowerCase(), '.feature)) {\n                    test_paths.push(p);\n                }\n                if (parser_usecase) {\n                    usecase_paths.push(p);\n                }\n            }\n\n            Promise.all(syncs).then(function () {\n\n\n                /**\n                 * After sync\n                 */\n                if ('base-code in argv) {\n\n                    var bases = [];\n\n                    bases.push(new Promise(function(resolve, reject) {\n                        fstools.walk(argv['base-code], function (err, paths) {\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        });\n\n                    }));\n                }\n\n                Promise.all(bases).then(function () {\n\n\n                    var tests = [];\n\n                    for (var i in test_paths) {\n\n                        var path = paths[i];\n                        tests.push(mergeHelper.mergeFull(project, path, watch_path));\n\n                    }\n\n\n                    Promise.all(tests).then(function () {\n\n                        var usecases = [];\n\n                        for (var i in usecase_paths) {\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }\n\n\n                        Promise.all(usecases).then(function () {\n\n\n                            logger.log('Initialized!);\n                            // finally init is done\n                            done();\n                        });\n\n\n                    });\n\n\n                });\n\n\n            });\n\n            // a \n        }","children":[{"body_character":"[]","children":[],"id":"43","children_ids":[],"type":"statement","name":null,"body":"[]","line_start":78,"line_end":78,"line_preserve_start_whitespaces":"               ","line_preserve_end_whitespaces":"","start_statement":"[","end_statement":"]","start_statement_regexp":"/\\[/","start_statement_matched":"[","start_statement_line_start":78,"start_statement_line_end":78,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\]/","end_statement_matched":"]","end_statement_line_start":78,"end_statement_line_end":78,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":2370,"start_statement_char_start":2370,"start_statement_char_end":2371,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":2372,"end_statement_char_start":2371,"end_statement_char_end":2372,"end_statement_char_in_start":1,"end_statement_char_in_end":2},{"body_character":"{\n                var p = path.resolve(paths[i]),\n                    parser_usecase      = useCaseParser.parse(p);\n\n                syncs.push(mergeHelper.syncUseCase(project, parser_usecase));\n\n                if (utils.endsWith(p.toLowerCase(), '.feature)) {\n                    test_paths.push(p);\n                }\n                if (parser_usecase) {\n                    usecase_paths.push(p);\n                }\n            }","children":[{"body_character":"[i]","children":[],"id":"45","children_ids":[],"type":"statement","name":null,"body":"[i]","line_start":82,"line_end":82,"line_preserve_start_whitespaces":"                   ","line_preserve_end_whitespaces":"","start_statement":"[","end_statement":"]","start_statement_regexp":"/\\[/","start_statement_matched":"[","start_statement_line_start":82,"start_statement_line_end":82,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\]/","end_statement_matched":"]","end_statement_line_start":82,"end_statement_line_end":82,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":2512,"start_statement_char_start":2512,"start_statement_char_end":2513,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":2515,"end_statement_char_start":2514,"end_statement_char_end":2515,"end_statement_char_in_start":2,"end_statement_char_in_end":3},{"body_character":"{\n                    test_paths.push(p);\n                }","children":[],"id":"46","children_ids":[],"type":"statement","name":null,"body":"{\n                    test_paths.push(p);\n                }","line_start":87,"line_end":89,"line_preserve_start_whitespaces":"                   ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":87,"start_statement_line_end":87,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":89,"end_statement_line_end":89,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":2729,"start_statement_char_start":2729,"start_statement_char_end":2730,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":2788,"end_statement_char_start":2787,"end_statement_char_end":2788,"end_statement_char_in_start":58,"end_statement_char_in_end":59},{"body_character":"{\n                    usecase_paths.push(p);\n                }","children":[],"id":"47","children_ids":[],"type":"statement","name":null,"body":"{\n                    usecase_paths.push(p);\n                }","line_start":90,"line_end":92,"line_preserve_start_whitespaces":"                  ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":90,"start_statement_line_end":90,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":92,"end_statement_line_end":92,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":2825,"start_statement_char_start":2825,"start_statement_char_end":2826,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":2887,"end_statement_char_start":2886,"end_statement_char_end":2887,"end_statement_char_in_start":61,"end_statement_char_in_end":62}],"id":"44","children_ids":["45","46","47"],"type":"statement","name":null,"body":"{\n                var p = path.resolve(paths[i]),\n                    parser_usecase      = useCaseParser.parse(p);\n\n                syncs.push(mergeHelper.syncUseCase(project, parser_usecase));\n\n                if (utils.endsWith(p.toLowerCase(), '.feature')) {\n                    test_paths.push(p);\n                }\n                if (parser_usecase) {\n                    usecase_paths.push(p);\n                }\n            }","line_start":81,"line_end":93,"line_preserve_start_whitespaces":"                 ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":81,"start_statement_line_end":81,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":93,"end_statement_line_end":93,"end_statement_line_in_start":13,"end_statement_line_in_end":13,"char_start":2468,"start_statement_char_start":2468,"start_statement_char_end":2469,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":2901,"end_statement_char_start":2900,"end_statement_char_end":2901,"end_statement_char_in_start":432,"end_statement_char_in_end":433},{"body_character":"{\n\n\n                /**\n                 * After sync\n                 */\n                if ('base-code in argv) {\n\n                    var bases = [];\n\n                    bases.push(new Promise(function(resolve, reject) {\n                        fstools.walk(argv['base-code], function (err, paths) {\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        });\n\n                    }));\n                }\n\n                Promise.all(bases).then(function () {\n\n\n                    var tests = [];\n\n                    for (var i in test_paths) {\n\n                        var path = paths[i];\n                        tests.push(mergeHelper.mergeFull(project, path, watch_path));\n\n                    }\n\n\n                    Promise.all(tests).then(function () {\n\n                        var usecases = [];\n\n                        for (var i in usecase_paths) {\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }\n\n\n                        Promise.all(usecases).then(function () {\n\n\n                            logger.log('Initialized!);\n                            // finally init is done\n                            done();\n                        });\n\n\n                    });\n\n\n                });\n\n\n            }","children":[{"body_character":"/***\n                 * After sync\n                 *","children":[],"id":"49","children_ids":[],"type":"comment","name":null,"body":"/**\n                 * After sync\n                 */","line_start":98,"line_end":100,"line_preserve_start_whitespaces":"                ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":98,"start_statement_line_end":98,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":100,"end_statement_line_end":100,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":2971,"start_statement_char_start":2971,"start_statement_char_end":2973,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":3024,"end_statement_char_start":3022,"end_statement_char_end":3024,"end_statement_char_in_start":51,"end_statement_char_in_end":53},{"body_character":"{\n\n                    var bases = [];\n\n                    bases.push(new Promise(function(resolve, reject) {\n                        fstools.walk(argv['base-code], function (err, paths) {\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        });\n\n                    }));\n                }","children":[{"body_character":"[]","children":[],"id":"51","children_ids":[],"type":"statement","name":null,"body":"[]","line_start":103,"line_end":103,"line_preserve_start_whitespaces":"                       ","line_preserve_end_whitespaces":"","start_statement":"[","end_statement":"]","start_statement_regexp":"/\\[/","start_statement_matched":"[","start_statement_line_start":103,"start_statement_line_end":103,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\]/","end_statement_matched":"]","end_statement_line_start":103,"end_statement_line_end":103,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":3101,"start_statement_char_start":3101,"start_statement_char_end":3102,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":3103,"end_statement_char_start":3102,"end_statement_char_end":3103,"end_statement_char_in_start":1,"end_statement_char_in_end":2},{"body_character":"{\n                        fstools.walk(argv['base-code], function (err, paths) {\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        });\n\n                    }","children":[{"body_character":"['base-code]","children":[],"id":"53","children_ids":[],"type":"statement","name":null,"body":"['base-code']","line_start":106,"line_end":106,"line_preserve_start_whitespaces":"                        ","line_preserve_end_whitespaces":"    ","start_statement":"[","end_statement":"]","start_statement_regexp":"/\\[/","start_statement_matched":"[","start_statement_line_start":106,"start_statement_line_end":106,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\]/","end_statement_matched":"]","end_statement_line_start":106,"end_statement_line_end":106,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":3218,"start_statement_char_start":3218,"start_statement_char_end":3219,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":3231,"end_statement_char_start":3230,"end_statement_char_end":3231,"end_statement_char_in_start":12,"end_statement_char_in_end":13},{"body_character":"{\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        }","children":[{"body_character":"[]","children":[],"id":"55","children_ids":[],"type":"statement","name":null,"body":"[]","line_start":109,"line_end":109,"line_preserve_start_whitespaces":"                               ","line_preserve_end_whitespaces":"","start_statement":"[","end_statement":"]","start_statement_regexp":"/\\[/","start_statement_matched":"[","start_statement_line_start":109,"start_statement_line_end":109,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\]/","end_statement_matched":"]","end_statement_line_start":109,"end_statement_line_end":109,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":3347,"start_statement_char_start":3347,"start_statement_char_end":3348,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":3349,"end_statement_char_start":3348,"end_statement_char_end":3349,"end_statement_char_in_start":1,"end_statement_char_in_end":2},{"body_character":"/***\n                             * add files to queue\n                             *","children":[],"id":"56","children_ids":[],"type":"comment","name":null,"body":"/**\n                             * add files to queue\n                             */","line_start":111,"line_end":113,"line_preserve_start_whitespaces":"                            ","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":111,"start_statement_line_end":111,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":113,"end_statement_line_end":113,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":3380,"start_statement_char_start":3380,"start_statement_char_end":3382,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":3465,"end_statement_char_start":3463,"end_statement_char_end":3465,"end_statement_char_in_start":83,"end_statement_char_in_end":85},{"body_character":"{\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }","children":[{"body_character":"[i]","children":[],"id":"58","children_ids":[],"type":"statement","name":null,"body":"[i]","line_start":115,"line_end":115,"line_preserve_start_whitespaces":"                                   ","line_preserve_end_whitespaces":"","start_statement":"[","end_statement":"]","start_statement_regexp":"/\\[/","start_statement_matched":"[","start_statement_line_start":115,"start_statement_line_end":115,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\]/","end_statement_matched":"]","end_statement_line_start":115,"end_statement_line_end":115,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":3565,"start_statement_char_start":3565,"start_statement_char_end":3566,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":3568,"end_statement_char_start":3567,"end_statement_char_end":3568,"end_statement_char_in_start":2,"end_statement_char_in_end":3}],"id":"57","children_ids":["58"],"type":"statement","name":null,"body":"{\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }","line_start":114,"line_end":117,"line_preserve_start_whitespaces":"                                 ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":114,"start_statement_line_end":114,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":117,"end_statement_line_end":117,"end_statement_line_in_start":4,"end_statement_line_in_end":4,"char_start":3515,"start_statement_char_start":3515,"start_statement_char_end":3516,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":3698,"end_statement_char_start":3697,"end_statement_char_end":3698,"end_statement_char_in_start":182,"end_statement_char_in_end":183},{"body_character":"{\n                                resolve(); // finish base-code walk\n                            }","children":[{"body_character":"/// finish base-code walk\n","children":[],"id":"60","children_ids":[],"type":"comment","name":null,"body":"// finish base-code walk\n","line_start":120,"line_end":120,"line_preserve_start_whitespaces":"                                 ","line_preserve_end_whitespaces":"                            ","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":120,"start_statement_line_end":120,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":119,"end_statement_line_end":120,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":3810,"start_statement_char_start":3810,"start_statement_char_end":3812,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":3835,"end_statement_char_start":3834,"end_statement_char_end":3835,"end_statement_char_in_start":24,"end_statement_char_in_end":25}],"id":"59","children_ids":["60"],"type":"statement","name":null,"body":"{\n                                resolve(); // finish base-code walk\n                            }","line_start":119,"line_end":121,"line_preserve_start_whitespaces":"                              ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":119,"start_statement_line_end":119,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":121,"end_statement_line_end":121,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":3765,"start_statement_char_start":3765,"start_statement_char_end":3766,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":3864,"end_statement_char_start":3863,"end_statement_char_end":3864,"end_statement_char_in_start":98,"end_statement_char_in_end":99}],"id":"54","children_ids":["55","56","57","59"],"type":"statement","name":null,"body":"{\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        }","line_start":106,"line_end":124,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":106,"start_statement_line_end":106,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":124,"end_statement_line_end":124,"end_statement_line_in_start":19,"end_statement_line_in_end":19,"char_start":3255,"start_statement_char_start":3255,"start_statement_char_end":3256,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":3894,"end_statement_char_start":3893,"end_statement_char_end":3894,"end_statement_char_in_start":638,"end_statement_char_in_end":639}],"id":"52","children_ids":["53","54"],"type":"statement","name":null,"body":"{\n                        fstools.walk(argv['base-code'], function (err, paths) {\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        });\n\n                    }","line_start":105,"line_end":126,"line_preserve_start_whitespaces":"                       ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":105,"start_statement_line_end":105,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":126,"end_statement_line_end":126,"end_statement_line_in_start":22,"end_statement_line_in_end":22,"char_start":3175,"start_statement_char_start":3175,"start_statement_char_end":3176,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":3919,"end_statement_char_start":3918,"end_statement_char_end":3919,"end_statement_char_in_start":743,"end_statement_char_in_end":744}],"id":"50","children_ids":["51","52"],"type":"statement","name":null,"body":"{\n\n                    var bases = [];\n\n                    bases.push(new Promise(function(resolve, reject) {\n                        fstools.walk(argv['base-code'], function (err, paths) {\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        });\n\n                    }));\n                }","line_start":101,"line_end":127,"line_preserve_start_whitespaces":"                    ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":101,"start_statement_line_end":101,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":127,"end_statement_line_end":127,"end_statement_line_in_start":27,"end_statement_line_in_end":27,"char_start":3066,"start_statement_char_start":3066,"start_statement_char_end":3067,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":3940,"end_statement_char_start":3939,"end_statement_char_end":3940,"end_statement_char_in_start":873,"end_statement_char_in_end":874},{"body_character":"{\n\n\n                    var tests = [];\n\n                    for (var i in test_paths) {\n\n                        var path = paths[i];\n                        tests.push(mergeHelper.mergeFull(project, path, watch_path));\n\n                    }\n\n\n                    Promise.all(tests).then(function () {\n\n                        var usecases = [];\n\n                        for (var i in usecase_paths) {\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }\n\n\n                        Promise.all(usecases).then(function () {\n\n\n                            logger.log('Initialized!);\n                            // finally init is done\n                            done();\n                        });\n\n\n                    });\n\n\n                }","children":[{"body_character":"[]","children":[],"id":"62","children_ids":[],"type":"statement","name":null,"body":"[]","line_start":132,"line_end":132,"line_preserve_start_whitespaces":"                       ","line_preserve_end_whitespaces":"","start_statement":"[","end_statement":"]","start_statement_regexp":"/\\[/","start_statement_matched":"[","start_statement_line_start":132,"start_statement_line_end":132,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\]/","end_statement_matched":"]","end_statement_line_start":132,"end_statement_line_end":132,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":4030,"start_statement_char_start":4030,"start_statement_char_end":4031,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4032,"end_statement_char_start":4031,"end_statement_char_end":4032,"end_statement_char_in_start":1,"end_statement_char_in_end":2},{"body_character":"{\n\n                        var path = paths[i];\n                        tests.push(mergeHelper.mergeFull(project, path, watch_path));\n\n                    }","children":[{"body_character":"[i]","children":[],"id":"64","children_ids":[],"type":"statement","name":null,"body":"[i]","line_start":136,"line_end":136,"line_preserve_start_whitespaces":"                           ","line_preserve_end_whitespaces":"","start_statement":"[","end_statement":"]","start_statement_regexp":"/\\[/","start_statement_matched":"[","start_statement_line_start":136,"start_statement_line_end":136,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\]/","end_statement_matched":"]","end_statement_line_start":136,"end_statement_line_end":136,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":4124,"start_statement_char_start":4124,"start_statement_char_end":4125,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4127,"end_statement_char_start":4126,"end_statement_char_end":4127,"end_statement_char_in_start":2,"end_statement_char_in_end":3}],"id":"63","children_ids":["64"],"type":"statement","name":null,"body":"{\n\n                        var path = paths[i];\n                        tests.push(mergeHelper.mergeFull(project, path, watch_path));\n\n                    }","line_start":134,"line_end":139,"line_preserve_start_whitespaces":"                         ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":134,"start_statement_line_end":134,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":139,"end_statement_line_end":139,"end_statement_line_in_start":6,"end_statement_line_in_end":6,"char_start":4081,"start_statement_char_start":4081,"start_statement_char_end":4082,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4237,"end_statement_char_start":4236,"end_statement_char_end":4237,"end_statement_char_in_start":155,"end_statement_char_in_end":156},{"body_character":"{\n\n                        var usecases = [];\n\n                        for (var i in usecase_paths) {\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }\n\n\n                        Promise.all(usecases).then(function () {\n\n\n                            logger.log('Initialized!);\n                            // finally init is done\n                            done();\n                        });\n\n\n                    }","children":[{"body_character":"[]","children":[],"id":"66","children_ids":[],"type":"statement","name":null,"body":"[]","line_start":144,"line_end":144,"line_preserve_start_whitespaces":"                           ","line_preserve_end_whitespaces":"","start_statement":"[","end_statement":"]","start_statement_regexp":"/\\[/","start_statement_matched":"[","start_statement_line_start":144,"start_statement_line_end":144,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\]/","end_statement_matched":"]","end_statement_line_start":144,"end_statement_line_end":144,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":4338,"start_statement_char_start":4338,"start_statement_char_end":4339,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4340,"end_statement_char_start":4339,"end_statement_char_end":4340,"end_statement_char_in_start":1,"end_statement_char_in_end":2},{"body_character":"{\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }","children":[{"body_character":"///... from uc to base code merge\n","children":[],"id":"68","children_ids":[],"type":"comment","name":null,"body":"//... from uc to base code merge\n","line_start":148,"line_end":148,"line_preserve_start_whitespaces":"                            ","line_preserve_end_whitespaces":"","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":148,"start_statement_line_end":148,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":147,"end_statement_line_end":148,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":4427,"start_statement_char_start":4427,"start_statement_char_end":4429,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":4460,"end_statement_char_start":4459,"end_statement_char_end":4460,"end_statement_char_in_start":32,"end_statement_char_in_end":33},{"body_character":"[i]","children":[],"id":"69","children_ids":[],"type":"statement","name":null,"body":"[i]","line_start":150,"line_end":150,"line_preserve_start_whitespaces":"                               ","line_preserve_end_whitespaces":"","start_statement":"[","end_statement":"]","start_statement_regexp":"/\\[/","start_statement_matched":"[","start_statement_line_start":150,"start_statement_line_end":150,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\]/","end_statement_matched":"]","end_statement_line_start":150,"end_statement_line_end":150,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":4513,"start_statement_char_start":4513,"start_statement_char_end":4514,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4516,"end_statement_char_start":4515,"end_statement_char_end":4516,"end_statement_char_in_start":2,"end_statement_char_in_end":3}],"id":"67","children_ids":["68","69"],"type":"statement","name":null,"body":"{\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }","line_start":146,"line_end":154,"line_preserve_start_whitespaces":"                             ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":146,"start_statement_line_end":146,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":154,"end_statement_line_end":154,"end_statement_line_in_start":9,"end_statement_line_in_end":9,"char_start":4396,"start_statement_char_start":4396,"start_statement_char_end":4397,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4640,"end_statement_char_start":4639,"end_statement_char_end":4640,"end_statement_char_in_start":243,"end_statement_char_in_end":244},{"body_character":"{\n\n\n                            logger.log('Initialized!);\n                            // finally init is done\n                            done();\n                        }","children":[{"body_character":"/// finally init is done\n","children":[],"id":"71","children_ids":[],"type":"comment","name":null,"body":"// finally init is done\n","line_start":161,"line_end":161,"line_preserve_start_whitespaces":"                            ","line_preserve_end_whitespaces":"                            ","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":161,"start_statement_line_end":161,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":160,"end_statement_line_end":161,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":4794,"start_statement_char_start":4794,"start_statement_char_end":4796,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":4818,"end_statement_char_start":4817,"end_statement_char_end":4818,"end_statement_char_in_start":23,"end_statement_char_in_end":24}],"id":"70","children_ids":["71"],"type":"statement","name":null,"body":"{\n\n\n                            logger.log('Initialized!');\n                            // finally init is done\n                            done();\n                        }","line_start":157,"line_end":163,"line_preserve_start_whitespaces":"                          ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":157,"start_statement_line_end":157,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":163,"end_statement_line_end":163,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":4706,"start_statement_char_start":4706,"start_statement_char_end":4707,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4879,"end_statement_char_start":4878,"end_statement_char_end":4879,"end_statement_char_in_start":172,"end_statement_char_in_end":173}],"id":"65","children_ids":["66","67","70"],"type":"statement","name":null,"body":"{\n\n                        var usecases = [];\n\n                        for (var i in usecase_paths) {\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }\n\n\n                        Promise.all(usecases).then(function () {\n\n\n                            logger.log('Initialized!');\n                            // finally init is done\n                            done();\n                        });\n\n\n                    }","line_start":142,"line_end":166,"line_preserve_start_whitespaces":"                      ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":142,"start_statement_line_end":142,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":166,"end_statement_line_end":166,"end_statement_line_in_start":25,"end_statement_line_in_end":25,"char_start":4296,"start_statement_char_start":4296,"start_statement_char_end":4297,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4905,"end_statement_char_start":4904,"end_statement_char_end":4905,"end_statement_char_in_start":608,"end_statement_char_in_end":609}],"id":"61","children_ids":["62","63","65"],"type":"statement","name":null,"body":"{\n\n\n                    var tests = [];\n\n                    for (var i in test_paths) {\n\n                        var path = paths[i];\n                        tests.push(mergeHelper.mergeFull(project, path, watch_path));\n\n                    }\n\n\n                    Promise.all(tests).then(function () {\n\n                        var usecases = [];\n\n                        for (var i in usecase_paths) {\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }\n\n\n                        Promise.all(usecases).then(function () {\n\n\n                            logger.log('Initialized!');\n                            // finally init is done\n                            done();\n                        });\n\n\n                    });\n\n\n                }","line_start":129,"line_end":169,"line_preserve_start_whitespaces":"                  ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":129,"start_statement_line_end":129,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":169,"end_statement_line_end":169,"end_statement_line_in_start":41,"end_statement_line_in_end":41,"char_start":3994,"start_statement_char_start":3994,"start_statement_char_end":3995,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4927,"end_statement_char_start":4926,"end_statement_char_end":4927,"end_statement_char_in_start":932,"end_statement_char_in_end":933}],"id":"48","children_ids":["49","50","61"],"type":"statement","name":null,"body":"{\n\n\n                /**\n                 * After sync\n                 */\n                if ('base-code' in argv) {\n\n                    var bases = [];\n\n                    bases.push(new Promise(function(resolve, reject) {\n                        fstools.walk(argv['base-code'], function (err, paths) {\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        });\n\n                    }));\n                }\n\n                Promise.all(bases).then(function () {\n\n\n                    var tests = [];\n\n                    for (var i in test_paths) {\n\n                        var path = paths[i];\n                        tests.push(mergeHelper.mergeFull(project, path, watch_path));\n\n                    }\n\n\n                    Promise.all(tests).then(function () {\n\n                        var usecases = [];\n\n                        for (var i in usecase_paths) {\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }\n\n\n                        Promise.all(usecases).then(function () {\n\n\n                            logger.log('Initialized!');\n                            // finally init is done\n                            done();\n                        });\n\n\n                    });\n\n\n                });\n\n\n            }","line_start":95,"line_end":172,"line_preserve_start_whitespaces":"              ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":95,"start_statement_line_end":95,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":172,"end_statement_line_end":172,"end_statement_line_in_start":78,"end_statement_line_in_end":78,"char_start":2951,"start_statement_char_start":2951,"start_statement_char_end":2952,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4945,"end_statement_char_start":4944,"end_statement_char_end":4945,"end_statement_char_in_start":1993,"end_statement_char_in_end":1994},{"body_character":"/// a \n","children":[],"id":"72","children_ids":[],"type":"comment","name":null,"body":"// a \n","line_start":174,"line_end":174,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"        ","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":174,"start_statement_line_end":174,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":173,"end_statement_line_end":174,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":4961,"start_statement_char_start":4961,"start_statement_char_end":4963,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":4967,"end_statement_char_start":4966,"end_statement_char_end":4967,"end_statement_char_in_start":5,"end_statement_char_in_end":6}],"id":"42","children_ids":["43","44","48","72"],"type":"statement","name":null,"body":"{\n            if (err) throw err;\n\n            var syncs = [];\n            var useCaseParser       = new parser.Usecase();\n\n            for (var i in paths) {\n                var p = path.resolve(paths[i]),\n                    parser_usecase      = useCaseParser.parse(p);\n\n                syncs.push(mergeHelper.syncUseCase(project, parser_usecase));\n\n                if (utils.endsWith(p.toLowerCase(), '.feature')) {\n                    test_paths.push(p);\n                }\n                if (parser_usecase) {\n                    usecase_paths.push(p);\n                }\n            }\n\n            Promise.all(syncs).then(function () {\n\n\n                /**\n                 * After sync\n                 */\n                if ('base-code' in argv) {\n\n                    var bases = [];\n\n                    bases.push(new Promise(function(resolve, reject) {\n                        fstools.walk(argv['base-code'], function (err, paths) {\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        });\n\n                    }));\n                }\n\n                Promise.all(bases).then(function () {\n\n\n                    var tests = [];\n\n                    for (var i in test_paths) {\n\n                        var path = paths[i];\n                        tests.push(mergeHelper.mergeFull(project, path, watch_path));\n\n                    }\n\n\n                    Promise.all(tests).then(function () {\n\n                        var usecases = [];\n\n                        for (var i in usecase_paths) {\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }\n\n\n                        Promise.all(usecases).then(function () {\n\n\n                            logger.log('Initialized!');\n                            // finally init is done\n                            done();\n                        });\n\n\n                    });\n\n\n                });\n\n\n            });\n\n            // a \n        }","line_start":75,"line_end":175,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":75,"start_statement_line_end":75,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":175,"end_statement_line_end":175,"end_statement_line_in_start":101,"end_statement_line_in_end":101,"char_start":2311,"start_statement_char_start":2311,"start_statement_char_end":2312,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4976,"end_statement_char_start":4975,"end_statement_char_end":4976,"end_statement_char_in_start":2664,"end_statement_char_in_end":2665}],"id":"20","children_ids":["21","22","23","24","25","26","27","28","29","30","39","40","41","42"],"type":"function","name":"this.init","body":"this.init = function (project, done) {\n\n\n        var blockParser = parser.block('js');\n        var changeBlock = blockParser.parse(fs.readFileSync(\"/home/dash/IdeaProjects/DizP/v3/test/code/model/test.js\", 'utf8'), 'js');\n        this.dmpTree(changeBlock.tree);\n        return;\n\n        /**\n         * TODO: in init everything has precedence over use case files\n         *\n         * - update database of all use case files first (AND SKIP MERGE)\n         * - Then, go through base-code and MERGE\n         * - Then, go through other files and MERGE\n         * - Then, merge use case files\n         *\n         * And change ignoreInitial to true in chokidar...\n         */\n\n        var _this               = this,\n            watch_path = path.resolve(argv['watch']),\n            base_code_path = path.resolve(argv['base-code']),\n\n\n            test = function () {\n\n                var aasas = 3,\n                    b = 3,\n                    c = [\n                        '1',\n                        2,\n                        3,\n                        function () {\n\n                        }\n                    ];\n                \n\n\n                var    i  =  123,\n                       b  =  23;\n\n            },\n            test_paths          = [],\n            usecase_paths       = [],\n            mergeHelper         = new MergeHelper(db)\n\n        fstools.walk(argv.watch, function (err, paths) {\n            if (err) throw err;\n\n            var syncs = [];\n            var useCaseParser       = new parser.Usecase();\n\n            for (var i in paths) {\n                var p = path.resolve(paths[i]),\n                    parser_usecase      = useCaseParser.parse(p);\n\n                syncs.push(mergeHelper.syncUseCase(project, parser_usecase));\n\n                if (utils.endsWith(p.toLowerCase(), '.feature')) {\n                    test_paths.push(p);\n                }\n                if (parser_usecase) {\n                    usecase_paths.push(p);\n                }\n            }\n\n            Promise.all(syncs).then(function () {\n\n\n                /**\n                 * After sync\n                 */\n                if ('base-code' in argv) {\n\n                    var bases = [];\n\n                    bases.push(new Promise(function(resolve, reject) {\n                        fstools.walk(argv['base-code'], function (err, paths) {\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        });\n\n                    }));\n                }\n\n                Promise.all(bases).then(function () {\n\n\n                    var tests = [];\n\n                    for (var i in test_paths) {\n\n                        var path = paths[i];\n                        tests.push(mergeHelper.mergeFull(project, path, watch_path));\n\n                    }\n\n\n                    Promise.all(tests).then(function () {\n\n                        var usecases = [];\n\n                        for (var i in usecase_paths) {\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }\n\n\n                        Promise.all(usecases).then(function () {\n\n\n                            logger.log('Initialized!');\n                            // finally init is done\n                            done();\n                        });\n\n\n                    });\n\n\n                });\n\n\n            });\n\n            // a \n        });\n\n\n    }","line_start":28,"line_end":178,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"this.init = function (project, done) {","end_statement":"}","start_statement_regexp":"/([A-Za-z0-9_\\.]+)\\s*[=:]{1}\\s*function\\s*\\((.|\\n)*?\\)\\s*{/","start_statement_matched":"this.init = function (project, done) {","start_statement_line_start":28,"start_statement_line_end":28,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":178,"end_statement_line_end":178,"end_statement_line_in_start":151,"end_statement_line_in_end":151,"char_start":904,"start_statement_char_start":904,"start_statement_char_end":942,"start_statement_char_in_start":0,"start_statement_char_in_end":38,"char_end":4986,"end_statement_char_start":4985,"end_statement_char_end":4986,"end_statement_char_in_start":4081,"end_statement_char_in_end":4082}],"id":"12","children_ids":["13","14","15","20"],"type":"function","name":"module.exports","body":"module.exports = function (db) {\n\n    var a = 3;\n\n    this.dmpTree = function (tree, indent) {\n        if (!indent) indent = \"\";\n        console.log(indent+tree.name+\": \"+tree.type+\" - \"+tree.line_start+\":\"+tree.line_end+\"    MATCH:\"+tree.start_statement_matched);\n        if (tree.childs.length > 0) {\n            for (var i in tree.childs) {\n                this.dmpTree(tree.childs[i], indent+\"  \");\n            }\n        }\n    };\n\n    this.init = function (project, done) {\n\n\n        var blockParser = parser.block('js');\n        var changeBlock = blockParser.parse(fs.readFileSync(\"/home/dash/IdeaProjects/DizP/v3/test/code/model/test.js\", 'utf8'), 'js');\n        this.dmpTree(changeBlock.tree);\n        return;\n\n        /**\n         * TODO: in init everything has precedence over use case files\n         *\n         * - update database of all use case files first (AND SKIP MERGE)\n         * - Then, go through base-code and MERGE\n         * - Then, go through other files and MERGE\n         * - Then, merge use case files\n         *\n         * And change ignoreInitial to true in chokidar...\n         */\n\n        var _this               = this,\n            watch_path = path.resolve(argv['watch']),\n            base_code_path = path.resolve(argv['base-code']),\n\n\n            test = function () {\n\n                var aasas = 3,\n                    b = 3,\n                    c = [\n                        '1',\n                        2,\n                        3,\n                        function () {\n\n                        }\n                    ];\n                \n\n\n                var    i  =  123,\n                       b  =  23;\n\n            },\n            test_paths          = [],\n            usecase_paths       = [],\n            mergeHelper         = new MergeHelper(db)\n\n        fstools.walk(argv.watch, function (err, paths) {\n            if (err) throw err;\n\n            var syncs = [];\n            var useCaseParser       = new parser.Usecase();\n\n            for (var i in paths) {\n                var p = path.resolve(paths[i]),\n                    parser_usecase      = useCaseParser.parse(p);\n\n                syncs.push(mergeHelper.syncUseCase(project, parser_usecase));\n\n                if (utils.endsWith(p.toLowerCase(), '.feature')) {\n                    test_paths.push(p);\n                }\n                if (parser_usecase) {\n                    usecase_paths.push(p);\n                }\n            }\n\n            Promise.all(syncs).then(function () {\n\n\n                /**\n                 * After sync\n                 */\n                if ('base-code' in argv) {\n\n                    var bases = [];\n\n                    bases.push(new Promise(function(resolve, reject) {\n                        fstools.walk(argv['base-code'], function (err, paths) {\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        });\n\n                    }));\n                }\n\n                Promise.all(bases).then(function () {\n\n\n                    var tests = [];\n\n                    for (var i in test_paths) {\n\n                        var path = paths[i];\n                        tests.push(mergeHelper.mergeFull(project, path, watch_path));\n\n                    }\n\n\n                    Promise.all(tests).then(function () {\n\n                        var usecases = [];\n\n                        for (var i in usecase_paths) {\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }\n\n\n                        Promise.all(usecases).then(function () {\n\n\n                            logger.log('Initialized!');\n                            // finally init is done\n                            done();\n                        });\n\n\n                    });\n\n\n                });\n\n\n            });\n\n            // a \n        });\n\n\n    };\n\n\n}","line_start":14,"line_end":181,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":"module.exports = function (db) {","end_statement":"}","start_statement_regexp":"/([A-Za-z0-9_\\.]+)\\s*[=:]{1}\\s*function\\s*\\((.|\\n)*?\\)\\s*{/","start_statement_matched":"module.exports = function (db) {","start_statement_line_start":14,"start_statement_line_end":14,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":181,"end_statement_line_end":181,"end_statement_line_in_start":168,"end_statement_line_in_end":168,"char_start":465,"start_statement_char_start":465,"start_statement_char_end":497,"start_statement_char_in_start":0,"start_statement_char_in_end":32,"char_end":4991,"end_statement_char_start":4990,"end_statement_char_end":4991,"end_statement_char_in_start":4525,"end_statement_char_in_end":4526}],"id":null,"children_ids":[],"type":"file","name":null,"body":"\nvar Logger      = require('../logger'),\n    Merger      = require('../merger'),\n    MergeHelper      = require('../merger/helper'),\n    logger      = new Logger(['console']),\n    parser      = require('../parser'),\n    utils       = require('../helpers/utils'),\n    fs = require(\"fs\"),\n    fstools     = require('../helpers/fstools'),\n    Promise     = require('promise'),\n    argv        = require('minimist')(process.argv.slice(2)),\n    path = require('path');\n\nmodule.exports = function (db) {\n\n    var a = 3;\n\n    this.dmpTree = function (tree, indent) {\n        if (!indent) indent = \"\";\n        console.log(indent+tree.name+\": \"+tree.type+\" - \"+tree.line_start+\":\"+tree.line_end+\"    MATCH:\"+tree.start_statement_matched);\n        if (tree.childs.length > 0) {\n            for (var i in tree.childs) {\n                this.dmpTree(tree.childs[i], indent+\"  \");\n            }\n        }\n    };\n\n    this.init = function (project, done) {\n\n\n        var blockParser = parser.block('js');\n        var changeBlock = blockParser.parse(fs.readFileSync(\"/home/dash/IdeaProjects/DizP/v3/test/code/model/test.js\", 'utf8'), 'js');\n        this.dmpTree(changeBlock.tree);\n        return;\n\n        /**\n         * TODO: in init everything has precedence over use case files\n         *\n         * - update database of all use case files first (AND SKIP MERGE)\n         * - Then, go through base-code and MERGE\n         * - Then, go through other files and MERGE\n         * - Then, merge use case files\n         *\n         * And change ignoreInitial to true in chokidar...\n         */\n\n        var _this               = this,\n            watch_path = path.resolve(argv['watch']),\n            base_code_path = path.resolve(argv['base-code']),\n\n\n            test = function () {\n\n                var aasas = 3,\n                    b = 3,\n                    c = [\n                        '1',\n                        2,\n                        3,\n                        function () {\n\n                        }\n                    ];\n                \n\n\n                var    i  =  123,\n                       b  =  23;\n\n            },\n            test_paths          = [],\n            usecase_paths       = [],\n            mergeHelper         = new MergeHelper(db)\n\n        fstools.walk(argv.watch, function (err, paths) {\n            if (err) throw err;\n\n            var syncs = [];\n            var useCaseParser       = new parser.Usecase();\n\n            for (var i in paths) {\n                var p = path.resolve(paths[i]),\n                    parser_usecase      = useCaseParser.parse(p);\n\n                syncs.push(mergeHelper.syncUseCase(project, parser_usecase));\n\n                if (utils.endsWith(p.toLowerCase(), '.feature')) {\n                    test_paths.push(p);\n                }\n                if (parser_usecase) {\n                    usecase_paths.push(p);\n                }\n            }\n\n            Promise.all(syncs).then(function () {\n\n\n                /**\n                 * After sync\n                 */\n                if ('base-code' in argv) {\n\n                    var bases = [];\n\n                    bases.push(new Promise(function(resolve, reject) {\n                        fstools.walk(argv['base-code'], function (err, paths) {\n                            if (err) throw err;\n\n                            var merges = [];\n\n                            /**\n                             * add files to queue\n                             */\n                            for (var i in paths) {\n                                var path = paths[i];\n                                merges.push(mergeHelper.mergeFull(project, path, base_code_path));\n                            }\n\n                            Promise.all(merges).then(function () {\n                                resolve(); // finish base-code walk\n                            });\n\n\n                        });\n\n                    }));\n                }\n\n                Promise.all(bases).then(function () {\n\n\n                    var tests = [];\n\n                    for (var i in test_paths) {\n\n                        var path = paths[i];\n                        tests.push(mergeHelper.mergeFull(project, path, watch_path));\n\n                    }\n\n\n                    Promise.all(tests).then(function () {\n\n                        var usecases = [];\n\n                        for (var i in usecase_paths) {\n\n                            //... from uc to base code merge\n\n                            var path = usecase_paths[i];\n                            usecases.push(mergeHelper.mergePartial(project, path, watch_path))\n\n\n                        }\n\n\n                        Promise.all(usecases).then(function () {\n\n\n                            logger.log('Initialized!');\n                            // finally init is done\n                            done();\n                        });\n\n\n                    });\n\n\n                });\n\n\n            });\n\n            // a \n        });\n\n\n    };\n\n\n};\n","line_start":1,"line_end":182,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":null,"end_statement":null,"start_statement_regexp":null,"start_statement_matched":null,"start_statement_line_start":null,"start_statement_line_end":null,"start_statement_line_in_start":null,"start_statement_line_in_end":null,"end_statement_regexp":null,"end_statement_matched":null,"end_statement_line_start":null,"end_statement_line_end":null,"end_statement_line_in_start":null,"end_statement_line_in_end":null}