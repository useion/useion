{"body_character":"class LazyRules:\n    rules_filename = 'plural6-rules.txt'\n\n    def __init__(self):\n        self.pattern_file = open(self.rules_filename, encoding='utf-8')\n        self.cache = []\n\n    def __iter__(self):\n        self.cache_index = 0\n        return self\n\n    def __next__(self):\n        self.cache_index += 1\n        if len(self.cache) >= self.cache_index:\n            return self.cache[self.cache_index - 1]\n\n        if self.pattern_file.closed:\n            raise StopIteration\n\n        line = self.pattern_file.readline()\n        if not line:\n            self.pattern_file.close()\n            raise StopIteration\n\n        pattern, search, replace = line.split(None, 3)\n        funcs = build_match_and_apply_functions(\n            pattern, search, replace)\n        self.cache.append(funcs)\n        return funcs\n\nrules = LazyRules()\n\n\nclass Customer(object):\n    \"\"\"A customer of ABC Bank with a checking account. Customers have the\n    following properties:\n\n    Attributes:\n        name: A string representing the customer's name.\n        balance: A float tracking the current balance of the customer's account.\n    \"\"\"\n\n    def __init__(self, name):\n        \"\"\"Return a Customer object whose name is *name*.\"\"\" \n        self.name = name\n\n    def set_balance(self, balance=0.0):\n        \"\"\"Set the customer's starting balance.\"\"\"\n        self.balance = balance\n\n    def withdraw(self, amount):\n        \"\"\"Return the balance remaining after withdrawing *amount*\n        dollars.\"\"\"\n        if amount > self.balance:\n            raise RuntimeError('Amount greater than available balance.')\n        self.balance -= amount\n        return self.balance\n\n    def deposit(self, amount):\n        \"\"\"Return the balance remaining after depositing *amount*\n        dollars.\"\"\"\n        self.balance += amount\n        return self.balance\n\n\nclass MyClass1(object):\n    def __init__(self):\n        self.raw_data = None\n\n    def _parse_data(self):\n        # This is a fairly complex function xml/json parser\n        raw_data = self.raw_data\n        data = raw_data  #  Much for is done to do something with raw_data\n        cache.set('cache_key', data, 600)  # Cache for 10 minutes\n        return data\n\n    def _populate_data(self):\n        # This function grabs data from an external source\n        self.raw_data = 'some raw data, xml, json or alike..'\n\n    def get_parsed_data(self):\n        cached_data = cache.get('cache_key')\n        if cached_data:\n            return cached_data\n        else:\n            self._populate_data()\n            return self._parse_data()\n\nmc1 = MyClass1()\nprint mc1.get_parsed_data()\n\n\nclass MyClass2(object):\n    def _parse_data(self, raw_data):\n        # This is a fairly complex function xml/json parser\n        data = raw_data  # After some complicated work of parsing raw_data\n        cache.set('cache_key', data, 600)  # Cache for 10 minutes\n        return data\n\n    def _get_data(self):\n        # This function grabs data from an external source\n        return 'some raw data, xml, json or alike..'\n\n    def get_parsed_data(self):\n        cached_data = cache.get('cache_key')\n        if cached_data:\n            return cached_data\n        else:\n            return self._populate_data(self._get_data())\n\nmc2 = MyClass2()\nprint mc1.get_parsed_data()","children":[{"body_character":"class LazyRules:lass LazyRules:\n    rules_filename = 'plural6-rules.txt\n\n    def __init__(self):\n        self.pattern_file = open(self.rules_filename, encoding='utf-8)\n        self.cache = []\n\n    def __iter__(self):\n        self.cache_index = 0\n        return self\n\n    def __next__(self):\n        self.cache_index += 1\n        if len(self.cache) >= self.cache_index:\n            return self.cache[self.cache_index - 1]\n\n        if self.pattern_file.closed:\n            raise StopIteration\n\n        line = self.pattern_file.readline()\n        if not line:\n            self.pattern_file.close()\n            raise StopIteration\n\n        pattern, search, replace = line.split(None, 3)\n        funcs = build_match_and_apply_functions(\n            pattern, search, replace)\n        self.cache.append(funcs)\n        return funcs\n","children":[{"body_character":"def __init__(self):ef __init__(self):\n        self.pattern_file = open(self.rules_filename, encoding='utf-8)\n        self.cache = []\n","children":[],"id":"1","children_ids":[],"type":"method","name":"__init__","body":"def __init__(self):\n        self.pattern_file = open(self.rules_filename, encoding='utf-8')\n        self.cache = []","line_start":4,"line_end":6,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"def __init__(self):","end_statement":"","start_statement_regexp":"/def\\s+([A-Za-z0-9_]+)\\s*\\((.|\\n)*?\\)\\s*:/","start_statement_matched":"def __init__(self):","start_statement_line_start":4,"start_statement_line_end":4,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":6,"end_statement_line_end":6,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":63,"start_statement_char_start":63,"start_statement_char_end":82,"start_statement_char_in_start":0,"start_statement_char_in_end":19,"char_end":178,"end_statement_char_start":178,"end_statement_char_end":178,"end_statement_char_in_start":115,"end_statement_char_in_end":115},{"body_character":"def __iter__(self):ef __iter__(self):\n        self.cache_index = 0\n        return self\n","children":[],"id":"2","children_ids":[],"type":"method","name":"__iter__","body":"def __iter__(self):\n        self.cache_index = 0\n        return self","line_start":8,"line_end":10,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"def __iter__(self):","end_statement":"","start_statement_regexp":"/def\\s+([A-Za-z0-9_]+)\\s*\\((.|\\n)*?\\)\\s*:/","start_statement_matched":"def __iter__(self):","start_statement_line_start":8,"start_statement_line_end":8,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":10,"end_statement_line_end":10,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":184,"start_statement_char_start":184,"start_statement_char_end":203,"start_statement_char_in_start":0,"start_statement_char_in_end":19,"char_end":252,"end_statement_char_start":252,"end_statement_char_end":252,"end_statement_char_in_start":68,"end_statement_char_in_end":68},{"body_character":"def __next__(self):ef __next__(self):\n        self.cache_index += 1\n        if len(self.cache) >= self.cache_index:\n            return self.cache[self.cache_index - 1]\n\n        if self.pattern_file.closed:\n            raise StopIteration\n\n        line = self.pattern_file.readline()\n        if not line:\n            self.pattern_file.close()\n            raise StopIteration\n\n        pattern, search, replace = line.split(None, 3)\n        funcs = build_match_and_apply_functions(\n            pattern, search, replace)\n        self.cache.append(funcs)\n        return funcs\n","children":[],"id":"3","children_ids":[],"type":"method","name":"__next__","body":"def __next__(self):\n        self.cache_index += 1\n        if len(self.cache) >= self.cache_index:\n            return self.cache[self.cache_index - 1]\n\n        if self.pattern_file.closed:\n            raise StopIteration\n\n        line = self.pattern_file.readline()\n        if not line:\n            self.pattern_file.close()\n            raise StopIteration\n\n        pattern, search, replace = line.split(None, 3)\n        funcs = build_match_and_apply_functions(\n            pattern, search, replace)\n        self.cache.append(funcs)\n        return funcs","line_start":12,"line_end":29,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"def __next__(self):","end_statement":"","start_statement_regexp":"/def\\s+([A-Za-z0-9_]+)\\s*\\((.|\\n)*?\\)\\s*:/","start_statement_matched":"def __next__(self):","start_statement_line_start":12,"start_statement_line_end":12,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":29,"end_statement_line_end":29,"end_statement_line_in_start":18,"end_statement_line_in_end":18,"char_start":258,"start_statement_char_start":258,"start_statement_char_end":277,"start_statement_char_in_start":0,"start_statement_char_in_end":19,"char_end":810,"end_statement_char_start":810,"end_statement_char_end":810,"end_statement_char_in_start":552,"end_statement_char_in_end":552}],"id":"0","children_ids":["1","2","3"],"type":"class","name":"LazyRules","body":"class LazyRules:\n    rules_filename = 'plural6-rules.txt'\n\n    def __init__(self):\n        self.pattern_file = open(self.rules_filename, encoding='utf-8')\n        self.cache = []\n\n    def __iter__(self):\n        self.cache_index = 0\n        return self\n\n    def __next__(self):\n        self.cache_index += 1\n        if len(self.cache) >= self.cache_index:\n            return self.cache[self.cache_index - 1]\n\n        if self.pattern_file.closed:\n            raise StopIteration\n\n        line = self.pattern_file.readline()\n        if not line:\n            self.pattern_file.close()\n            raise StopIteration\n\n        pattern, search, replace = line.split(None, 3)\n        funcs = build_match_and_apply_functions(\n            pattern, search, replace)\n        self.cache.append(funcs)\n        return funcs","line_start":1,"line_end":29,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":"class LazyRules:","end_statement":"","start_statement_regexp":"/class\\s+([A-Za-z0-9_]+)\\s?[A-Za-z0-9_\\\\\\s\\(\\),]*:/","start_statement_matched":"class LazyRules:","start_statement_line_start":1,"start_statement_line_end":1,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":29,"end_statement_line_end":29,"end_statement_line_in_start":29,"end_statement_line_in_end":29,"char_start":0,"start_statement_char_start":0,"start_statement_char_end":16,"start_statement_char_in_start":0,"start_statement_char_in_end":16,"char_end":810,"end_statement_char_start":810,"end_statement_char_end":810,"end_statement_char_in_start":810,"end_statement_char_in_end":810},{"body_character":"class Customer(object):lass Customer(object):\n    \"\"\"A customer of ABC Bank with a checking account. Customers have the\n    following properties:\n\n    Attributes:\n        name: A string representing the customer's name.\n        balance: A float tracking the current balance of the customer's account.\n    \"\"\"\n\n    def __init__(self, name):\n        \"\"\"Return a Customer object whose name is *name*.\"\"\" \n        self.name = name\n\n    def set_balance(self, balance=0.0):\n        \"\"\"Set the customer's starting balance.\"\"\"\n        self.balance = balance\n\n    def withdraw(self, amount):\n        \"\"\"Return the balance remaining after withdrawing *amount*\n        dollars.\"\"\"\n        if amount > self.balance:\n            raise RuntimeError('Amount greater than available balance.)\n        self.balance -= amount\n        return self.balance\n\n    def deposit(self, amount):\n        \"\"\"Return the balance remaining after depositing *amount*\n        dollars.\"\"\"\n        self.balance += amount\n        return self.balance\n","children":[{"body_character":"\"\"\"\"\"A customer of ABC Bank with a checking account. Customers have the\n    following properties:\n\n    Attributes:\n        name: A string representing the customer's name.\n        balance: A float tracking the current balance of the customer's account.\n    \"","children":[],"id":"5","children_ids":[],"type":"comment","name":null,"body":"\"\"\"A customer of ABC Bank with a checking account. Customers have the\n    following properties:\n\n    Attributes:\n        name: A string representing the customer's name.\n        balance: A float tracking the current balance of the customer's account.\n    \"\"\"","line_start":35,"line_end":41,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"\"\"\"","end_statement":"\"\"\"","start_statement_regexp":"/\"\"\"/","start_statement_matched":"\"\"\"","start_statement_line_start":35,"start_statement_line_end":35,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\"\"\"/","end_statement_matched":"\"\"\"","end_statement_line_start":41,"end_statement_line_end":41,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":862,"start_statement_char_start":862,"start_statement_char_end":865,"start_statement_char_in_start":0,"start_statement_char_in_end":3,"char_end":1120,"end_statement_char_start":1117,"end_statement_char_end":1120,"end_statement_char_in_start":255,"end_statement_char_in_end":258},{"body_character":"def __init__(self, name):ef __init__(self, name):\n        \"\"\"Return a Customer object whose name is *name*.\"\"\" \n        self.name = name\n","children":[{"body_character":"\"\"\"\"\"Return a Customer object whose name is *name*.\"","children":[],"id":"7","children_ids":[],"type":"comment","name":null,"body":"\"\"\"Return a Customer object whose name is *name*.\"\"\"","line_start":44,"line_end":44,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":" ","start_statement":"\"\"\"","end_statement":"\"\"\"","start_statement_regexp":"/\"\"\"/","start_statement_matched":"\"\"\"","start_statement_line_start":44,"start_statement_line_end":44,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\"\"\"/","end_statement_matched":"\"\"\"","end_statement_line_start":44,"end_statement_line_end":44,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":1160,"start_statement_char_start":1160,"start_statement_char_end":1163,"start_statement_char_in_start":0,"start_statement_char_in_end":3,"char_end":1212,"end_statement_char_start":1209,"end_statement_char_end":1212,"end_statement_char_in_start":49,"end_statement_char_in_end":52}],"id":"6","children_ids":["7"],"type":"method","name":"__init__","body":"def __init__(self, name):\n        \"\"\"Return a Customer object whose name is *name*.\"\"\" \n        self.name = name","line_start":43,"line_end":45,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"def __init__(self, name):","end_statement":"","start_statement_regexp":"/def\\s+([A-Za-z0-9_]+)\\s*\\((.|\\n)*?\\)\\s*:/","start_statement_matched":"def __init__(self, name):","start_statement_line_start":43,"start_statement_line_end":43,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":45,"end_statement_line_end":45,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":1126,"start_statement_char_start":1126,"start_statement_char_end":1151,"start_statement_char_in_start":0,"start_statement_char_in_end":25,"char_end":1238,"end_statement_char_start":1238,"end_statement_char_end":1238,"end_statement_char_in_start":112,"end_statement_char_in_end":112},{"body_character":"def set_balance(self, balance=0.0):ef set_balance(self, balance=0.0):\n        \"\"\"Set the customer's starting balance.\"\"\"\n        self.balance = balance\n","children":[{"body_character":"\"\"\"\"\"Set the customer's starting balance.\"","children":[],"id":"9","children_ids":[],"type":"comment","name":null,"body":"\"\"\"Set the customer's starting balance.\"\"\"","line_start":48,"line_end":48,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"\"\"\"","end_statement":"\"\"\"","start_statement_regexp":"/\"\"\"/","start_statement_matched":"\"\"\"","start_statement_line_start":48,"start_statement_line_end":48,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\"\"\"/","end_statement_matched":"\"\"\"","end_statement_line_start":48,"end_statement_line_end":48,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":1288,"start_statement_char_start":1288,"start_statement_char_end":1291,"start_statement_char_in_start":0,"start_statement_char_in_end":3,"char_end":1330,"end_statement_char_start":1327,"end_statement_char_end":1330,"end_statement_char_in_start":39,"end_statement_char_in_end":42}],"id":"8","children_ids":["9"],"type":"method","name":"set_balance","body":"def set_balance(self, balance=0.0):\n        \"\"\"Set the customer's starting balance.\"\"\"\n        self.balance = balance","line_start":47,"line_end":49,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"def set_balance(self, balance=0.0):","end_statement":"","start_statement_regexp":"/def\\s+([A-Za-z0-9_]+)\\s*\\((.|\\n)*?\\)\\s*:/","start_statement_matched":"def set_balance(self, balance=0.0):","start_statement_line_start":47,"start_statement_line_end":47,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":49,"end_statement_line_end":49,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":1244,"start_statement_char_start":1244,"start_statement_char_end":1279,"start_statement_char_in_start":0,"start_statement_char_in_end":35,"char_end":1361,"end_statement_char_start":1361,"end_statement_char_end":1361,"end_statement_char_in_start":117,"end_statement_char_in_end":117},{"body_character":"def withdraw(self, amount):ef withdraw(self, amount):\n        \"\"\"Return the balance remaining after withdrawing *amount*\n        dollars.\"\"\"\n        if amount > self.balance:\n            raise RuntimeError('Amount greater than available balance.)\n        self.balance -= amount\n        return self.balance\n","children":[{"body_character":"\"\"\"\"\"Return the balance remaining after withdrawing *amount*\n        dollars.\"","children":[],"id":"11","children_ids":[],"type":"comment","name":null,"body":"\"\"\"Return the balance remaining after withdrawing *amount*\n        dollars.\"\"\"","line_start":52,"line_end":53,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"\"\"\"","end_statement":"\"\"\"","start_statement_regexp":"/\"\"\"/","start_statement_matched":"\"\"\"","start_statement_line_start":52,"start_statement_line_end":52,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\"\"\"/","end_statement_matched":"\"\"\"","end_statement_line_start":53,"end_statement_line_end":53,"end_statement_line_in_start":2,"end_statement_line_in_end":2,"char_start":1403,"start_statement_char_start":1403,"start_statement_char_end":1406,"start_statement_char_in_start":0,"start_statement_char_in_end":3,"char_end":1481,"end_statement_char_start":1478,"end_statement_char_end":1481,"end_statement_char_in_start":75,"end_statement_char_in_end":78}],"id":"10","children_ids":["11"],"type":"method","name":"withdraw","body":"def withdraw(self, amount):\n        \"\"\"Return the balance remaining after withdrawing *amount*\n        dollars.\"\"\"\n        if amount > self.balance:\n            raise RuntimeError('Amount greater than available balance.')\n        self.balance -= amount\n        return self.balance","line_start":51,"line_end":57,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"def withdraw(self, amount):","end_statement":"","start_statement_regexp":"/def\\s+([A-Za-z0-9_]+)\\s*\\((.|\\n)*?\\)\\s*:/","start_statement_matched":"def withdraw(self, amount):","start_statement_line_start":51,"start_statement_line_end":51,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":57,"end_statement_line_end":57,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":1367,"start_statement_char_start":1367,"start_statement_char_end":1394,"start_statement_char_in_start":0,"start_statement_char_in_end":27,"char_end":1647,"end_statement_char_start":1647,"end_statement_char_end":1647,"end_statement_char_in_start":280,"end_statement_char_in_end":280},{"body_character":"def deposit(self, amount):ef deposit(self, amount):\n        \"\"\"Return the balance remaining after depositing *amount*\n        dollars.\"\"\"\n        self.balance += amount\n        return self.balance\n","children":[{"body_character":"\"\"\"\"\"Return the balance remaining after depositing *amount*\n        dollars.\"","children":[],"id":"13","children_ids":[],"type":"comment","name":null,"body":"\"\"\"Return the balance remaining after depositing *amount*\n        dollars.\"\"\"","line_start":60,"line_end":61,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"\"\"\"","end_statement":"\"\"\"","start_statement_regexp":"/\"\"\"/","start_statement_matched":"\"\"\"","start_statement_line_start":60,"start_statement_line_end":60,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\"\"\"/","end_statement_matched":"\"\"\"","end_statement_line_start":61,"end_statement_line_end":61,"end_statement_line_in_start":2,"end_statement_line_in_end":2,"char_start":1688,"start_statement_char_start":1688,"start_statement_char_end":1691,"start_statement_char_in_start":0,"start_statement_char_in_end":3,"char_end":1765,"end_statement_char_start":1762,"end_statement_char_end":1765,"end_statement_char_in_start":74,"end_statement_char_in_end":77}],"id":"12","children_ids":["13"],"type":"method","name":"deposit","body":"def deposit(self, amount):\n        \"\"\"Return the balance remaining after depositing *amount*\n        dollars.\"\"\"\n        self.balance += amount\n        return self.balance","line_start":59,"line_end":63,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"def deposit(self, amount):","end_statement":"","start_statement_regexp":"/def\\s+([A-Za-z0-9_]+)\\s*\\((.|\\n)*?\\)\\s*:/","start_statement_matched":"def deposit(self, amount):","start_statement_line_start":59,"start_statement_line_end":59,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":63,"end_statement_line_end":63,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":1653,"start_statement_char_start":1653,"start_statement_char_end":1679,"start_statement_char_in_start":0,"start_statement_char_in_end":26,"char_end":1824,"end_statement_char_start":1824,"end_statement_char_end":1824,"end_statement_char_in_start":171,"end_statement_char_in_end":171}],"id":"4","children_ids":["5","6","8","10","12"],"type":"class","name":"Customer","body":"class Customer(object):\n    \"\"\"A customer of ABC Bank with a checking account. Customers have the\n    following properties:\n\n    Attributes:\n        name: A string representing the customer's name.\n        balance: A float tracking the current balance of the customer's account.\n    \"\"\"\n\n    def __init__(self, name):\n        \"\"\"Return a Customer object whose name is *name*.\"\"\" \n        self.name = name\n\n    def set_balance(self, balance=0.0):\n        \"\"\"Set the customer's starting balance.\"\"\"\n        self.balance = balance\n\n    def withdraw(self, amount):\n        \"\"\"Return the balance remaining after withdrawing *amount*\n        dollars.\"\"\"\n        if amount > self.balance:\n            raise RuntimeError('Amount greater than available balance.')\n        self.balance -= amount\n        return self.balance\n\n    def deposit(self, amount):\n        \"\"\"Return the balance remaining after depositing *amount*\n        dollars.\"\"\"\n        self.balance += amount\n        return self.balance","line_start":34,"line_end":63,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":"class Customer(object):","end_statement":"","start_statement_regexp":"/class\\s+([A-Za-z0-9_]+)\\s?[A-Za-z0-9_\\\\\\s\\(\\),]*:/","start_statement_matched":"class Customer(object):","start_statement_line_start":34,"start_statement_line_end":34,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":63,"end_statement_line_end":63,"end_statement_line_in_start":30,"end_statement_line_in_end":30,"char_start":834,"start_statement_char_start":834,"start_statement_char_end":857,"start_statement_char_in_start":0,"start_statement_char_in_end":23,"char_end":1824,"end_statement_char_start":1824,"end_statement_char_end":1824,"end_statement_char_in_start":990,"end_statement_char_in_end":990},{"body_character":"class MyClass1(object):lass MyClass1(object):\n    def __init__(self):\n        self.raw_data = None\n\n    def _parse_data(self):\n        # This is a fairly complex function xml/json parser\n        raw_data = self.raw_data\n        data = raw_data  #  Much for is done to do something with raw_data\n        cache.set('cache_key, data, 600)  # Cache for 10 minutes\n        return data\n\n    def _populate_data(self):\n        # This function grabs data from an external source\n        self.raw_data = 'some raw data, xml, json or alike..\n\n    def get_parsed_data(self):\n        cached_data = cache.get('cache_key)\n        if cached_data:\n            return cached_data\n        else:\n            self._populate_data()\n            return self._parse_data()\n","children":[{"body_character":"def __init__(self):ef __init__(self):\n        self.raw_data = None\n","children":[],"id":"15","children_ids":[],"type":"method","name":"__init__","body":"def __init__(self):\n        self.raw_data = None","line_start":67,"line_end":68,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"def __init__(self):","end_statement":"","start_statement_regexp":"/def\\s+([A-Za-z0-9_]+)\\s*\\((.|\\n)*?\\)\\s*:/","start_statement_matched":"def __init__(self):","start_statement_line_start":67,"start_statement_line_end":67,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":68,"end_statement_line_end":68,"end_statement_line_in_start":2,"end_statement_line_in_end":2,"char_start":1855,"start_statement_char_start":1855,"start_statement_char_end":1874,"start_statement_char_in_start":0,"start_statement_char_in_end":19,"char_end":1903,"end_statement_char_start":1903,"end_statement_char_end":1903,"end_statement_char_in_start":48,"end_statement_char_in_end":48},{"body_character":"def _parse_data(self):ef _parse_data(self):\n        # This is a fairly complex function xml/json parser\n        raw_data = self.raw_data\n        data = raw_data  #  Much for is done to do something with raw_data\n        cache.set('cache_key, data, 600)  # Cache for 10 minutes\n        return data\n","children":[{"body_character":"# This is a fairly complex function xml/json parser\n","children":[],"id":"17","children_ids":[],"type":"comment","name":null,"body":"# This is a fairly complex function xml/json parser\n","line_start":71,"line_end":71,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"          ","start_statement":"#","end_statement":"\n","start_statement_regexp":"/#/","start_statement_matched":"#","start_statement_line_start":71,"start_statement_line_end":71,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":70,"end_statement_line_end":71,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":1940,"start_statement_char_start":1940,"start_statement_char_end":1941,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":1992,"end_statement_char_start":1991,"end_statement_char_end":1992,"end_statement_char_in_start":51,"end_statement_char_in_end":52},{"body_character":"#  Much for is done to do something with raw_data\n","children":[],"id":"18","children_ids":[],"type":"comment","name":null,"body":"#  Much for is done to do something with raw_data\n","line_start":73,"line_end":73,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"            ","start_statement":"#","end_statement":"\n","start_statement_regexp":"/#/","start_statement_matched":"#","start_statement_line_start":73,"start_statement_line_end":73,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":72,"end_statement_line_end":73,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":2050,"start_statement_char_start":2050,"start_statement_char_end":2051,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":2100,"end_statement_char_start":2099,"end_statement_char_end":2100,"end_statement_char_in_start":49,"end_statement_char_in_end":50},{"body_character":"# Cache for 10 minutes\n","children":[],"id":"19","children_ids":[],"type":"comment","name":null,"body":"# Cache for 10 minutes\n","line_start":74,"line_end":74,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"         ","start_statement":"#","end_statement":"\n","start_statement_regexp":"/#/","start_statement_matched":"#","start_statement_line_start":74,"start_statement_line_end":74,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":73,"end_statement_line_end":74,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":2143,"start_statement_char_start":2143,"start_statement_char_end":2144,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":2166,"end_statement_char_start":2165,"end_statement_char_end":2166,"end_statement_char_in_start":22,"end_statement_char_in_end":23}],"id":"16","children_ids":["17","18","19"],"type":"method","name":"_parse_data","body":"def _parse_data(self):\n        # This is a fairly complex function xml/json parser\n        raw_data = self.raw_data\n        data = raw_data  #  Much for is done to do something with raw_data\n        cache.set('cache_key', data, 600)  # Cache for 10 minutes\n        return data","line_start":70,"line_end":75,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"def _parse_data(self):","end_statement":"","start_statement_regexp":"/def\\s+([A-Za-z0-9_]+)\\s*\\((.|\\n)*?\\)\\s*:/","start_statement_matched":"def _parse_data(self):","start_statement_line_start":70,"start_statement_line_end":70,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":75,"end_statement_line_end":75,"end_statement_line_in_start":6,"end_statement_line_in_end":6,"char_start":1909,"start_statement_char_start":1909,"start_statement_char_end":1931,"start_statement_char_in_start":0,"start_statement_char_in_end":22,"char_end":2185,"end_statement_char_start":2185,"end_statement_char_end":2185,"end_statement_char_in_start":276,"end_statement_char_in_end":276},{"body_character":"def _populate_data(self):ef _populate_data(self):\n        # This function grabs data from an external source\n        self.raw_data = 'some raw data, xml, json or alike..\n","children":[{"body_character":"# This function grabs data from an external source\n","children":[],"id":"21","children_ids":[],"type":"comment","name":null,"body":"# This function grabs data from an external source\n","line_start":78,"line_end":78,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"                ","start_statement":"#","end_statement":"\n","start_statement_regexp":"/#/","start_statement_matched":"#","start_statement_line_start":78,"start_statement_line_end":78,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":77,"end_statement_line_end":78,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":2225,"start_statement_char_start":2225,"start_statement_char_end":2226,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":2276,"end_statement_char_start":2275,"end_statement_char_end":2276,"end_statement_char_in_start":50,"end_statement_char_in_end":51}],"id":"20","children_ids":["21"],"type":"method","name":"_populate_data","body":"def _populate_data(self):\n        # This function grabs data from an external source\n        self.raw_data = 'some raw data, xml, json or alike..'","line_start":77,"line_end":79,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"def _populate_data(self):","end_statement":"","start_statement_regexp":"/def\\s+([A-Za-z0-9_]+)\\s*\\((.|\\n)*?\\)\\s*:/","start_statement_matched":"def _populate_data(self):","start_statement_line_start":77,"start_statement_line_end":77,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":79,"end_statement_line_end":79,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":2191,"start_statement_char_start":2191,"start_statement_char_end":2216,"start_statement_char_in_start":0,"start_statement_char_in_end":25,"char_end":2337,"end_statement_char_start":2337,"end_statement_char_end":2337,"end_statement_char_in_start":146,"end_statement_char_in_end":146},{"body_character":"def get_parsed_data(self):ef get_parsed_data(self):\n        cached_data = cache.get('cache_key)\n        if cached_data:\n            return cached_data\n        else:\n            self._populate_data()\n            return self._parse_data()\n","children":[],"id":"22","children_ids":[],"type":"method","name":"get_parsed_data","body":"def get_parsed_data(self):\n        cached_data = cache.get('cache_key')\n        if cached_data:\n            return cached_data\n        else:\n            self._populate_data()\n            return self._parse_data()","line_start":81,"line_end":87,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"def get_parsed_data(self):","end_statement":"","start_statement_regexp":"/def\\s+([A-Za-z0-9_]+)\\s*\\((.|\\n)*?\\)\\s*:/","start_statement_matched":"def get_parsed_data(self):","start_statement_line_start":81,"start_statement_line_end":81,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":87,"end_statement_line_end":87,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":2343,"start_statement_char_start":2343,"start_statement_char_end":2369,"start_statement_char_in_start":0,"start_statement_char_in_end":26,"char_end":2555,"end_statement_char_start":2555,"end_statement_char_end":2555,"end_statement_char_in_start":212,"end_statement_char_in_end":212}],"id":"14","children_ids":["15","16","20","22"],"type":"class","name":"MyClass1","body":"class MyClass1(object):\n    def __init__(self):\n        self.raw_data = None\n\n    def _parse_data(self):\n        # This is a fairly complex function xml/json parser\n        raw_data = self.raw_data\n        data = raw_data  #  Much for is done to do something with raw_data\n        cache.set('cache_key', data, 600)  # Cache for 10 minutes\n        return data\n\n    def _populate_data(self):\n        # This function grabs data from an external source\n        self.raw_data = 'some raw data, xml, json or alike..'\n\n    def get_parsed_data(self):\n        cached_data = cache.get('cache_key')\n        if cached_data:\n            return cached_data\n        else:\n            self._populate_data()\n            return self._parse_data()","line_start":66,"line_end":87,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":"class MyClass1(object):","end_statement":"","start_statement_regexp":"/class\\s+([A-Za-z0-9_]+)\\s?[A-Za-z0-9_\\\\\\s\\(\\),]*:/","start_statement_matched":"class MyClass1(object):","start_statement_line_start":66,"start_statement_line_end":66,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":87,"end_statement_line_end":87,"end_statement_line_in_start":22,"end_statement_line_in_end":22,"char_start":1827,"start_statement_char_start":1827,"start_statement_char_end":1850,"start_statement_char_in_start":0,"start_statement_char_in_end":23,"char_end":2555,"end_statement_char_start":2555,"end_statement_char_end":2555,"end_statement_char_in_start":728,"end_statement_char_in_end":728},{"body_character":"class MyClass2(object):lass MyClass2(object):\n    def _parse_data(self, raw_data):\n        # This is a fairly complex function xml/json parser\n        data = raw_data  # After some complicated work of parsing raw_data\n        cache.set('cache_key, data, 600)  # Cache for 10 minutes\n        return data\n\n    def _get_data(self):\n        # This function grabs data from an external source\n        return 'some raw data, xml, json or alike..\n\n    def get_parsed_data(self):\n        cached_data = cache.get('cache_key)\n        if cached_data:\n            return cached_data\n        else:\n            return self._populate_data(self._get_data())\n","children":[{"body_character":"def _parse_data(self, raw_data):ef _parse_data(self, raw_data):\n        # This is a fairly complex function xml/json parser\n        data = raw_data  # After some complicated work of parsing raw_data\n        cache.set('cache_key, data, 600)  # Cache for 10 minutes\n        return data\n","children":[{"body_character":"# This is a fairly complex function xml/json parser\n","children":[],"id":"25","children_ids":[],"type":"comment","name":null,"body":"# This is a fairly complex function xml/json parser\n","line_start":95,"line_end":95,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"            ","start_statement":"#","end_statement":"\n","start_statement_regexp":"/#/","start_statement_matched":"#","start_statement_line_start":95,"start_statement_line_end":95,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":94,"end_statement_line_end":95,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":2673,"start_statement_char_start":2673,"start_statement_char_end":2674,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":2725,"end_statement_char_start":2724,"end_statement_char_end":2725,"end_statement_char_in_start":51,"end_statement_char_in_end":52},{"body_character":"# After some complicated work of parsing raw_data\n","children":[],"id":"26","children_ids":[],"type":"comment","name":null,"body":"# After some complicated work of parsing raw_data\n","line_start":96,"line_end":96,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"            ","start_statement":"#","end_statement":"\n","start_statement_regexp":"/#/","start_statement_matched":"#","start_statement_line_start":96,"start_statement_line_end":96,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":95,"end_statement_line_end":96,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":2750,"start_statement_char_start":2750,"start_statement_char_end":2751,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":2800,"end_statement_char_start":2799,"end_statement_char_end":2800,"end_statement_char_in_start":49,"end_statement_char_in_end":50},{"body_character":"# Cache for 10 minutes\n","children":[],"id":"27","children_ids":[],"type":"comment","name":null,"body":"# Cache for 10 minutes\n","line_start":97,"line_end":97,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"         ","start_statement":"#","end_statement":"\n","start_statement_regexp":"/#/","start_statement_matched":"#","start_statement_line_start":97,"start_statement_line_end":97,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":96,"end_statement_line_end":97,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":2843,"start_statement_char_start":2843,"start_statement_char_end":2844,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":2866,"end_statement_char_start":2865,"end_statement_char_end":2866,"end_statement_char_in_start":22,"end_statement_char_in_end":23}],"id":"24","children_ids":["25","26","27"],"type":"method","name":"_parse_data","body":"def _parse_data(self, raw_data):\n        # This is a fairly complex function xml/json parser\n        data = raw_data  # After some complicated work of parsing raw_data\n        cache.set('cache_key', data, 600)  # Cache for 10 minutes\n        return data","line_start":94,"line_end":98,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"def _parse_data(self, raw_data):","end_statement":"","start_statement_regexp":"/def\\s+([A-Za-z0-9_]+)\\s*\\((.|\\n)*?\\)\\s*:/","start_statement_matched":"def _parse_data(self, raw_data):","start_statement_line_start":94,"start_statement_line_end":94,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":98,"end_statement_line_end":98,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":2632,"start_statement_char_start":2632,"start_statement_char_end":2664,"start_statement_char_in_start":0,"start_statement_char_in_end":32,"char_end":2885,"end_statement_char_start":2885,"end_statement_char_end":2885,"end_statement_char_in_start":253,"end_statement_char_in_end":253},{"body_character":"def _get_data(self):ef _get_data(self):\n        # This function grabs data from an external source\n        return 'some raw data, xml, json or alike..\n","children":[{"body_character":"# This function grabs data from an external source\n","children":[],"id":"29","children_ids":[],"type":"comment","name":null,"body":"# This function grabs data from an external source\n","line_start":101,"line_end":101,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"               ","start_statement":"#","end_statement":"\n","start_statement_regexp":"/#/","start_statement_matched":"#","start_statement_line_start":101,"start_statement_line_end":101,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":100,"end_statement_line_end":101,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":2920,"start_statement_char_start":2920,"start_statement_char_end":2921,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":2971,"end_statement_char_start":2970,"end_statement_char_end":2971,"end_statement_char_in_start":50,"end_statement_char_in_end":51}],"id":"28","children_ids":["29"],"type":"method","name":"_get_data","body":"def _get_data(self):\n        # This function grabs data from an external source\n        return 'some raw data, xml, json or alike..'","line_start":100,"line_end":102,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"def _get_data(self):","end_statement":"","start_statement_regexp":"/def\\s+([A-Za-z0-9_]+)\\s*\\((.|\\n)*?\\)\\s*:/","start_statement_matched":"def _get_data(self):","start_statement_line_start":100,"start_statement_line_end":100,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":102,"end_statement_line_end":102,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":2891,"start_statement_char_start":2891,"start_statement_char_end":2911,"start_statement_char_in_start":0,"start_statement_char_in_end":20,"char_end":3023,"end_statement_char_start":3023,"end_statement_char_end":3023,"end_statement_char_in_start":132,"end_statement_char_in_end":132},{"body_character":"def get_parsed_data(self):ef get_parsed_data(self):\n        cached_data = cache.get('cache_key)\n        if cached_data:\n            return cached_data\n        else:\n            return self._populate_data(self._get_data())\n","children":[],"id":"30","children_ids":[],"type":"method","name":"get_parsed_data","body":"def get_parsed_data(self):\n        cached_data = cache.get('cache_key')\n        if cached_data:\n            return cached_data\n        else:\n            return self._populate_data(self._get_data())","line_start":104,"line_end":109,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"def get_parsed_data(self):","end_statement":"","start_statement_regexp":"/def\\s+([A-Za-z0-9_]+)\\s*\\((.|\\n)*?\\)\\s*:/","start_statement_matched":"def get_parsed_data(self):","start_statement_line_start":104,"start_statement_line_end":104,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":109,"end_statement_line_end":109,"end_statement_line_in_start":6,"end_statement_line_in_end":6,"char_start":3029,"start_statement_char_start":3029,"start_statement_char_end":3055,"start_statement_char_in_start":0,"start_statement_char_in_end":26,"char_end":3226,"end_statement_char_start":3226,"end_statement_char_end":3226,"end_statement_char_in_start":197,"end_statement_char_in_end":197}],"id":"23","children_ids":["24","28","30"],"type":"class","name":"MyClass2","body":"class MyClass2(object):\n    def _parse_data(self, raw_data):\n        # This is a fairly complex function xml/json parser\n        data = raw_data  # After some complicated work of parsing raw_data\n        cache.set('cache_key', data, 600)  # Cache for 10 minutes\n        return data\n\n    def _get_data(self):\n        # This function grabs data from an external source\n        return 'some raw data, xml, json or alike..'\n\n    def get_parsed_data(self):\n        cached_data = cache.get('cache_key')\n        if cached_data:\n            return cached_data\n        else:\n            return self._populate_data(self._get_data())","line_start":93,"line_end":109,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":"class MyClass2(object):","end_statement":"","start_statement_regexp":"/class\\s+([A-Za-z0-9_]+)\\s?[A-Za-z0-9_\\\\\\s\\(\\),]*:/","start_statement_matched":"class MyClass2(object):","start_statement_line_start":93,"start_statement_line_end":93,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":109,"end_statement_line_end":109,"end_statement_line_in_start":17,"end_statement_line_in_end":17,"char_start":2604,"start_statement_char_start":2604,"start_statement_char_end":2627,"start_statement_char_in_start":0,"start_statement_char_in_end":23,"char_end":3226,"end_statement_char_start":3226,"end_statement_char_end":3226,"end_statement_char_in_start":622,"end_statement_char_in_end":622}],"id":null,"children_ids":[],"type":"file","name":null,"body":"class LazyRules:\n    rules_filename = 'plural6-rules.txt'\n\n    def __init__(self):\n        self.pattern_file = open(self.rules_filename, encoding='utf-8')\n        self.cache = []\n\n    def __iter__(self):\n        self.cache_index = 0\n        return self\n\n    def __next__(self):\n        self.cache_index += 1\n        if len(self.cache) >= self.cache_index:\n            return self.cache[self.cache_index - 1]\n\n        if self.pattern_file.closed:\n            raise StopIteration\n\n        line = self.pattern_file.readline()\n        if not line:\n            self.pattern_file.close()\n            raise StopIteration\n\n        pattern, search, replace = line.split(None, 3)\n        funcs = build_match_and_apply_functions(\n            pattern, search, replace)\n        self.cache.append(funcs)\n        return funcs\n\nrules = LazyRules()\n\n\nclass Customer(object):\n    \"\"\"A customer of ABC Bank with a checking account. Customers have the\n    following properties:\n\n    Attributes:\n        name: A string representing the customer's name.\n        balance: A float tracking the current balance of the customer's account.\n    \"\"\"\n\n    def __init__(self, name):\n        \"\"\"Return a Customer object whose name is *name*.\"\"\" \n        self.name = name\n\n    def set_balance(self, balance=0.0):\n        \"\"\"Set the customer's starting balance.\"\"\"\n        self.balance = balance\n\n    def withdraw(self, amount):\n        \"\"\"Return the balance remaining after withdrawing *amount*\n        dollars.\"\"\"\n        if amount > self.balance:\n            raise RuntimeError('Amount greater than available balance.')\n        self.balance -= amount\n        return self.balance\n\n    def deposit(self, amount):\n        \"\"\"Return the balance remaining after depositing *amount*\n        dollars.\"\"\"\n        self.balance += amount\n        return self.balance\n\n\nclass MyClass1(object):\n    def __init__(self):\n        self.raw_data = None\n\n    def _parse_data(self):\n        # This is a fairly complex function xml/json parser\n        raw_data = self.raw_data\n        data = raw_data  #  Much for is done to do something with raw_data\n        cache.set('cache_key', data, 600)  # Cache for 10 minutes\n        return data\n\n    def _populate_data(self):\n        # This function grabs data from an external source\n        self.raw_data = 'some raw data, xml, json or alike..'\n\n    def get_parsed_data(self):\n        cached_data = cache.get('cache_key')\n        if cached_data:\n            return cached_data\n        else:\n            self._populate_data()\n            return self._parse_data()\n\nmc1 = MyClass1()\nprint mc1.get_parsed_data()\n\n\nclass MyClass2(object):\n    def _parse_data(self, raw_data):\n        # This is a fairly complex function xml/json parser\n        data = raw_data  # After some complicated work of parsing raw_data\n        cache.set('cache_key', data, 600)  # Cache for 10 minutes\n        return data\n\n    def _get_data(self):\n        # This function grabs data from an external source\n        return 'some raw data, xml, json or alike..'\n\n    def get_parsed_data(self):\n        cached_data = cache.get('cache_key')\n        if cached_data:\n            return cached_data\n        else:\n            return self._populate_data(self._get_data())\n\nmc2 = MyClass2()\nprint mc1.get_parsed_data()","line_start":1,"line_end":112,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":null,"end_statement":null,"start_statement_regexp":null,"start_statement_matched":null,"start_statement_line_start":null,"start_statement_line_end":null,"start_statement_line_in_start":null,"start_statement_line_in_end":null,"end_statement_regexp":null,"end_statement_matched":null,"end_statement_line_start":null,"end_statement_line_end":null,"end_statement_line_in_start":null,"end_statement_line_in_end":null}