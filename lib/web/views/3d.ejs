<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>DizP</title>

    <script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>

    <script src="/js/lib/three/three.min.js"></script>
    <script src="/js/lib/three/OrbitControls.js"></script>
    <script src="/js/lib/three/FontUtils.js"></script>
    <script src="/js/lib/three/TextGeometry.js"></script>
    <script src="/js/lib/three/helvetiker_regular.typeface.js"></script>
    <script src="/js/lib/three/Tween.js"></script>
    <script src="/js/lib/three/EdgesHelper.js"></script>

    <script src="/js/drawer.js"></script>

</head>

<body>
    <div id="3dview" style="position:absolute;width:800px;height:600px">
    </div>

    <script>
        function draw3dviewTest() {

            var betweenLayers = 30;
            var zLayers = [
                betweenLayers + betweenLayers, betweenLayers, 0
            ];

            var tdview = $(document.getElementById('3dview'));
            var size = {
                width: tdview.width(),
                height: tdview.height()
            };
            Drawer.init(
                tdview[0], {
                    width: size.width,
                    height: size.height,
                    top: tdview.offset().top,
                    left: tdview.offset().left
                }, {
                    x: 15,
                    y: 15,
                    z: zLayers[0] + 45
                }, {
                    walk: false
                }
            );
            //    Drawer.init({ x: 0, y: 0, z: zLayers[0]+45 });



            var placeOrder = Drawer.drawLines({
                lines: [{
                        text: "Use case Place Order",
                        mouseClick: function(object) {
                            Drawer.moveCameraTo(object.cube.position, betweenLayers - 1);
                        }
                    }, {
                        text: "1. User selects to order items."
                    }, {
                        text: "2. System prompts for 'billing' and 'shipping' info.",
                        doubleMouseClick: function(object) {
                            object.cube.position.z -= betweenLayers;
                            Drawer.moveCameraTo(object.cube.position, betweenLayers - 1);
                        }
                    }, {
                        text: "3. User enters billing and shipping info."
                    }, {
                        text: "4. System shows the price including taxes, shipping charges and estimated delivery date."
                    }, {
                        text: "5. User confirms the price."
                    }, {
                        text: "6. System prompts for method of payment."
                    }, {
                        text: "7. User selects a method of payment."
                    }, {
                        text: "8. System requests Billing system for charging user for the order."
                    }, {
                        text: "9. Billing system confirms that user was charged."
                    }, {
                        text: "10. System notifies user that was charged."
                    },

                ],

                position: {
                    x: 0,
                    y: 0,
                    z: zLayers[0]
                }
            });


            var promptFor = Drawer.drawLines({
                lines: [{
                    text: "Subfunction Prompt For",
                    mouseClick: function(object) {
                        Drawer.moveCameraTo(object.cube.position, betweenLayers - 1);
                    }
                }, {
                    text: "1. System renders a form based on parameters."
                }, {
                    text: "2. System obtains data 'pre-defined values'."
                }, {
                    text: "3. System fills the form with the pre-defined values."
                }],
                position: {
                    x: 0,
                    y: placeOrder[2].position.y,
                    z: zLayers[1]
                }
            });


            var renderForm = Drawer.drawLines({
                lines: [{
                    text: "Subfunction Render Form",
                    mouseClick: function(object) {
                        Drawer.moveCameraTo(object.cube.position, betweenLayers - 1);
                    }
                }, {
                    text: "1. System fetches template file based on parameter 'ID'."
                }, {
                    text: "2. System pairs the template file with parameters."
                }, ],
                position: {
                    x: 0,
                    y: promptFor[1].position.y,
                    z: zLayers[2]
                }
            });


            var obtainData = Drawer.drawLines({
                lines: [{
                    text: "Subfunction Obtain Data",
                    mouseClick: function(object) {
                        Drawer.moveCameraTo(object.cube.position, betweenLayers - 1);
                    }
                }, {
                    text: "1. System check whether user has access to the database."
                }, {
                    text: "2. System connects to the database."
                }, {
                    text: "3. System logs in to the database."
                }, {
                    text: "4. System requests data from the databse based on parameters."
                }, {
                    text: "5. Database responds with the data."
                }],
                position: {
                    x: 0,
                    y: promptFor[2].position.y - 5,
                    z: zLayers[2]
                }
            });

            var fillForm = Drawer.drawLines({
                lines: [{
                    text: "Subfunction Fill Form",
                    mouseClick: function(object) {
                        Drawer.moveCameraTo(object.cube.position, betweenLayers - 1);
                    }
                }, {
                    text: "1. System searches for inputs inside document based on parameters."
                }, {
                    text: "2. System fills the inpus with parameters."
                }, ],
                position: {
                    x: 0,
                    y: promptFor[3].position.y - 14,
                    z: zLayers[2]
                }
            });


            // var showPrice = Drawer.drawLines({
            //     lines: [
            //         {
            //             text: "Subfunction Shows Price Including Taxes, Shipping Charges and Estimated Delivery Date",
            //             mouseClick: function (object) { Drawer.moveCameraTo(object.cube.position, betweenLayers-1); }
            //         },
            //         { text: "1. System calculates price based on the shipping cart." },
            //         { text: "2. System predicts the estimated delivery date." },
            //         { text: "3. System renders the 'price' form." },
            //     ],
            //     position: { x: 0, y: placeOrder[4].position.y-5, z: zLayers[1] }
            // });

            Drawer.drawArrow({
                src: placeOrder[2].position,
                dst: promptFor[0].position,
                text: "<<include>>"
            });
            Drawer.drawArrow({
                src: promptFor[1].position,
                dst: renderForm[0].position,
                text: "aaaaa"
            });
            Drawer.drawArrow({
                src: promptFor[2].position,
                dst: obtainData[0].position
            });
            Drawer.drawArrow({
                src: promptFor[3].position,
                dst: fillForm[0].position
            });
            // Drawer.drawArrow({ src: placeOrder[4].position, dst: showPrice[0].position });
            // Drawer.drawArrow({ src: showPrice[3].position, dst: renderForm[0].position });

            Drawer.render();
        }

        function draw3dview(usecases, relationships) {

            Drawer.destroy();

            /**
             * INIT
             */

            var betweenLayers = 30;

            var lastYPositionForZLayers = {};
            var maxXForXLayers = [
                0, 0, 0, 0, 0, 0
            ];
            // first is 0
            var lastXId = 0;

            var tdview = $(document.getElementById('3dview'));

            var size = {
                width: tdview.width(),
                height: tdview.height()
            };

            var betweenX = 5;
            var betweenY = -5;

            Drawer.init(
                tdview[0], {
                    width: size.width,
                    height: size.height,
                    top: tdview.offset().top,
                    left: tdview.offset().left
                }, {
                    x: 15,
                    y: 15,
                    z: 90 + 45
                }, {
                    walk: false
                }
            );


            /**
             * Draw use cases
             */

            function findInArray(id, usecases) {
                for (var i in usecases) {
                    if (id === usecases[i].id) return usecases[i];
                }
                return null;
            }

            // id: usecase
            var drawedUsecases = {},
                drawedRelations = {};

            for (var i in usecases) {
                var usecase = usecases[i];
                if (usecase.id in drawedUsecases) continue;


                /**
                 * Draw the usecase and their related usecases and relationships between them - recursive
                 */

                function drawUsecase(usecase, position) {
                    if (usecase === null) return;
                    // prepare draw data
                    var drawData = [{
                        text: "Use case   " + usecase.name,
                        mouseClick: function(object) {
                            Drawer.moveCameraTo(object.cube.position, betweenLayers - 1);
                        }
                    }, {
                        text: "",
                        mouseClick: function(object) {
                            Drawer.moveCameraTo(object.cube.position, betweenLayers - 1);
                        }
                    }];

                    for (var j in usecase.scenario.steps) {
                        drawData.push({
                            text: usecase.scenario.steps[j].orig_name
                        });
                    }

                    // draw
                    var drawedUsecase = Drawer.drawLines({
                        lines: drawData,
                        position: position
                    });

                    // drawedUsecase.usecase = usecase;
                    drawedUsecases[usecase.id] = drawedUsecase;
                    return drawedUsecase;
                }


				console.log('Drawing ', usecase.id, usecase.name);

                var drawedUsecase = drawUsecase(usecase, {
                    x: maxXForXLayers[lastXId],
                    y: 0,
                    z: 0
                });
                lastYPositionForZLayers[0] = drawedUsecase[drawedUsecase.length - 1].position.y + betweenY;
                for (var k in drawedUsecase)
                    if ((drawedUsecase[k].position.x + drawedUsecase[k].size.x + betweenX) > maxXForXLayers[lastXId + 1])
                        maxXForXLayers[lastXId + 1] = (drawedUsecase[k].position.x + drawedUsecase[k].size.x + betweenX);




                    // get related use cases with depth 1 draw them and relationships and then recurse with newly drawed
                function drawRelations(usecase, drawedUsecase, zDrawed) {
                    if (usecase === null) return;

                    var z = null,
                        usecase_id = null,
                        direction = true,
                        proceed = false;


                    for (var j in relationships) {

                        proceed = false;

                        // draw in back of usecase
                        if (relationships[j].usecase_id === usecase.id &&
                            (!(relationships[j].related_usecase_id in drawedUsecases))) {
                            z = zDrawed - betweenLayers;
                            usecase_id = relationships[j].related_usecase_id;
                            proceed = true;
                            direction = true;

                        } else
                        // draw in front of use case
                        if (relationships[j].related_usecase_id === usecase.id &&
                            (!(relationships[j].usecase_id in drawedUsecases))) {
                            z = zDrawed + betweenLayers;
                            usecase_id = relationships[j].usecase_id;
                            proceed = true;
                            direction = false;

                        }

                        if (proceed) {


                            // console.log('!', relationships[j].usecase_id, relationships[j].related_usecase_id, usecase.id);

                            var y = 0;
                            if (z in lastYPositionForZLayers) {
                                y = lastYPositionForZLayers[z];
                            }

                            var toDraw = findInArray(usecase_id, usecases),
                                drawedUsecaseDst;

                            if (usecase_id in drawedUsecases) {
                                drawedUsecaseDst = drawedUsecases[usecase_id];
                            } else {
								console.log('Drawing ', usecase_id);
                                var step;
                                if (relationships[j].step_no) {
                                    step = parseInt(relationships[j].step_no.replace(/[a-zA-Z\.]*/g, ''));
                                } else {
                                    step = -1;
                                }
                                if (!(step + 1 in drawedUsecase)) {

                                    var steightLine = drawedUsecase[0].position.y + 1;
                                } else {

                                    var steightLine = drawedUsecase[step + 1].position.y + 1;
                                }
                                if (y > steightLine)
                                    y = steightLine;
                                drawedUsecaseDst = drawUsecase(toDraw, {
                                    x: maxXForXLayers[lastXId],
                                    y: y,
                                    z: z
                                });

                                lastYPositionForZLayers[z] = drawedUsecaseDst[drawedUsecaseDst.length - 1].position.y + betweenY;
                                for (var k in drawedUsecaseDst)
                                    if ((drawedUsecaseDst[k].position.x + drawedUsecaseDst[k].size.x + betweenX) > maxXForXLayers[lastXId + 1])
                                        maxXForXLayers[lastXId + 1] = (drawedUsecaseDst[k].position.x + drawedUsecaseDst[k].size.x + betweenX);

                            }

console.log(drawedUsecaseDst)

                            var src,
                                dst,
                                step;
                            if (relationships[j].step_no) {
                                step = parseInt(relationships[j].step_no.replace(/[a-zA-Z\.]*/g, ''));
// -2 ???????????????????
                            } else {
                                step = -1;
                            }

console.log(step, direction);

                            if (direction) {
                                if (relationships[j].type == 'extend') {
                                    src = drawedUsecase[0];
                                    dst = drawedUsecaseDst[step + 1];
                                } else {
                                    src = drawedUsecase[step + 1];
                                    dst = drawedUsecaseDst[0];
                                }
                            } else {
                                if (relationships[j].type == 'extend') {
                                    src = drawedUsecaseDst[0];
                                    dst = drawedUsecase[step + 1];
                                } else {
                                    src = drawedUsecaseDst[step + 1];
                                    dst = drawedUsecase[0];
                                }
                            }

                            console.log(relationships[j], src, dst);

                            var relation_id =
                                relationships[j].id;

                            if (!(relation_id in drawedRelations)) {

                                var relation;
                                if (relationships[j].step_no) {
                                    relation = Drawer.drawArrow({
                                        src: src.position,
                                        dst: dst.position,
                                        text: relationships[j].type
                                    });
                                } else {
                                    relation = Drawer.drawArrow({
                                        src: src.position,
                                        dst: dst.position,
                                        text: relationships[j].type
                                    });
                                }
                                drawedRelations[relation_id] = relation;

                            }

                            // console.log('!', toDraw, usecase);
                            drawRelations(toDraw, drawedUsecaseDst, z);

                        }

                    }
                }

                drawRelations(usecase, drawedUsecase, 0);

                lastXId++;
                console.log('Leaving ' + usecase.name, lastXId, maxXForXLayers[lastXId]);



            }


            Drawer.render();


        }



        $(document).ready(function() {
            //draw3dviewTest();

            $.ajax({
                type: "POST",
                url: "/api/usecase/get_3d",
                data: {
					project_id: <%-project_id%>,
					usecases_selected: ['all']
				},
                success: function (data) {
					//console.log(data);
					draw3dview(data.usecases,data.relationships);
				}
            });
        });
    </script>


</body>

</html>
