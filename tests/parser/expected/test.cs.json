{"body_character":"#region using directives\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing PoGo.NecroBot.Logic.Interfaces.Configuration;\nusing PoGo.NecroBot.Logic.Model.Settings;\nusing PoGo.NecroBot.Logic.PoGoUtils;\nusing PoGo.NecroBot.Logic.State;\nusing PoGo.NecroBot.Logic.Utils;\nusing PokemonGo.RocketAPI;\nusing POGOProtos.Data;\nusing POGOProtos.Data.Player;\nusing POGOProtos.Enums;\nusing POGOProtos.Inventory;\nusing POGOProtos.Inventory.Item;\nusing POGOProtos.Networking.Responses;\nusing POGOProtos.Settings.Master;\n\n#endregion\n\nnamespace PoGo.NecroBot.Logic\n{\n\n    public class Inventory\n    {\n        private readonly Client _client;\n        private readonly ILogicSettings _logicSettings;\n        private GetPlayerResponse _player = null;\n        private int _level = 0;\n        private DownloadItemTemplatesResponse _templates;\n        private IEnumerable<PokemonSettings> _pokemonSettings;\n\n        private readonly List<ItemId> _revives = new List<ItemId> { ItemId.ItemRevive, ItemId.ItemMaxRevive };\n        private GetInventoryResponse _cachedInventory;\n        private DateTime _lastRefresh;\n\n        public Inventory(Client client, ILogicSettings logicSettings)\n        {\n            _client = client;\n            _logicSettings = logicSettings;\n        }\n\n        private readonly List<ItemId> _pokeballs = new List<ItemId>\n        {\n            ItemId.ItemPokeBall,\n            ItemId.ItemGreatBall,\n            ItemId.ItemUltraBall,\n            ItemId.ItemMasterBall\n        };\n\n        private readonly List<ItemId> _potions = new List<ItemId>\n        {\n            ItemId.ItemPotion,\n            ItemId.ItemSuperPotion,\n            ItemId.ItemHyperPotion,\n            ItemId.ItemMaxPotion\n        };\n\n        public async Task DeletePokemonFromInvById(ulong id)\n        {\n            var inventory = await GetCachedInventory();\n            var pokemon =\n                inventory.InventoryDelta.InventoryItems.FirstOrDefault(\n                    i => i.InventoryItemData.PokemonData != null && i.InventoryItemData.PokemonData.Id == id);\n            if (pokemon != null)\n                inventory.InventoryDelta.InventoryItems.Remove(pokemon);\n        }\n\n        public async Task<LevelUpRewardsResponse> GetLevelUpRewards(Inventory inv )\n        {\n            return await GetLevelUpRewards(inv.GetPlayerStats().Result.FirstOrDefault().Level);\n        }\n\n        private async Task<GetInventoryResponse> GetCachedInventory()\n        {\n            if (_player==null) GetPlayerData();\n            var now = DateTime.UtcNow;\n\n            if (_cachedInventory!=null && _lastRefresh.AddSeconds(30).Ticks > now.Ticks)\n                return _cachedInventory;\n\n            return await RefreshCachedInventory();\n        }\n\n\n        public async Task<IEnumerable<PokemonData>> GetDuplicatePokemonToTransfer(\n                IEnumerable<PokemonId> pokemonsNotToTransfer, IEnumerable<PokemonId> pokemonsToEvolve,\n                bool keepPokemonsThatCanEvolve = false, bool prioritizeIVoverCp = false\n             )\n        {\n            var myPokemon = await GetPokemons();\n\n            var myPokemonList = myPokemon.ToList();\n\n            var pokemonToTransfer = myPokemonList.Where(p => !pokemonsNotToTransfer.Contains(p.PokemonId) && p.DeployedFortId == string.Empty && p.Favorite == 0).ToList();\n\n            try\n            {\n                pokemonToTransfer =\n                    pokemonToTransfer.Where(\n                        p =>\n                        {\n                            var pokemonTransferFilter = GetPokemonTransferFilter(p.PokemonId);\n\n                            return !pokemonTransferFilter.MovesOperator.BoolFunc(\n                                        pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.MovesOperator.InverseBool(pokemonTransferFilter.Moves.Count > 0),\n                                                pokemonTransferFilter.Moves.Any(moveset =>\n                                                    pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                        pokemonTransferFilter.MovesOperator.InverseBool(moveset.Count > 0),\n                                                        moveset.Intersect(new[] { p.Move1, p.Move2 }).Count() == Math.Max(Math.Min(moveset.Count, 2),0)))),\n                                        pokemonTransferFilter.KeepMinOperator.BoolFunc(\n                                            p.Cp >= pokemonTransferFilter.KeepMinCp,\n                                            PokemonInfo.CalculatePokemonPerfection(p) >= pokemonTransferFilter.KeepMinIvPercentage,\n                                            pokemonTransferFilter.KeepMinOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.KeepMinOperator.InverseBool(pokemonTransferFilter.UseKeepMinLvl),\n                                                PokemonInfo.GetLevel(p) >= pokemonTransferFilter.KeepMinLvl)));\n\n                        }).ToList();\n            }\n            catch (Exception e)\n            {\n                throw e;\n            }\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var results = new List<PokemonData>();\n\n            foreach (var pokemonGroupToTransfer in pokemonToTransfer.GroupBy(p => p.PokemonId).ToList())\n            {\n                var amountToKeepInStorage = Math.Max(GetPokemonTransferFilter(pokemonGroupToTransfer.Key).KeepMinDuplicatePokemon, 0);\n\n                var inStorage = myPokemonList.Count(data => data.PokemonId == pokemonGroupToTransfer.Key);\n                var needToRemove = inStorage - amountToKeepInStorage;\n\n                if (needToRemove <= 0)\n                    continue;\n\n                var weakPokemonCount = pokemonGroupToTransfer.Count();\n                var canBeRemoved = Math.Min(needToRemove, weakPokemonCount);\n\n\n                var settings = pokemonSettings.Single(x => x.PokemonId == pokemonGroupToTransfer.Key);\n                //Lets calc new canBeRemoved pokemons according to transferring some of them for +1 candy or to evolving for +1 candy\n                if (keepPokemonsThatCanEvolve &&\n                    pokemonsToEvolve.Contains(pokemonGroupToTransfer.Key) &&\n                    settings.CandyToEvolve > 0 &&\n                    settings.EvolutionIds.Count != 0)\n                {\n                    var familyCandy = pokemonFamilies.Single(x => settings.FamilyId == x.FamilyId);\n\n                    // its an solution in fixed numbers of equations with two variables\n                    // (N = X + Y, X + C + Y >= Y * E) -> X >= (N * (E - 1) - C) / E\n                    // where N - current canBeRemoved,  X - new canBeRemoved, Y - possible to keep more, E - CandyToEvolve, C - candy amount\n                    canBeRemoved = (int)Math.Ceiling((double)((settings.CandyToEvolve - 1) * canBeRemoved - familyCandy.Candy_) / settings.CandyToEvolve);\n                }\n\n                if (canBeRemoved <= 0)\n                    continue;\n\n                if (prioritizeIVoverCp)\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(PokemonInfo.CalculatePokemonPerfection)\n                        .ThenBy(n => n.Cp)\n                        .Take(canBeRemoved));\n                }\n                else\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(x => x.Cp)\n                        .ThenBy(PokemonInfo.CalculatePokemonPerfection)\n                        .Take(canBeRemoved));\n                }\n            }\n\n            #region For testing\n/*\n            results.ForEach(data =>\n            {\n                var allpokemonoftype = myPokemonList.Where(x => x.PokemonId == data.PokemonId);\n                var bestPokemonOfType =\n                    (_logicSettings.PrioritizeIvOverCp\n                         ? allpokemonoftype\n                        .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                        .FirstOrDefault()\n                         : allpokemonoftype\n                        .OrderByDescending(x => x.Cp)\n                        .FirstOrDefault())\n                    ?? data;\n\n                var perfection = PokemonInfo.CalculatePokemonPerfection(data);\n                var cp = data.Cp;\n\n                var bestPerfection = PokemonInfo.CalculatePokemonPerfection(bestPokemonOfType);\n                var bestCp = bestPokemonOfType.Cp;\n            });\n*/\n            #endregion\n\n            return results;\n        }\n\n        public async Task<IEnumerable<EggIncubator>> GetEggIncubators()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems\n                    .Where(x => x.InventoryItemData.EggIncubators != null)\n                    .SelectMany(i => i.InventoryItemData.EggIncubators.EggIncubator)\n                    .Where(i => i != null);\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetEggs()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.IsEgg);\n        }\n\n        public async Task<PokemonData> GetHighestPokemonOfTypeByCp(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(x => x.Cp)\n                .FirstOrDefault();\n        }\n\n        public int GetStarDust()\n        {\n            GetPlayerData();\n            return _player.PlayerData.Currencies[1].Amount;\n        }\n\n        public async void GetPlayerData()\n        {\n            _player = await _client.Player.GetPlayer();\n        }\n\n        public async Task<PokemonData> GetHighestPokemonOfTypeByIv(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                .FirstOrDefault();\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetHighestsCp(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(x => x.Cp).ThenBy(n => n.StaminaMax).Take(limit);\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetHighestsPerfect(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).Take(limit);\n        }\n\n        public async Task<int> GetItemAmountByType(ItemId type)\n        {\n            var pokeballs = await GetItems();\n            return pokeballs.FirstOrDefault(i => i.ItemId == type)?.Count ?? 0;\n        }\n\n        public async Task<IEnumerable<ItemData>> GetItems()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.Item)\n                .Where(p => p != null);\n        }\n\n        public async Task<int> GetTotalItemCount()\n        {\n            var myItems = (await GetItems()).ToList();\n            int myItemCount = 0;\n            foreach (var myItem in myItems) myItemCount += myItem.Count;\n            return myItemCount;\n        }\n\n        public async Task<IEnumerable<ItemData>> GetItemsToRecycle(ISession session)\n        {\n            var itemsToRecycle = new List<ItemData>();\n            var myItems = (await GetItems()).ToList();\n            if (myItems == null)\n                return itemsToRecycle;\n\n            var otherItemsToRecycle = myItems\n                .Where(x => _logicSettings.ItemRecycleFilter.Any(f => f.Key == x.ItemId && x.Count > f.Value))\n                .Select(\n                    x =>\n                        new ItemData\n                        {\n                            ItemId = x.ItemId,\n                            Count = x.Count - _logicSettings.ItemRecycleFilter.Single(f => f.Key == x.ItemId).Value,\n                            Unseen = x.Unseen\n                        });\n\n            itemsToRecycle.AddRange(otherItemsToRecycle);\n\n            return itemsToRecycle;\n        }\n\n        public double GetPerfect(PokemonData poke)\n        {\n            var result = PokemonInfo.CalculatePokemonPerfection(poke);\n            return result;\n        }\n\n        public async Task<IEnumerable<PlayerStats>> GetPlayerStats()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.PlayerStats)\n                .Where(p => p != null);\n        }\n\n        public async Task<UseItemXpBoostResponse> UseLuckyEggConstantly()\n        {\n            var UseLuckyEgg = await _client.Inventory.UseItemXpBoost();\n            return UseLuckyEgg;\n        }\n        public async Task<UseIncenseResponse> UseIncenseConstantly()\n        {\n            var UseIncense = await _client.Inventory.UseIncense(ItemId.ItemIncenseOrdinary);\n            return UseIncense;\n        }\n\n        public async Task<List<InventoryItem>> GetPokeDexItems()\n        {\n            List<InventoryItem> PokeDex = new List<InventoryItem>();\n            var inventory = await _client.Inventory.GetInventory();\n\n            return (from items in inventory.InventoryDelta.InventoryItems\n                   where items.InventoryItemData?.PokedexEntry != null\n                   select items).ToList();\n        }\n\n        public async Task<List<Candy>> GetPokemonFamilies(int retries=0)\n        {\n            if (retries > 3) return null;\n\n            IEnumerable<Candy> families = null;\n            var inventory = await GetCachedInventory();\n            if ( inventory == null || inventory.InventoryDelta==null || inventory.InventoryDelta.InventoryItems==null)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                inventory = await GetCachedInventory();\n            }\n\n            try {\n                families = from item in inventory.InventoryDelta.InventoryItems\n                            where item.InventoryItemData?.Candy != null\n                            where item.InventoryItemData?.Candy.FamilyId != PokemonFamilyId.FamilyUnset\n                            group item by item.InventoryItemData?.Candy.FamilyId into family\n                            select new Candy\n                            {\n                                FamilyId = family.First().InventoryItemData.Candy.FamilyId,\n                                Candy_ = family.First().InventoryItemData.Candy.Candy_\n                            };\n            }\n            catch (NullReferenceException)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                return await GetPokemonFamilies(++retries);\n            }\n\n            return families.ToList();\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetPokemons()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.PokemonId > 0);\n        }\n        public async Task<IEnumerable<PokemonData>> GetFaveriotPokemon()\n        {\n            var inventory = await GetPokemons();\n            return\n                inventory.Where(i => i.Favorite == 1);\n\n        }\n\n        public async Task<IEnumerable<PokemonSettings>> GetPokemonSettings()\n        {\n            if (_templates == null || _pokemonSettings == null)\n            {\n                _templates = await _client.Download.GetItemTemplates();\n                _pokemonSettings = _templates.ItemTemplates.Select(i => i.PokemonSettings).Where(p => p != null && p.FamilyId != PokemonFamilyId.FamilyUnset);\n            }\n\n            return _pokemonSettings;\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetPokemonToEvolve(IEnumerable<PokemonId> filter = null)\n        {\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty).OrderByDescending(p => p.Cp);\n            //Don't evolve pokemon in gyms\n            IEnumerable<PokemonId> pokemonIds = filter as PokemonId[] ?? filter.ToArray();\n            if (pokemonIds.Any())\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => (pokemonIds.Contains(p.PokemonId)) ||\n                             (_logicSettings.EvolveAllPokemonAboveIv &&\n                              (PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue)));\n            }\n            else if (_logicSettings.EvolveAllPokemonAboveIv)\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue);\n            }\n            var pokemons = myPokemon.ToList();\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var pokemonToEvolve = new List<PokemonData>();\n            foreach (var pokemon in pokemons)\n            {\n                var settings = pokemonSettings.SingleOrDefault(x => x.PokemonId == pokemon.PokemonId);\n                var familyCandy = pokemonFamilies.SingleOrDefault(x => settings.FamilyId == x.FamilyId);\n\n                //Don't evolve if we can't evolve it\n                if (settings.EvolutionIds.Count == 0)\n                    continue;\n                //DO NOT CHANGE! TESTED AND WORKS\n                var pokemonCandyNeededAlready =\n                    (pokemonToEvolve.Count(\n                        p => pokemonSettings.Single(x => x.PokemonId == p.PokemonId).FamilyId == settings.FamilyId) + 1) *\n                    settings.CandyToEvolve;\n\n                if (familyCandy.Candy_ >= pokemonCandyNeededAlready)\n                {\n                    pokemonToEvolve.Add(pokemon);\n                }\n            }\n\n            return pokemonToEvolve;\n        }\n\n        public async Task<LevelUpRewardsResponse> GetLevelUpRewards(int level)\n        {\n            if (_level == 0 || level > _level)\n            {\n                _level = level;\n                return await _client.Player.GetLevelUpRewards(level);\n            }\n\n            return new LevelUpRewardsResponse();\n        }\n\n        public async Task<List<PokemonData>> GetPokemonToUpgrade()\n        {\n            var upgradePokemon = new List<PokemonData>();\n\n            if (!_logicSettings.AutomaticallyLevelUpPokemon)\n                return upgradePokemon;\n\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty);\n\n            IEnumerable<PokemonData> highestPokemonForUpgrade = (_logicSettings.UpgradePokemonMinimumStatsOperator.ToLower().Equals(\"and\")) ?\n                myPokemon.Where(\n                        p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum &&\n                            PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList() :\n                myPokemon.Where(\n                    p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum ||\n                        PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList();\n\n            return upgradePokemon = (_logicSettings.LevelUpByCPorIv.ToLower().Equals(\"iv\")) ?\n                    highestPokemonForUpgrade.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).ToList() :\n                    highestPokemonForUpgrade.OrderByDescending(p => p.Cp).ToList();\n        }\n\n        public TransferFilter GetPokemonTransferFilter(PokemonId pokemon)\n        {\n            if (_logicSettings.PokemonsTransferFilter != null &&\n                _logicSettings.PokemonsTransferFilter.ContainsKey(pokemon))\n            {\n                return _logicSettings.PokemonsTransferFilter[pokemon];\n            }\n            return new TransferFilter(_logicSettings.KeepMinCp, _logicSettings.KeepMinLvl, _logicSettings.UseKeepMinLvl, _logicSettings.KeepMinIvPercentage,\n                _logicSettings.KeepMinOperator, _logicSettings.KeepMinDuplicatePokemon);\n        }\n\n        public async Task<GetInventoryResponse> RefreshCachedInventory()\n        {\n            var now = DateTime.UtcNow;\n            var ss = new SemaphoreSlim(10);\n\n            await ss.WaitAsync();\n            try\n            {\n                _lastRefresh = now;\n                _cachedInventory = await _client.Inventory.GetInventory();\n                return _cachedInventory;\n            }\n            finally\n            {\n                ss.Release();\n            }\n        }\n\n        public async Task<UpgradePokemonResponse> UpgradePokemon(ulong pokemonid)\n        {\n            var upgradeResult = await _client.Inventory.UpgradePokemon(pokemonid);\n            return upgradeResult;\n        }\n    }\n}\n","children":[{"body_character":"namespace PoGo.NecroBot.Logic\n{amespace PoGo.NecroBot.Logic\n{\n\n    public class Inventory\n    {\n        private readonly Client _client;\n        private readonly ILogicSettings _logicSettings;\n        private GetPlayerResponse _player = null;\n        private int _level = 0;\n        private DownloadItemTemplatesResponse _templates;\n        private IEnumerable<PokemonSettings> _pokemonSettings;\n\n        private readonly List<ItemId> _revives = new List<ItemId> { ItemId.ItemRevive, ItemId.ItemMaxRevive };\n        private GetInventoryResponse _cachedInventory;\n        private DateTime _lastRefresh;\n\n        public Inventory(Client client, ILogicSettings logicSettings)\n        {\n            _client = client;\n            _logicSettings = logicSettings;\n        }\n\n        private readonly List<ItemId> _pokeballs = new List<ItemId>\n        {\n            ItemId.ItemPokeBall,\n            ItemId.ItemGreatBall,\n            ItemId.ItemUltraBall,\n            ItemId.ItemMasterBall\n        };\n\n        private readonly List<ItemId> _potions = new List<ItemId>\n        {\n            ItemId.ItemPotion,\n            ItemId.ItemSuperPotion,\n            ItemId.ItemHyperPotion,\n            ItemId.ItemMaxPotion\n        };\n\n        public async Task DeletePokemonFromInvById(ulong id)\n        {\n            var inventory = await GetCachedInventory();\n            var pokemon =\n                inventory.InventoryDelta.InventoryItems.FirstOrDefault(\n                    i => i.InventoryItemData.PokemonData != null && i.InventoryItemData.PokemonData.Id == id);\n            if (pokemon != null)\n                inventory.InventoryDelta.InventoryItems.Remove(pokemon);\n        }\n\n        public async Task<LevelUpRewardsResponse> GetLevelUpRewards(Inventory inv )\n        {\n            return await GetLevelUpRewards(inv.GetPlayerStats().Result.FirstOrDefault().Level);\n        }\n\n        private async Task<GetInventoryResponse> GetCachedInventory()\n        {\n            if (_player==null) GetPlayerData();\n            var now = DateTime.UtcNow;\n\n            if (_cachedInventory!=null && _lastRefresh.AddSeconds(30).Ticks > now.Ticks)\n                return _cachedInventory;\n\n            return await RefreshCachedInventory();\n        }\n\n\n        public async Task<IEnumerable<PokemonData>> GetDuplicatePokemonToTransfer(\n                IEnumerable<PokemonId> pokemonsNotToTransfer, IEnumerable<PokemonId> pokemonsToEvolve,\n                bool keepPokemonsThatCanEvolve = false, bool prioritizeIVoverCp = false\n             )\n        {\n            var myPokemon = await GetPokemons();\n\n            var myPokemonList = myPokemon.ToList();\n\n            var pokemonToTransfer = myPokemonList.Where(p => !pokemonsNotToTransfer.Contains(p.PokemonId) && p.DeployedFortId == string.Empty && p.Favorite == 0).ToList();\n\n            try\n            {\n                pokemonToTransfer =\n                    pokemonToTransfer.Where(\n                        p =>\n                        {\n                            var pokemonTransferFilter = GetPokemonTransferFilter(p.PokemonId);\n\n                            return !pokemonTransferFilter.MovesOperator.BoolFunc(\n                                        pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.MovesOperator.InverseBool(pokemonTransferFilter.Moves.Count > 0),\n                                                pokemonTransferFilter.Moves.Any(moveset =>\n                                                    pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                        pokemonTransferFilter.MovesOperator.InverseBool(moveset.Count > 0),\n                                                        moveset.Intersect(new[] { p.Move1, p.Move2 }).Count() == Math.Max(Math.Min(moveset.Count, 2),0)))),\n                                        pokemonTransferFilter.KeepMinOperator.BoolFunc(\n                                            p.Cp >= pokemonTransferFilter.KeepMinCp,\n                                            PokemonInfo.CalculatePokemonPerfection(p) >= pokemonTransferFilter.KeepMinIvPercentage,\n                                            pokemonTransferFilter.KeepMinOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.KeepMinOperator.InverseBool(pokemonTransferFilter.UseKeepMinLvl),\n                                                PokemonInfo.GetLevel(p) >= pokemonTransferFilter.KeepMinLvl)));\n\n                        }).ToList();\n            }\n            catch (Exception e)\n            {\n                throw e;\n            }\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var results = new List<PokemonData>();\n\n            foreach (var pokemonGroupToTransfer in pokemonToTransfer.GroupBy(p => p.PokemonId).ToList())\n            {\n                var amountToKeepInStorage = Math.Max(GetPokemonTransferFilter(pokemonGroupToTransfer.Key).KeepMinDuplicatePokemon, 0);\n\n                var inStorage = myPokemonList.Count(data => data.PokemonId == pokemonGroupToTransfer.Key);\n                var needToRemove = inStorage - amountToKeepInStorage;\n\n                if (needToRemove <= 0)\n                    continue;\n\n                var weakPokemonCount = pokemonGroupToTransfer.Count();\n                var canBeRemoved = Math.Min(needToRemove, weakPokemonCount);\n\n\n                var settings = pokemonSettings.Single(x => x.PokemonId == pokemonGroupToTransfer.Key);\n                //Lets calc new canBeRemoved pokemons according to transferring some of them for +1 candy or to evolving for +1 candy\n                if (keepPokemonsThatCanEvolve &&\n                    pokemonsToEvolve.Contains(pokemonGroupToTransfer.Key) &&\n                    settings.CandyToEvolve > 0 &&\n                    settings.EvolutionIds.Count != 0)\n                {\n                    var familyCandy = pokemonFamilies.Single(x => settings.FamilyId == x.FamilyId);\n\n                    // its an solution in fixed numbers of equations with two variables\n                    // (N = X + Y, X + C + Y >= Y * E) -> X >= (N * (E - 1) - C) / E\n                    // where N - current canBeRemoved,  X - new canBeRemoved, Y - possible to keep more, E - CandyToEvolve, C - candy amount\n                    canBeRemoved = (int)Math.Ceiling((double)((settings.CandyToEvolve - 1) * canBeRemoved - familyCandy.Candy_) / settings.CandyToEvolve);\n                }\n\n                if (canBeRemoved <= 0)\n                    continue;\n\n                if (prioritizeIVoverCp)\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(PokemonInfo.CalculatePokemonPerfection)\n                        .ThenBy(n => n.Cp)\n                        .Take(canBeRemoved));\n                }\n                else\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(x => x.Cp)\n                        .ThenBy(PokemonInfo.CalculatePokemonPerfection)\n                        .Take(canBeRemoved));\n                }\n            }\n\n            #region For testing\n/*\n            results.ForEach(data =>\n            {\n                var allpokemonoftype = myPokemonList.Where(x => x.PokemonId == data.PokemonId);\n                var bestPokemonOfType =\n                    (_logicSettings.PrioritizeIvOverCp\n                         ? allpokemonoftype\n                        .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                        .FirstOrDefault()\n                         : allpokemonoftype\n                        .OrderByDescending(x => x.Cp)\n                        .FirstOrDefault())\n                    ?? data;\n\n                var perfection = PokemonInfo.CalculatePokemonPerfection(data);\n                var cp = data.Cp;\n\n                var bestPerfection = PokemonInfo.CalculatePokemonPerfection(bestPokemonOfType);\n                var bestCp = bestPokemonOfType.Cp;\n            });\n*/\n            #endregion\n\n            return results;\n        }\n\n        public async Task<IEnumerable<EggIncubator>> GetEggIncubators()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems\n                    .Where(x => x.InventoryItemData.EggIncubators != null)\n                    .SelectMany(i => i.InventoryItemData.EggIncubators.EggIncubator)\n                    .Where(i => i != null);\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetEggs()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.IsEgg);\n        }\n\n        public async Task<PokemonData> GetHighestPokemonOfTypeByCp(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(x => x.Cp)\n                .FirstOrDefault();\n        }\n\n        public int GetStarDust()\n        {\n            GetPlayerData();\n            return _player.PlayerData.Currencies[1].Amount;\n        }\n\n        public async void GetPlayerData()\n        {\n            _player = await _client.Player.GetPlayer();\n        }\n\n        public async Task<PokemonData> GetHighestPokemonOfTypeByIv(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                .FirstOrDefault();\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetHighestsCp(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(x => x.Cp).ThenBy(n => n.StaminaMax).Take(limit);\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetHighestsPerfect(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).Take(limit);\n        }\n\n        public async Task<int> GetItemAmountByType(ItemId type)\n        {\n            var pokeballs = await GetItems();\n            return pokeballs.FirstOrDefault(i => i.ItemId == type)?.Count ?? 0;\n        }\n\n        public async Task<IEnumerable<ItemData>> GetItems()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.Item)\n                .Where(p => p != null);\n        }\n\n        public async Task<int> GetTotalItemCount()\n        {\n            var myItems = (await GetItems()).ToList();\n            int myItemCount = 0;\n            foreach (var myItem in myItems) myItemCount += myItem.Count;\n            return myItemCount;\n        }\n\n        public async Task<IEnumerable<ItemData>> GetItemsToRecycle(ISession session)\n        {\n            var itemsToRecycle = new List<ItemData>();\n            var myItems = (await GetItems()).ToList();\n            if (myItems == null)\n                return itemsToRecycle;\n\n            var otherItemsToRecycle = myItems\n                .Where(x => _logicSettings.ItemRecycleFilter.Any(f => f.Key == x.ItemId && x.Count > f.Value))\n                .Select(\n                    x =>\n                        new ItemData\n                        {\n                            ItemId = x.ItemId,\n                            Count = x.Count - _logicSettings.ItemRecycleFilter.Single(f => f.Key == x.ItemId).Value,\n                            Unseen = x.Unseen\n                        });\n\n            itemsToRecycle.AddRange(otherItemsToRecycle);\n\n            return itemsToRecycle;\n        }\n\n        public double GetPerfect(PokemonData poke)\n        {\n            var result = PokemonInfo.CalculatePokemonPerfection(poke);\n            return result;\n        }\n\n        public async Task<IEnumerable<PlayerStats>> GetPlayerStats()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.PlayerStats)\n                .Where(p => p != null);\n        }\n\n        public async Task<UseItemXpBoostResponse> UseLuckyEggConstantly()\n        {\n            var UseLuckyEgg = await _client.Inventory.UseItemXpBoost();\n            return UseLuckyEgg;\n        }\n        public async Task<UseIncenseResponse> UseIncenseConstantly()\n        {\n            var UseIncense = await _client.Inventory.UseIncense(ItemId.ItemIncenseOrdinary);\n            return UseIncense;\n        }\n\n        public async Task<List<InventoryItem>> GetPokeDexItems()\n        {\n            List<InventoryItem> PokeDex = new List<InventoryItem>();\n            var inventory = await _client.Inventory.GetInventory();\n\n            return (from items in inventory.InventoryDelta.InventoryItems\n                   where items.InventoryItemData?.PokedexEntry != null\n                   select items).ToList();\n        }\n\n        public async Task<List<Candy>> GetPokemonFamilies(int retries=0)\n        {\n            if (retries > 3) return null;\n\n            IEnumerable<Candy> families = null;\n            var inventory = await GetCachedInventory();\n            if ( inventory == null || inventory.InventoryDelta==null || inventory.InventoryDelta.InventoryItems==null)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                inventory = await GetCachedInventory();\n            }\n\n            try {\n                families = from item in inventory.InventoryDelta.InventoryItems\n                            where item.InventoryItemData?.Candy != null\n                            where item.InventoryItemData?.Candy.FamilyId != PokemonFamilyId.FamilyUnset\n                            group item by item.InventoryItemData?.Candy.FamilyId into family\n                            select new Candy\n                            {\n                                FamilyId = family.First().InventoryItemData.Candy.FamilyId,\n                                Candy_ = family.First().InventoryItemData.Candy.Candy_\n                            };\n            }\n            catch (NullReferenceException)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                return await GetPokemonFamilies(++retries);\n            }\n\n            return families.ToList();\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetPokemons()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.PokemonId > 0);\n        }\n        public async Task<IEnumerable<PokemonData>> GetFaveriotPokemon()\n        {\n            var inventory = await GetPokemons();\n            return\n                inventory.Where(i => i.Favorite == 1);\n\n        }\n\n        public async Task<IEnumerable<PokemonSettings>> GetPokemonSettings()\n        {\n            if (_templates == null || _pokemonSettings == null)\n            {\n                _templates = await _client.Download.GetItemTemplates();\n                _pokemonSettings = _templates.ItemTemplates.Select(i => i.PokemonSettings).Where(p => p != null && p.FamilyId != PokemonFamilyId.FamilyUnset);\n            }\n\n            return _pokemonSettings;\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetPokemonToEvolve(IEnumerable<PokemonId> filter = null)\n        {\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty).OrderByDescending(p => p.Cp);\n            //Don't evolve pokemon in gyms\n            IEnumerable<PokemonId> pokemonIds = filter as PokemonId[] ?? filter.ToArray();\n            if (pokemonIds.Any())\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => (pokemonIds.Contains(p.PokemonId)) ||\n                             (_logicSettings.EvolveAllPokemonAboveIv &&\n                              (PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue)));\n            }\n            else if (_logicSettings.EvolveAllPokemonAboveIv)\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue);\n            }\n            var pokemons = myPokemon.ToList();\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var pokemonToEvolve = new List<PokemonData>();\n            foreach (var pokemon in pokemons)\n            {\n                var settings = pokemonSettings.SingleOrDefault(x => x.PokemonId == pokemon.PokemonId);\n                var familyCandy = pokemonFamilies.SingleOrDefault(x => settings.FamilyId == x.FamilyId);\n\n                //Don't evolve if we can't evolve it\n                if (settings.EvolutionIds.Count == 0)\n                    continue;\n                //DO NOT CHANGE! TESTED AND WORKS\n                var pokemonCandyNeededAlready =\n                    (pokemonToEvolve.Count(\n                        p => pokemonSettings.Single(x => x.PokemonId == p.PokemonId).FamilyId == settings.FamilyId) + 1) *\n                    settings.CandyToEvolve;\n\n                if (familyCandy.Candy_ >= pokemonCandyNeededAlready)\n                {\n                    pokemonToEvolve.Add(pokemon);\n                }\n            }\n\n            return pokemonToEvolve;\n        }\n\n        public async Task<LevelUpRewardsResponse> GetLevelUpRewards(int level)\n        {\n            if (_level == 0 || level > _level)\n            {\n                _level = level;\n                return await _client.Player.GetLevelUpRewards(level);\n            }\n\n            return new LevelUpRewardsResponse();\n        }\n\n        public async Task<List<PokemonData>> GetPokemonToUpgrade()\n        {\n            var upgradePokemon = new List<PokemonData>();\n\n            if (!_logicSettings.AutomaticallyLevelUpPokemon)\n                return upgradePokemon;\n\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty);\n\n            IEnumerable<PokemonData> highestPokemonForUpgrade = (_logicSettings.UpgradePokemonMinimumStatsOperator.ToLower().Equals(\"and)) ?\n                myPokemon.Where(\n                        p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum &&\n                            PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList() :\n                myPokemon.Where(\n                    p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum ||\n                        PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList();\n\n            return upgradePokemon = (_logicSettings.LevelUpByCPorIv.ToLower().Equals(\"iv)) ?\n                    highestPokemonForUpgrade.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).ToList() :\n                    highestPokemonForUpgrade.OrderByDescending(p => p.Cp).ToList();\n        }\n\n        public TransferFilter GetPokemonTransferFilter(PokemonId pokemon)\n        {\n            if (_logicSettings.PokemonsTransferFilter != null &&\n                _logicSettings.PokemonsTransferFilter.ContainsKey(pokemon))\n            {\n                return _logicSettings.PokemonsTransferFilter[pokemon];\n            }\n            return new TransferFilter(_logicSettings.KeepMinCp, _logicSettings.KeepMinLvl, _logicSettings.UseKeepMinLvl, _logicSettings.KeepMinIvPercentage,\n                _logicSettings.KeepMinOperator, _logicSettings.KeepMinDuplicatePokemon);\n        }\n\n        public async Task<GetInventoryResponse> RefreshCachedInventory()\n        {\n            var now = DateTime.UtcNow;\n            var ss = new SemaphoreSlim(10);\n\n            await ss.WaitAsync();\n            try\n            {\n                _lastRefresh = now;\n                _cachedInventory = await _client.Inventory.GetInventory();\n                return _cachedInventory;\n            }\n            finally\n            {\n                ss.Release();\n            }\n        }\n\n        public async Task<UpgradePokemonResponse> UpgradePokemon(ulong pokemonid)\n        {\n            var upgradeResult = await _client.Inventory.UpgradePokemon(pokemonid);\n            return upgradeResult;\n        }\n    }\n}","children":[{"body_character":"public class Inventory\n    {ublic class Inventory\n    {\n        private readonly Client _client;\n        private readonly ILogicSettings _logicSettings;\n        private GetPlayerResponse _player = null;\n        private int _level = 0;\n        private DownloadItemTemplatesResponse _templates;\n        private IEnumerable<PokemonSettings> _pokemonSettings;\n\n        private readonly List<ItemId> _revives = new List<ItemId> { ItemId.ItemRevive, ItemId.ItemMaxRevive };\n        private GetInventoryResponse _cachedInventory;\n        private DateTime _lastRefresh;\n\n        public Inventory(Client client, ILogicSettings logicSettings)\n        {\n            _client = client;\n            _logicSettings = logicSettings;\n        }\n\n        private readonly List<ItemId> _pokeballs = new List<ItemId>\n        {\n            ItemId.ItemPokeBall,\n            ItemId.ItemGreatBall,\n            ItemId.ItemUltraBall,\n            ItemId.ItemMasterBall\n        };\n\n        private readonly List<ItemId> _potions = new List<ItemId>\n        {\n            ItemId.ItemPotion,\n            ItemId.ItemSuperPotion,\n            ItemId.ItemHyperPotion,\n            ItemId.ItemMaxPotion\n        };\n\n        public async Task DeletePokemonFromInvById(ulong id)\n        {\n            var inventory = await GetCachedInventory();\n            var pokemon =\n                inventory.InventoryDelta.InventoryItems.FirstOrDefault(\n                    i => i.InventoryItemData.PokemonData != null && i.InventoryItemData.PokemonData.Id == id);\n            if (pokemon != null)\n                inventory.InventoryDelta.InventoryItems.Remove(pokemon);\n        }\n\n        public async Task<LevelUpRewardsResponse> GetLevelUpRewards(Inventory inv )\n        {\n            return await GetLevelUpRewards(inv.GetPlayerStats().Result.FirstOrDefault().Level);\n        }\n\n        private async Task<GetInventoryResponse> GetCachedInventory()\n        {\n            if (_player==null) GetPlayerData();\n            var now = DateTime.UtcNow;\n\n            if (_cachedInventory!=null && _lastRefresh.AddSeconds(30).Ticks > now.Ticks)\n                return _cachedInventory;\n\n            return await RefreshCachedInventory();\n        }\n\n\n        public async Task<IEnumerable<PokemonData>> GetDuplicatePokemonToTransfer(\n                IEnumerable<PokemonId> pokemonsNotToTransfer, IEnumerable<PokemonId> pokemonsToEvolve,\n                bool keepPokemonsThatCanEvolve = false, bool prioritizeIVoverCp = false\n             )\n        {\n            var myPokemon = await GetPokemons();\n\n            var myPokemonList = myPokemon.ToList();\n\n            var pokemonToTransfer = myPokemonList.Where(p => !pokemonsNotToTransfer.Contains(p.PokemonId) && p.DeployedFortId == string.Empty && p.Favorite == 0).ToList();\n\n            try\n            {\n                pokemonToTransfer =\n                    pokemonToTransfer.Where(\n                        p =>\n                        {\n                            var pokemonTransferFilter = GetPokemonTransferFilter(p.PokemonId);\n\n                            return !pokemonTransferFilter.MovesOperator.BoolFunc(\n                                        pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.MovesOperator.InverseBool(pokemonTransferFilter.Moves.Count > 0),\n                                                pokemonTransferFilter.Moves.Any(moveset =>\n                                                    pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                        pokemonTransferFilter.MovesOperator.InverseBool(moveset.Count > 0),\n                                                        moveset.Intersect(new[] { p.Move1, p.Move2 }).Count() == Math.Max(Math.Min(moveset.Count, 2),0)))),\n                                        pokemonTransferFilter.KeepMinOperator.BoolFunc(\n                                            p.Cp >= pokemonTransferFilter.KeepMinCp,\n                                            PokemonInfo.CalculatePokemonPerfection(p) >= pokemonTransferFilter.KeepMinIvPercentage,\n                                            pokemonTransferFilter.KeepMinOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.KeepMinOperator.InverseBool(pokemonTransferFilter.UseKeepMinLvl),\n                                                PokemonInfo.GetLevel(p) >= pokemonTransferFilter.KeepMinLvl)));\n\n                        }).ToList();\n            }\n            catch (Exception e)\n            {\n                throw e;\n            }\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var results = new List<PokemonData>();\n\n            foreach (var pokemonGroupToTransfer in pokemonToTransfer.GroupBy(p => p.PokemonId).ToList())\n            {\n                var amountToKeepInStorage = Math.Max(GetPokemonTransferFilter(pokemonGroupToTransfer.Key).KeepMinDuplicatePokemon, 0);\n\n                var inStorage = myPokemonList.Count(data => data.PokemonId == pokemonGroupToTransfer.Key);\n                var needToRemove = inStorage - amountToKeepInStorage;\n\n                if (needToRemove <= 0)\n                    continue;\n\n                var weakPokemonCount = pokemonGroupToTransfer.Count();\n                var canBeRemoved = Math.Min(needToRemove, weakPokemonCount);\n\n\n                var settings = pokemonSettings.Single(x => x.PokemonId == pokemonGroupToTransfer.Key);\n                //Lets calc new canBeRemoved pokemons according to transferring some of them for +1 candy or to evolving for +1 candy\n                if (keepPokemonsThatCanEvolve &&\n                    pokemonsToEvolve.Contains(pokemonGroupToTransfer.Key) &&\n                    settings.CandyToEvolve > 0 &&\n                    settings.EvolutionIds.Count != 0)\n                {\n                    var familyCandy = pokemonFamilies.Single(x => settings.FamilyId == x.FamilyId);\n\n                    // its an solution in fixed numbers of equations with two variables\n                    // (N = X + Y, X + C + Y >= Y * E) -> X >= (N * (E - 1) - C) / E\n                    // where N - current canBeRemoved,  X - new canBeRemoved, Y - possible to keep more, E - CandyToEvolve, C - candy amount\n                    canBeRemoved = (int)Math.Ceiling((double)((settings.CandyToEvolve - 1) * canBeRemoved - familyCandy.Candy_) / settings.CandyToEvolve);\n                }\n\n                if (canBeRemoved <= 0)\n                    continue;\n\n                if (prioritizeIVoverCp)\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(PokemonInfo.CalculatePokemonPerfection)\n                        .ThenBy(n => n.Cp)\n                        .Take(canBeRemoved));\n                }\n                else\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(x => x.Cp)\n                        .ThenBy(PokemonInfo.CalculatePokemonPerfection)\n                        .Take(canBeRemoved));\n                }\n            }\n\n            #region For testing\n/*\n            results.ForEach(data =>\n            {\n                var allpokemonoftype = myPokemonList.Where(x => x.PokemonId == data.PokemonId);\n                var bestPokemonOfType =\n                    (_logicSettings.PrioritizeIvOverCp\n                         ? allpokemonoftype\n                        .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                        .FirstOrDefault()\n                         : allpokemonoftype\n                        .OrderByDescending(x => x.Cp)\n                        .FirstOrDefault())\n                    ?? data;\n\n                var perfection = PokemonInfo.CalculatePokemonPerfection(data);\n                var cp = data.Cp;\n\n                var bestPerfection = PokemonInfo.CalculatePokemonPerfection(bestPokemonOfType);\n                var bestCp = bestPokemonOfType.Cp;\n            });\n*/\n            #endregion\n\n            return results;\n        }\n\n        public async Task<IEnumerable<EggIncubator>> GetEggIncubators()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems\n                    .Where(x => x.InventoryItemData.EggIncubators != null)\n                    .SelectMany(i => i.InventoryItemData.EggIncubators.EggIncubator)\n                    .Where(i => i != null);\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetEggs()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.IsEgg);\n        }\n\n        public async Task<PokemonData> GetHighestPokemonOfTypeByCp(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(x => x.Cp)\n                .FirstOrDefault();\n        }\n\n        public int GetStarDust()\n        {\n            GetPlayerData();\n            return _player.PlayerData.Currencies[1].Amount;\n        }\n\n        public async void GetPlayerData()\n        {\n            _player = await _client.Player.GetPlayer();\n        }\n\n        public async Task<PokemonData> GetHighestPokemonOfTypeByIv(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                .FirstOrDefault();\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetHighestsCp(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(x => x.Cp).ThenBy(n => n.StaminaMax).Take(limit);\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetHighestsPerfect(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).Take(limit);\n        }\n\n        public async Task<int> GetItemAmountByType(ItemId type)\n        {\n            var pokeballs = await GetItems();\n            return pokeballs.FirstOrDefault(i => i.ItemId == type)?.Count ?? 0;\n        }\n\n        public async Task<IEnumerable<ItemData>> GetItems()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.Item)\n                .Where(p => p != null);\n        }\n\n        public async Task<int> GetTotalItemCount()\n        {\n            var myItems = (await GetItems()).ToList();\n            int myItemCount = 0;\n            foreach (var myItem in myItems) myItemCount += myItem.Count;\n            return myItemCount;\n        }\n\n        public async Task<IEnumerable<ItemData>> GetItemsToRecycle(ISession session)\n        {\n            var itemsToRecycle = new List<ItemData>();\n            var myItems = (await GetItems()).ToList();\n            if (myItems == null)\n                return itemsToRecycle;\n\n            var otherItemsToRecycle = myItems\n                .Where(x => _logicSettings.ItemRecycleFilter.Any(f => f.Key == x.ItemId && x.Count > f.Value))\n                .Select(\n                    x =>\n                        new ItemData\n                        {\n                            ItemId = x.ItemId,\n                            Count = x.Count - _logicSettings.ItemRecycleFilter.Single(f => f.Key == x.ItemId).Value,\n                            Unseen = x.Unseen\n                        });\n\n            itemsToRecycle.AddRange(otherItemsToRecycle);\n\n            return itemsToRecycle;\n        }\n\n        public double GetPerfect(PokemonData poke)\n        {\n            var result = PokemonInfo.CalculatePokemonPerfection(poke);\n            return result;\n        }\n\n        public async Task<IEnumerable<PlayerStats>> GetPlayerStats()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.PlayerStats)\n                .Where(p => p != null);\n        }\n\n        public async Task<UseItemXpBoostResponse> UseLuckyEggConstantly()\n        {\n            var UseLuckyEgg = await _client.Inventory.UseItemXpBoost();\n            return UseLuckyEgg;\n        }\n        public async Task<UseIncenseResponse> UseIncenseConstantly()\n        {\n            var UseIncense = await _client.Inventory.UseIncense(ItemId.ItemIncenseOrdinary);\n            return UseIncense;\n        }\n\n        public async Task<List<InventoryItem>> GetPokeDexItems()\n        {\n            List<InventoryItem> PokeDex = new List<InventoryItem>();\n            var inventory = await _client.Inventory.GetInventory();\n\n            return (from items in inventory.InventoryDelta.InventoryItems\n                   where items.InventoryItemData?.PokedexEntry != null\n                   select items).ToList();\n        }\n\n        public async Task<List<Candy>> GetPokemonFamilies(int retries=0)\n        {\n            if (retries > 3) return null;\n\n            IEnumerable<Candy> families = null;\n            var inventory = await GetCachedInventory();\n            if ( inventory == null || inventory.InventoryDelta==null || inventory.InventoryDelta.InventoryItems==null)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                inventory = await GetCachedInventory();\n            }\n\n            try {\n                families = from item in inventory.InventoryDelta.InventoryItems\n                            where item.InventoryItemData?.Candy != null\n                            where item.InventoryItemData?.Candy.FamilyId != PokemonFamilyId.FamilyUnset\n                            group item by item.InventoryItemData?.Candy.FamilyId into family\n                            select new Candy\n                            {\n                                FamilyId = family.First().InventoryItemData.Candy.FamilyId,\n                                Candy_ = family.First().InventoryItemData.Candy.Candy_\n                            };\n            }\n            catch (NullReferenceException)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                return await GetPokemonFamilies(++retries);\n            }\n\n            return families.ToList();\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetPokemons()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.PokemonId > 0);\n        }\n        public async Task<IEnumerable<PokemonData>> GetFaveriotPokemon()\n        {\n            var inventory = await GetPokemons();\n            return\n                inventory.Where(i => i.Favorite == 1);\n\n        }\n\n        public async Task<IEnumerable<PokemonSettings>> GetPokemonSettings()\n        {\n            if (_templates == null || _pokemonSettings == null)\n            {\n                _templates = await _client.Download.GetItemTemplates();\n                _pokemonSettings = _templates.ItemTemplates.Select(i => i.PokemonSettings).Where(p => p != null && p.FamilyId != PokemonFamilyId.FamilyUnset);\n            }\n\n            return _pokemonSettings;\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetPokemonToEvolve(IEnumerable<PokemonId> filter = null)\n        {\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty).OrderByDescending(p => p.Cp);\n            //Don't evolve pokemon in gyms\n            IEnumerable<PokemonId> pokemonIds = filter as PokemonId[] ?? filter.ToArray();\n            if (pokemonIds.Any())\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => (pokemonIds.Contains(p.PokemonId)) ||\n                             (_logicSettings.EvolveAllPokemonAboveIv &&\n                              (PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue)));\n            }\n            else if (_logicSettings.EvolveAllPokemonAboveIv)\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue);\n            }\n            var pokemons = myPokemon.ToList();\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var pokemonToEvolve = new List<PokemonData>();\n            foreach (var pokemon in pokemons)\n            {\n                var settings = pokemonSettings.SingleOrDefault(x => x.PokemonId == pokemon.PokemonId);\n                var familyCandy = pokemonFamilies.SingleOrDefault(x => settings.FamilyId == x.FamilyId);\n\n                //Don't evolve if we can't evolve it\n                if (settings.EvolutionIds.Count == 0)\n                    continue;\n                //DO NOT CHANGE! TESTED AND WORKS\n                var pokemonCandyNeededAlready =\n                    (pokemonToEvolve.Count(\n                        p => pokemonSettings.Single(x => x.PokemonId == p.PokemonId).FamilyId == settings.FamilyId) + 1) *\n                    settings.CandyToEvolve;\n\n                if (familyCandy.Candy_ >= pokemonCandyNeededAlready)\n                {\n                    pokemonToEvolve.Add(pokemon);\n                }\n            }\n\n            return pokemonToEvolve;\n        }\n\n        public async Task<LevelUpRewardsResponse> GetLevelUpRewards(int level)\n        {\n            if (_level == 0 || level > _level)\n            {\n                _level = level;\n                return await _client.Player.GetLevelUpRewards(level);\n            }\n\n            return new LevelUpRewardsResponse();\n        }\n\n        public async Task<List<PokemonData>> GetPokemonToUpgrade()\n        {\n            var upgradePokemon = new List<PokemonData>();\n\n            if (!_logicSettings.AutomaticallyLevelUpPokemon)\n                return upgradePokemon;\n\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty);\n\n            IEnumerable<PokemonData> highestPokemonForUpgrade = (_logicSettings.UpgradePokemonMinimumStatsOperator.ToLower().Equals(\"and)) ?\n                myPokemon.Where(\n                        p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum &&\n                            PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList() :\n                myPokemon.Where(\n                    p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum ||\n                        PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList();\n\n            return upgradePokemon = (_logicSettings.LevelUpByCPorIv.ToLower().Equals(\"iv)) ?\n                    highestPokemonForUpgrade.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).ToList() :\n                    highestPokemonForUpgrade.OrderByDescending(p => p.Cp).ToList();\n        }\n\n        public TransferFilter GetPokemonTransferFilter(PokemonId pokemon)\n        {\n            if (_logicSettings.PokemonsTransferFilter != null &&\n                _logicSettings.PokemonsTransferFilter.ContainsKey(pokemon))\n            {\n                return _logicSettings.PokemonsTransferFilter[pokemon];\n            }\n            return new TransferFilter(_logicSettings.KeepMinCp, _logicSettings.KeepMinLvl, _logicSettings.UseKeepMinLvl, _logicSettings.KeepMinIvPercentage,\n                _logicSettings.KeepMinOperator, _logicSettings.KeepMinDuplicatePokemon);\n        }\n\n        public async Task<GetInventoryResponse> RefreshCachedInventory()\n        {\n            var now = DateTime.UtcNow;\n            var ss = new SemaphoreSlim(10);\n\n            await ss.WaitAsync();\n            try\n            {\n                _lastRefresh = now;\n                _cachedInventory = await _client.Inventory.GetInventory();\n                return _cachedInventory;\n            }\n            finally\n            {\n                ss.Release();\n            }\n        }\n\n        public async Task<UpgradePokemonResponse> UpgradePokemon(ulong pokemonid)\n        {\n            var upgradeResult = await _client.Inventory.UpgradePokemon(pokemonid);\n            return upgradeResult;\n        }\n    }","children":[{"body_character":"_client;client;","children":[],"id":"2","children_ids":[],"type":"attribute","name":"_client","body":"_client","line_start":29,"line_end":29,"line_preserve_start_whitespaces":"           ","line_preserve_end_whitespaces":"","start_statement":"_client;","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_\\.]+)\\s*;/","start_statement_matched":"_client;","start_statement_line_start":29,"start_statement_line_end":29,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":29,"end_statement_line_end":29,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":693,"start_statement_char_start":693,"start_statement_char_end":701,"start_statement_char_in_start":0,"start_statement_char_in_end":8,"char_end":700,"end_statement_char_start":700,"end_statement_char_end":700,"end_statement_char_in_start":7,"end_statement_char_in_end":7},{"body_character":"_logicSettings;logicSettings;","children":[],"id":"3","children_ids":[],"type":"attribute","name":"_logicSettings","body":"_logicSettings","line_start":30,"line_end":30,"line_preserve_start_whitespaces":"           ","line_preserve_end_whitespaces":"","start_statement":"_logicSettings;","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_\\.]+)\\s*;/","start_statement_matched":"_logicSettings;","start_statement_line_start":30,"start_statement_line_end":30,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":30,"end_statement_line_end":30,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":742,"start_statement_char_start":742,"start_statement_char_end":757,"start_statement_char_in_start":0,"start_statement_char_in_end":15,"char_end":756,"end_statement_char_start":756,"end_statement_char_end":756,"end_statement_char_in_start":14,"end_statement_char_in_end":14},{"body_character":"_player =player = null;","children":[],"id":"4","children_ids":[],"type":"attribute-assignment","name":"_player","body":"_player = null;","line_start":31,"line_end":31,"line_preserve_start_whitespaces":"          ","line_preserve_end_whitespaces":"","start_statement":"_player =","end_statement":";","start_statement_regexp":"/([a-zA-Z0-9_\\.]+)\\s*=/","start_statement_matched":"_player =","start_statement_line_start":31,"start_statement_line_end":31,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/;/","end_statement_matched":";","end_statement_line_start":31,"end_statement_line_end":31,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":792,"start_statement_char_start":792,"start_statement_char_end":801,"start_statement_char_in_start":0,"start_statement_char_in_end":9,"char_end":807,"end_statement_char_start":806,"end_statement_char_end":807,"end_statement_char_in_start":14,"end_statement_char_in_end":15},{"body_character":"_level =level = 0;","children":[],"id":"5","children_ids":[],"type":"attribute-assignment","name":"_level","body":"_level = 0;","line_start":32,"line_end":32,"line_preserve_start_whitespaces":"          ","line_preserve_end_whitespaces":"","start_statement":"_level =","end_statement":";","start_statement_regexp":"/([a-zA-Z0-9_\\.]+)\\s*=/","start_statement_matched":"_level =","start_statement_line_start":32,"start_statement_line_end":32,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/;/","end_statement_matched":";","end_statement_line_start":32,"end_statement_line_end":32,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":828,"start_statement_char_start":828,"start_statement_char_end":836,"start_statement_char_in_start":0,"start_statement_char_in_end":8,"char_end":839,"end_statement_char_start":838,"end_statement_char_end":839,"end_statement_char_in_start":10,"end_statement_char_in_end":11},{"body_character":"_templates;templates;","children":[],"id":"6","children_ids":[],"type":"attribute","name":"_templates","body":"_templates","line_start":33,"line_end":33,"line_preserve_start_whitespaces":"          ","line_preserve_end_whitespaces":"","start_statement":"_templates;","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_\\.]+)\\s*;/","start_statement_matched":"_templates;","start_statement_line_start":33,"start_statement_line_end":33,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":33,"end_statement_line_end":33,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":886,"start_statement_char_start":886,"start_statement_char_end":897,"start_statement_char_in_start":0,"start_statement_char_in_end":11,"char_end":896,"end_statement_char_start":896,"end_statement_char_end":896,"end_statement_char_in_start":10,"end_statement_char_in_end":10},{"body_character":"_pokemonSettings;pokemonSettings;","children":[],"id":"7","children_ids":[],"type":"attribute","name":"_pokemonSettings","body":"_pokemonSettings","line_start":34,"line_end":34,"line_preserve_start_whitespaces":"          ","line_preserve_end_whitespaces":"","start_statement":"_pokemonSettings;","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_\\.]+)\\s*;/","start_statement_matched":"_pokemonSettings;","start_statement_line_start":34,"start_statement_line_end":34,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":34,"end_statement_line_end":34,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":943,"start_statement_char_start":943,"start_statement_char_end":960,"start_statement_char_in_start":0,"start_statement_char_in_end":17,"char_end":959,"end_statement_char_start":959,"end_statement_char_end":959,"end_statement_char_in_start":16,"end_statement_char_in_end":16},{"body_character":"_revives =revives = new List<ItemId> { ItemId.ItemRevive, ItemId.ItemMaxRevive };","children":[],"id":"8","children_ids":[],"type":"attribute-assignment","name":"_revives","body":"_revives = new List<ItemId> { ItemId.ItemRevive, ItemId.ItemMaxRevive };","line_start":36,"line_end":36,"line_preserve_start_whitespaces":"           ","line_preserve_end_whitespaces":"","start_statement":"_revives =","end_statement":";","start_statement_regexp":"/([a-zA-Z0-9_\\.]+)\\s*=/","start_statement_matched":"_revives =","start_statement_line_start":36,"start_statement_line_end":36,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/;/","end_statement_matched":";","end_statement_line_start":36,"end_statement_line_end":36,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":1000,"start_statement_char_start":1000,"start_statement_char_end":1010,"start_statement_char_in_start":0,"start_statement_char_in_end":10,"char_end":1072,"end_statement_char_start":1071,"end_statement_char_end":1072,"end_statement_char_in_start":71,"end_statement_char_in_end":72},{"body_character":"_cachedInventory;cachedInventory;","children":[],"id":"9","children_ids":[],"type":"attribute","name":"_cachedInventory","body":"_cachedInventory","line_start":37,"line_end":37,"line_preserve_start_whitespaces":"          ","line_preserve_end_whitespaces":"","start_statement":"_cachedInventory;","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_\\.]+)\\s*;/","start_statement_matched":"_cachedInventory;","start_statement_line_start":37,"start_statement_line_end":37,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":37,"end_statement_line_end":37,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":1110,"start_statement_char_start":1110,"start_statement_char_end":1127,"start_statement_char_in_start":0,"start_statement_char_in_end":17,"char_end":1126,"end_statement_char_start":1126,"end_statement_char_end":1126,"end_statement_char_in_start":16,"end_statement_char_in_end":16},{"body_character":"_lastRefresh;lastRefresh;","children":[],"id":"10","children_ids":[],"type":"attribute","name":"_lastRefresh","body":"_lastRefresh","line_start":38,"line_end":38,"line_preserve_start_whitespaces":"          ","line_preserve_end_whitespaces":"","start_statement":"_lastRefresh;","end_statement":"","start_statement_regexp":"/([a-zA-Z0-9_\\.]+)\\s*;/","start_statement_matched":"_lastRefresh;","start_statement_line_start":38,"start_statement_line_end":38,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":null,"end_statement_matched":"","end_statement_line_start":38,"end_statement_line_end":38,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":1153,"start_statement_char_start":1153,"start_statement_char_end":1166,"start_statement_char_in_start":0,"start_statement_char_in_end":13,"char_end":1165,"end_statement_char_start":1165,"end_statement_char_end":1165,"end_statement_char_in_start":12,"end_statement_char_in_end":12},{"body_character":"public Inventory(Client client, ILogicSettings logicSettings)\n        {ublic Inventory(Client client, ILogicSettings logicSettings)\n        {\n            _client = client;\n            _logicSettings = logicSettings;\n        }","children":[],"id":"11","children_ids":[],"type":"method","name":"Inventory(Client client, ILogicSettings logicSettings)","body":"public Inventory(Client client, ILogicSettings logicSettings)\n        {\n            _client = client;\n            _logicSettings = logicSettings;\n        }","line_start":40,"line_end":44,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public Inventory(Client client, ILogicSettings logicSettings)\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public Inventory(Client client, ILogicSettings logicSettings)\n        {","start_statement_line_start":40,"start_statement_line_end":41,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":44,"end_statement_line_end":44,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":1176,"start_statement_char_start":1176,"start_statement_char_end":1247,"start_statement_char_in_start":0,"start_statement_char_in_end":71,"char_end":1331,"end_statement_char_start":1330,"end_statement_char_end":1331,"end_statement_char_in_start":154,"end_statement_char_in_end":155},{"body_character":"_pokeballs =pokeballs = new List<ItemId>\n        {\n            ItemId.ItemPokeBall,\n            ItemId.ItemGreatBall,\n            ItemId.ItemUltraBall,\n            ItemId.ItemMasterBall\n        };","children":[],"id":"12","children_ids":[],"type":"attribute-assignment","name":"_pokeballs","body":"_pokeballs = new List<ItemId>\n        {\n            ItemId.ItemPokeBall,\n            ItemId.ItemGreatBall,\n            ItemId.ItemUltraBall,\n            ItemId.ItemMasterBall\n        };","line_start":46,"line_end":52,"line_preserve_start_whitespaces":"           ","line_preserve_end_whitespaces":"","start_statement":"_pokeballs =","end_statement":";","start_statement_regexp":"/([a-zA-Z0-9_\\.]+)\\s*=/","start_statement_matched":"_pokeballs =","start_statement_line_start":46,"start_statement_line_end":46,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/;/","end_statement_matched":";","end_statement_line_start":52,"end_statement_line_end":52,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":1371,"start_statement_char_start":1371,"start_statement_char_end":1383,"start_statement_char_in_start":0,"start_statement_char_in_end":12,"char_end":1556,"end_statement_char_start":1555,"end_statement_char_end":1556,"end_statement_char_in_start":184,"end_statement_char_in_end":185},{"body_character":"_potions =potions = new List<ItemId>\n        {\n            ItemId.ItemPotion,\n            ItemId.ItemSuperPotion,\n            ItemId.ItemHyperPotion,\n            ItemId.ItemMaxPotion\n        };","children":[],"id":"13","children_ids":[],"type":"attribute-assignment","name":"_potions","body":"_potions = new List<ItemId>\n        {\n            ItemId.ItemPotion,\n            ItemId.ItemSuperPotion,\n            ItemId.ItemHyperPotion,\n            ItemId.ItemMaxPotion\n        };","line_start":54,"line_end":60,"line_preserve_start_whitespaces":"           ","line_preserve_end_whitespaces":"","start_statement":"_potions =","end_statement":";","start_statement_regexp":"/([a-zA-Z0-9_\\.]+)\\s*=/","start_statement_matched":"_potions =","start_statement_line_start":54,"start_statement_line_end":54,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/;/","end_statement_matched":";","end_statement_line_start":60,"end_statement_line_end":60,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":1596,"start_statement_char_start":1596,"start_statement_char_end":1606,"start_statement_char_in_start":0,"start_statement_char_in_end":10,"char_end":1780,"end_statement_char_start":1779,"end_statement_char_end":1780,"end_statement_char_in_start":183,"end_statement_char_in_end":184},{"body_character":"public async Task DeletePokemonFromInvById(ulong id)\n        {ublic async Task DeletePokemonFromInvById(ulong id)\n        {\n            var inventory = await GetCachedInventory();\n            var pokemon =\n                inventory.InventoryDelta.InventoryItems.FirstOrDefault(\n                    i => i.InventoryItemData.PokemonData != null && i.InventoryItemData.PokemonData.Id == id);\n            if (pokemon != null)\n                inventory.InventoryDelta.InventoryItems.Remove(pokemon);\n        }","children":[],"id":"14","children_ids":[],"type":"method","name":"DeletePokemonFromInvById(ulong id)","body":"public async Task DeletePokemonFromInvById(ulong id)\n        {\n            var inventory = await GetCachedInventory();\n            var pokemon =\n                inventory.InventoryDelta.InventoryItems.FirstOrDefault(\n                    i => i.InventoryItemData.PokemonData != null && i.InventoryItemData.PokemonData.Id == id);\n            if (pokemon != null)\n                inventory.InventoryDelta.InventoryItems.Remove(pokemon);\n        }","line_start":62,"line_end":70,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task DeletePokemonFromInvById(ulong id)\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task DeletePokemonFromInvById(ulong id)\n        {","start_statement_line_start":62,"start_statement_line_end":63,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":70,"end_statement_line_end":70,"end_statement_line_in_start":9,"end_statement_line_in_end":9,"char_start":1790,"start_statement_char_start":1790,"start_statement_char_end":1852,"start_statement_char_in_start":0,"start_statement_char_in_end":62,"char_end":2233,"end_statement_char_start":2232,"end_statement_char_end":2233,"end_statement_char_in_start":442,"end_statement_char_in_end":443},{"body_character":"public async Task<LevelUpRewardsResponse> GetLevelUpRewards(Inventory inv )\n        {ublic async Task<LevelUpRewardsResponse> GetLevelUpRewards(Inventory inv )\n        {\n            return await GetLevelUpRewards(inv.GetPlayerStats().Result.FirstOrDefault().Level);\n        }","children":[],"id":"15","children_ids":[],"type":"method","name":"GetLevelUpRewards(Inventory inv )","body":"public async Task<LevelUpRewardsResponse> GetLevelUpRewards(Inventory inv )\n        {\n            return await GetLevelUpRewards(inv.GetPlayerStats().Result.FirstOrDefault().Level);\n        }","line_start":72,"line_end":75,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<LevelUpRewardsResponse> GetLevelUpRewards(Inventory inv )\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<LevelUpRewardsResponse> GetLevelUpRewards(Inventory inv )\n        {","start_statement_line_start":72,"start_statement_line_end":73,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":75,"end_statement_line_end":75,"end_statement_line_in_start":4,"end_statement_line_in_end":4,"char_start":2243,"start_statement_char_start":2243,"start_statement_char_end":2328,"start_statement_char_in_start":0,"start_statement_char_in_end":85,"char_end":2434,"end_statement_char_start":2433,"end_statement_char_end":2434,"end_statement_char_in_start":190,"end_statement_char_in_end":191},{"body_character":"private async Task<GetInventoryResponse> GetCachedInventory()\n        {rivate async Task<GetInventoryResponse> GetCachedInventory()\n        {\n            if (_player==null) GetPlayerData();\n            var now = DateTime.UtcNow;\n\n            if (_cachedInventory!=null && _lastRefresh.AddSeconds(30).Ticks > now.Ticks)\n                return _cachedInventory;\n\n            return await RefreshCachedInventory();\n        }","children":[],"id":"16","children_ids":[],"type":"method","name":"GetCachedInventory()","body":"private async Task<GetInventoryResponse> GetCachedInventory()\n        {\n            if (_player==null) GetPlayerData();\n            var now = DateTime.UtcNow;\n\n            if (_cachedInventory!=null && _lastRefresh.AddSeconds(30).Ticks > now.Ticks)\n                return _cachedInventory;\n\n            return await RefreshCachedInventory();\n        }","line_start":77,"line_end":86,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"private async Task<GetInventoryResponse> GetCachedInventory()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"private async Task<GetInventoryResponse> GetCachedInventory()\n        {","start_statement_line_start":77,"start_statement_line_end":78,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":86,"end_statement_line_end":86,"end_statement_line_in_start":10,"end_statement_line_in_end":10,"char_start":2444,"start_statement_char_start":2444,"start_statement_char_end":2515,"start_statement_char_in_start":0,"start_statement_char_in_end":71,"char_end":2795,"end_statement_char_start":2794,"end_statement_char_end":2795,"end_statement_char_in_start":350,"end_statement_char_in_end":351},{"body_character":"public async Task<IEnumerable<PokemonData>> GetDuplicatePokemonToTransfer(\n                IEnumerable<PokemonId> pokemonsNotToTransfer, IEnumerable<PokemonId> pokemonsToEvolve,\n                bool keepPokemonsThatCanEvolve = false, bool prioritizeIVoverCp = false\n             )\n        {ublic async Task<IEnumerable<PokemonData>> GetDuplicatePokemonToTransfer(\n                IEnumerable<PokemonId> pokemonsNotToTransfer, IEnumerable<PokemonId> pokemonsToEvolve,\n                bool keepPokemonsThatCanEvolve = false, bool prioritizeIVoverCp = false\n             )\n        {\n            var myPokemon = await GetPokemons();\n\n            var myPokemonList = myPokemon.ToList();\n\n            var pokemonToTransfer = myPokemonList.Where(p => !pokemonsNotToTransfer.Contains(p.PokemonId) && p.DeployedFortId == string.Empty && p.Favorite == 0).ToList();\n\n            try\n            {\n                pokemonToTransfer =\n                    pokemonToTransfer.Where(\n                        p =>\n                        {\n                            var pokemonTransferFilter = GetPokemonTransferFilter(p.PokemonId);\n\n                            return !pokemonTransferFilter.MovesOperator.BoolFunc(\n                                        pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.MovesOperator.InverseBool(pokemonTransferFilter.Moves.Count > 0),\n                                                pokemonTransferFilter.Moves.Any(moveset =>\n                                                    pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                        pokemonTransferFilter.MovesOperator.InverseBool(moveset.Count > 0),\n                                                        moveset.Intersect(new[] { p.Move1, p.Move2 }).Count() == Math.Max(Math.Min(moveset.Count, 2),0)))),\n                                        pokemonTransferFilter.KeepMinOperator.BoolFunc(\n                                            p.Cp >= pokemonTransferFilter.KeepMinCp,\n                                            PokemonInfo.CalculatePokemonPerfection(p) >= pokemonTransferFilter.KeepMinIvPercentage,\n                                            pokemonTransferFilter.KeepMinOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.KeepMinOperator.InverseBool(pokemonTransferFilter.UseKeepMinLvl),\n                                                PokemonInfo.GetLevel(p) >= pokemonTransferFilter.KeepMinLvl)));\n\n                        }).ToList();\n            }\n            catch (Exception e)\n            {\n                throw e;\n            }\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var results = new List<PokemonData>();\n\n            foreach (var pokemonGroupToTransfer in pokemonToTransfer.GroupBy(p => p.PokemonId).ToList())\n            {\n                var amountToKeepInStorage = Math.Max(GetPokemonTransferFilter(pokemonGroupToTransfer.Key).KeepMinDuplicatePokemon, 0);\n\n                var inStorage = myPokemonList.Count(data => data.PokemonId == pokemonGroupToTransfer.Key);\n                var needToRemove = inStorage - amountToKeepInStorage;\n\n                if (needToRemove <= 0)\n                    continue;\n\n                var weakPokemonCount = pokemonGroupToTransfer.Count();\n                var canBeRemoved = Math.Min(needToRemove, weakPokemonCount);\n\n\n                var settings = pokemonSettings.Single(x => x.PokemonId == pokemonGroupToTransfer.Key);\n                //Lets calc new canBeRemoved pokemons according to transferring some of them for +1 candy or to evolving for +1 candy\n                if (keepPokemonsThatCanEvolve &&\n                    pokemonsToEvolve.Contains(pokemonGroupToTransfer.Key) &&\n                    settings.CandyToEvolve > 0 &&\n                    settings.EvolutionIds.Count != 0)\n                {\n                    var familyCandy = pokemonFamilies.Single(x => settings.FamilyId == x.FamilyId);\n\n                    // its an solution in fixed numbers of equations with two variables\n                    // (N = X + Y, X + C + Y >= Y * E) -> X >= (N * (E - 1) - C) / E\n                    // where N - current canBeRemoved,  X - new canBeRemoved, Y - possible to keep more, E - CandyToEvolve, C - candy amount\n                    canBeRemoved = (int)Math.Ceiling((double)((settings.CandyToEvolve - 1) * canBeRemoved - familyCandy.Candy_) / settings.CandyToEvolve);\n                }\n\n                if (canBeRemoved <= 0)\n                    continue;\n\n                if (prioritizeIVoverCp)\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(PokemonInfo.CalculatePokemonPerfection)\n                        .ThenBy(n => n.Cp)\n                        .Take(canBeRemoved));\n                }\n                else\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(x => x.Cp)\n                        .ThenBy(PokemonInfo.CalculatePokemonPerfection)\n                        .Take(canBeRemoved));\n                }\n            }\n\n            #region For testing\n/*\n            results.ForEach(data =>\n            {\n                var allpokemonoftype = myPokemonList.Where(x => x.PokemonId == data.PokemonId);\n                var bestPokemonOfType =\n                    (_logicSettings.PrioritizeIvOverCp\n                         ? allpokemonoftype\n                        .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                        .FirstOrDefault()\n                         : allpokemonoftype\n                        .OrderByDescending(x => x.Cp)\n                        .FirstOrDefault())\n                    ?? data;\n\n                var perfection = PokemonInfo.CalculatePokemonPerfection(data);\n                var cp = data.Cp;\n\n                var bestPerfection = PokemonInfo.CalculatePokemonPerfection(bestPokemonOfType);\n                var bestCp = bestPokemonOfType.Cp;\n            });\n*/\n            #endregion\n\n            return results;\n        }","children":[{"body_character":"{\n                pokemonToTransfer =\n                    pokemonToTransfer.Where(\n                        p =>\n                        {\n                            var pokemonTransferFilter = GetPokemonTransferFilter(p.PokemonId);\n\n                            return !pokemonTransferFilter.MovesOperator.BoolFunc(\n                                        pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.MovesOperator.InverseBool(pokemonTransferFilter.Moves.Count > 0),\n                                                pokemonTransferFilter.Moves.Any(moveset =>\n                                                    pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                        pokemonTransferFilter.MovesOperator.InverseBool(moveset.Count > 0),\n                                                        moveset.Intersect(new[] { p.Move1, p.Move2 }).Count() == Math.Max(Math.Min(moveset.Count, 2),0)))),\n                                        pokemonTransferFilter.KeepMinOperator.BoolFunc(\n                                            p.Cp >= pokemonTransferFilter.KeepMinCp,\n                                            PokemonInfo.CalculatePokemonPerfection(p) >= pokemonTransferFilter.KeepMinIvPercentage,\n                                            pokemonTransferFilter.KeepMinOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.KeepMinOperator.InverseBool(pokemonTransferFilter.UseKeepMinLvl),\n                                                PokemonInfo.GetLevel(p) >= pokemonTransferFilter.KeepMinLvl)));\n\n                        }).ToList();\n            }","children":[{"body_character":"{\n                            var pokemonTransferFilter = GetPokemonTransferFilter(p.PokemonId);\n\n                            return !pokemonTransferFilter.MovesOperator.BoolFunc(\n                                        pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.MovesOperator.InverseBool(pokemonTransferFilter.Moves.Count > 0),\n                                                pokemonTransferFilter.Moves.Any(moveset =>\n                                                    pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                        pokemonTransferFilter.MovesOperator.InverseBool(moveset.Count > 0),\n                                                        moveset.Intersect(new[] { p.Move1, p.Move2 }).Count() == Math.Max(Math.Min(moveset.Count, 2),0)))),\n                                        pokemonTransferFilter.KeepMinOperator.BoolFunc(\n                                            p.Cp >= pokemonTransferFilter.KeepMinCp,\n                                            PokemonInfo.CalculatePokemonPerfection(p) >= pokemonTransferFilter.KeepMinIvPercentage,\n                                            pokemonTransferFilter.KeepMinOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.KeepMinOperator.InverseBool(pokemonTransferFilter.UseKeepMinLvl),\n                                                PokemonInfo.GetLevel(p) >= pokemonTransferFilter.KeepMinLvl)));\n\n                        }","children":[{"body_character":"{ p.Move1, p.Move2 }","children":[],"id":"20","children_ids":[],"type":"statement","name":null,"body":"{ p.Move1, p.Move2 }","line_start":114,"line_end":114,"line_preserve_start_whitespaces":"                                                         ","line_preserve_end_whitespaces":"   ","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":114,"start_statement_line_end":114,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":114,"end_statement_line_end":114,"end_statement_line_in_start":1,"end_statement_line_in_end":1,"char_start":4346,"start_statement_char_start":4346,"start_statement_char_end":4347,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":4366,"end_statement_char_start":4365,"end_statement_char_end":4366,"end_statement_char_in_start":19,"end_statement_char_in_end":20}],"id":"19","children_ids":["20"],"type":"statement","name":null,"body":"{\n                            var pokemonTransferFilter = GetPokemonTransferFilter(p.PokemonId);\n\n                            return !pokemonTransferFilter.MovesOperator.BoolFunc(\n                                        pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.MovesOperator.InverseBool(pokemonTransferFilter.Moves.Count > 0),\n                                                pokemonTransferFilter.Moves.Any(moveset =>\n                                                    pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                        pokemonTransferFilter.MovesOperator.InverseBool(moveset.Count > 0),\n                                                        moveset.Intersect(new[] { p.Move1, p.Move2 }).Count() == Math.Max(Math.Min(moveset.Count, 2),0)))),\n                                        pokemonTransferFilter.KeepMinOperator.BoolFunc(\n                                            p.Cp >= pokemonTransferFilter.KeepMinCp,\n                                            PokemonInfo.CalculatePokemonPerfection(p) >= pokemonTransferFilter.KeepMinIvPercentage,\n                                            pokemonTransferFilter.KeepMinOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.KeepMinOperator.InverseBool(pokemonTransferFilter.UseKeepMinLvl),\n                                                PokemonInfo.GetLevel(p) >= pokemonTransferFilter.KeepMinLvl)));\n\n                        }","line_start":105,"line_end":122,"line_preserve_start_whitespaces":"                        ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":105,"start_statement_line_end":105,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":122,"end_statement_line_end":122,"end_statement_line_in_start":18,"end_statement_line_in_end":18,"char_start":3537,"start_statement_char_start":3537,"start_statement_char_end":3538,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":5100,"end_statement_char_start":5099,"end_statement_char_end":5100,"end_statement_char_in_start":1562,"end_statement_char_in_end":1563}],"id":"18","children_ids":["19"],"type":"statement","name":null,"body":"{\n                pokemonToTransfer =\n                    pokemonToTransfer.Where(\n                        p =>\n                        {\n                            var pokemonTransferFilter = GetPokemonTransferFilter(p.PokemonId);\n\n                            return !pokemonTransferFilter.MovesOperator.BoolFunc(\n                                        pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.MovesOperator.InverseBool(pokemonTransferFilter.Moves.Count > 0),\n                                                pokemonTransferFilter.Moves.Any(moveset =>\n                                                    pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                        pokemonTransferFilter.MovesOperator.InverseBool(moveset.Count > 0),\n                                                        moveset.Intersect(new[] { p.Move1, p.Move2 }).Count() == Math.Max(Math.Min(moveset.Count, 2),0)))),\n                                        pokemonTransferFilter.KeepMinOperator.BoolFunc(\n                                            p.Cp >= pokemonTransferFilter.KeepMinCp,\n                                            PokemonInfo.CalculatePokemonPerfection(p) >= pokemonTransferFilter.KeepMinIvPercentage,\n                                            pokemonTransferFilter.KeepMinOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.KeepMinOperator.InverseBool(pokemonTransferFilter.UseKeepMinLvl),\n                                                PokemonInfo.GetLevel(p) >= pokemonTransferFilter.KeepMinLvl)));\n\n                        }).ToList();\n            }","line_start":101,"line_end":123,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":101,"start_statement_line_end":101,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":123,"end_statement_line_end":123,"end_statement_line_in_start":23,"end_statement_line_in_end":23,"char_start":3401,"start_statement_char_start":3401,"start_statement_char_end":3402,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":5125,"end_statement_char_start":5124,"end_statement_char_end":5125,"end_statement_char_in_start":1723,"end_statement_char_in_end":1724},{"body_character":"{\n                throw e;\n            }","children":[],"id":"21","children_ids":[],"type":"statement","name":null,"body":"{\n                throw e;\n            }","line_start":125,"line_end":127,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":125,"start_statement_line_end":125,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":127,"end_statement_line_end":127,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":5170,"start_statement_char_start":5170,"start_statement_char_end":5171,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":5210,"end_statement_char_start":5209,"end_statement_char_end":5210,"end_statement_char_in_start":39,"end_statement_char_in_end":40},{"body_character":"{\n                var amountToKeepInStorage = Math.Max(GetPokemonTransferFilter(pokemonGroupToTransfer.Key).KeepMinDuplicatePokemon, 0);\n\n                var inStorage = myPokemonList.Count(data => data.PokemonId == pokemonGroupToTransfer.Key);\n                var needToRemove = inStorage - amountToKeepInStorage;\n\n                if (needToRemove <= 0)\n                    continue;\n\n                var weakPokemonCount = pokemonGroupToTransfer.Count();\n                var canBeRemoved = Math.Min(needToRemove, weakPokemonCount);\n\n\n                var settings = pokemonSettings.Single(x => x.PokemonId == pokemonGroupToTransfer.Key);\n                //Lets calc new canBeRemoved pokemons according to transferring some of them for +1 candy or to evolving for +1 candy\n                if (keepPokemonsThatCanEvolve &&\n                    pokemonsToEvolve.Contains(pokemonGroupToTransfer.Key) &&\n                    settings.CandyToEvolve > 0 &&\n                    settings.EvolutionIds.Count != 0)\n                {\n                    var familyCandy = pokemonFamilies.Single(x => settings.FamilyId == x.FamilyId);\n\n                    // its an solution in fixed numbers of equations with two variables\n                    // (N = X + Y, X + C + Y >= Y * E) -> X >= (N * (E - 1) - C) / E\n                    // where N - current canBeRemoved,  X - new canBeRemoved, Y - possible to keep more, E - CandyToEvolve, C - candy amount\n                    canBeRemoved = (int)Math.Ceiling((double)((settings.CandyToEvolve - 1) * canBeRemoved - familyCandy.Candy_) / settings.CandyToEvolve);\n                }\n\n                if (canBeRemoved <= 0)\n                    continue;\n\n                if (prioritizeIVoverCp)\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(PokemonInfo.CalculatePokemonPerfection)\n                        .ThenBy(n => n.Cp)\n                        .Take(canBeRemoved));\n                }\n                else\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(x => x.Cp)\n                        .ThenBy(PokemonInfo.CalculatePokemonPerfection)\n                        .Take(canBeRemoved));\n                }\n            }","children":[{"body_character":"///Lets calc new canBeRemoved pokemons according to transferring some of them for +1 candy or to evolving for +1 candy\n","children":[],"id":"23","children_ids":[],"type":"comment","name":null,"body":"//Lets calc new canBeRemoved pokemons according to transferring some of them for +1 candy or to evolving for +1 candy\n","line_start":152,"line_end":152,"line_preserve_start_whitespaces":"                ","line_preserve_end_whitespaces":"                  ","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":152,"start_statement_line_end":152,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":151,"end_statement_line_end":152,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":6291,"start_statement_char_start":6291,"start_statement_char_end":6293,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":6409,"end_statement_char_start":6408,"end_statement_char_end":6409,"end_statement_char_in_start":117,"end_statement_char_in_end":118},{"body_character":"{\n                    var familyCandy = pokemonFamilies.Single(x => settings.FamilyId == x.FamilyId);\n\n                    // its an solution in fixed numbers of equations with two variables\n                    // (N = X + Y, X + C + Y >= Y * E) -> X >= (N * (E - 1) - C) / E\n                    // where N - current canBeRemoved,  X - new canBeRemoved, Y - possible to keep more, E - CandyToEvolve, C - candy amount\n                    canBeRemoved = (int)Math.Ceiling((double)((settings.CandyToEvolve - 1) * canBeRemoved - familyCandy.Candy_) / settings.CandyToEvolve);\n                }","children":[{"body_character":"/// its an solution in fixed numbers of equations with two variables\n","children":[],"id":"25","children_ids":[],"type":"comment","name":null,"body":"// its an solution in fixed numbers of equations with two variables\n","line_start":160,"line_end":160,"line_preserve_start_whitespaces":"                    ","line_preserve_end_whitespaces":"                    ","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":160,"start_statement_line_end":160,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":159,"end_statement_line_end":160,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":6778,"start_statement_char_start":6778,"start_statement_char_end":6780,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":6846,"end_statement_char_start":6845,"end_statement_char_end":6846,"end_statement_char_in_start":67,"end_statement_char_in_end":68},{"body_character":"/// (N = X + Y, X + C + Y >= Y * E) -> X >= (N * (E - 1) - C) / E\n","children":[],"id":"26","children_ids":[],"type":"comment","name":null,"body":"// (N = X + Y, X + C + Y >= Y * E) -> X >= (N * (E - 1) - C) / E\n","line_start":161,"line_end":161,"line_preserve_start_whitespaces":"                    ","line_preserve_end_whitespaces":"                    ","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":161,"start_statement_line_end":161,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":160,"end_statement_line_end":161,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":6866,"start_statement_char_start":6866,"start_statement_char_end":6868,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":6931,"end_statement_char_start":6930,"end_statement_char_end":6931,"end_statement_char_in_start":64,"end_statement_char_in_end":65},{"body_character":"/// where N - current canBeRemoved,  X - new canBeRemoved, Y - possible to keep more, E - CandyToEvolve, C - candy amount\n","children":[],"id":"27","children_ids":[],"type":"comment","name":null,"body":"// where N - current canBeRemoved,  X - new canBeRemoved, Y - possible to keep more, E - CandyToEvolve, C - candy amount\n","line_start":162,"line_end":162,"line_preserve_start_whitespaces":"                    ","line_preserve_end_whitespaces":"                              ","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":162,"start_statement_line_end":162,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":161,"end_statement_line_end":162,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":6951,"start_statement_char_start":6951,"start_statement_char_end":6953,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":7072,"end_statement_char_start":7071,"end_statement_char_end":7072,"end_statement_char_in_start":120,"end_statement_char_in_end":121}],"id":"24","children_ids":["25","26","27"],"type":"statement","name":null,"body":"{\n                    var familyCandy = pokemonFamilies.Single(x => settings.FamilyId == x.FamilyId);\n\n                    // its an solution in fixed numbers of equations with two variables\n                    // (N = X + Y, X + C + Y >= Y * E) -> X >= (N * (E - 1) - C) / E\n                    // where N - current canBeRemoved,  X - new canBeRemoved, Y - possible to keep more, E - CandyToEvolve, C - candy amount\n                    canBeRemoved = (int)Math.Ceiling((double)((settings.CandyToEvolve - 1) * canBeRemoved - familyCandy.Candy_) / settings.CandyToEvolve);\n                }","line_start":157,"line_end":164,"line_preserve_start_whitespaces":"                ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":157,"start_statement_line_end":157,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":164,"end_statement_line_end":164,"end_statement_line_in_start":8,"end_statement_line_in_end":8,"char_start":6655,"start_statement_char_start":6655,"start_statement_char_end":6656,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":7244,"end_statement_char_start":7243,"end_statement_char_end":7244,"end_statement_char_in_start":588,"end_statement_char_in_end":589},{"body_character":"{\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(PokemonInfo.CalculatePokemonPerfection)\n                        .ThenBy(n => n.Cp)\n                        .Take(canBeRemoved));\n                }","children":[],"id":"28","children_ids":[],"type":"statement","name":null,"body":"{\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(PokemonInfo.CalculatePokemonPerfection)\n                        .ThenBy(n => n.Cp)\n                        .Take(canBeRemoved));\n                }","line_start":170,"line_end":175,"line_preserve_start_whitespaces":"                ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":170,"start_statement_line_end":170,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":175,"end_statement_line_end":175,"end_statement_line_in_start":6,"end_statement_line_in_end":6,"char_start":7372,"start_statement_char_start":7372,"start_statement_char_end":7373,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":7613,"end_statement_char_start":7612,"end_statement_char_end":7613,"end_statement_char_in_start":240,"end_statement_char_in_end":241},{"body_character":"{\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(x => x.Cp)\n                        .ThenBy(PokemonInfo.CalculatePokemonPerfection)\n                        .Take(canBeRemoved));\n                }","children":[],"id":"29","children_ids":[],"type":"statement","name":null,"body":"{\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(x => x.Cp)\n                        .ThenBy(PokemonInfo.CalculatePokemonPerfection)\n                        .Take(canBeRemoved));\n                }","line_start":177,"line_end":182,"line_preserve_start_whitespaces":"                ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":177,"start_statement_line_end":177,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":182,"end_statement_line_end":182,"end_statement_line_in_start":6,"end_statement_line_in_end":6,"char_start":7651,"start_statement_char_start":7651,"start_statement_char_end":7652,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":7892,"end_statement_char_start":7891,"end_statement_char_end":7892,"end_statement_char_in_start":240,"end_statement_char_in_end":241}],"id":"22","children_ids":["23","24","28","29"],"type":"statement","name":null,"body":"{\n                var amountToKeepInStorage = Math.Max(GetPokemonTransferFilter(pokemonGroupToTransfer.Key).KeepMinDuplicatePokemon, 0);\n\n                var inStorage = myPokemonList.Count(data => data.PokemonId == pokemonGroupToTransfer.Key);\n                var needToRemove = inStorage - amountToKeepInStorage;\n\n                if (needToRemove <= 0)\n                    continue;\n\n                var weakPokemonCount = pokemonGroupToTransfer.Count();\n                var canBeRemoved = Math.Min(needToRemove, weakPokemonCount);\n\n\n                var settings = pokemonSettings.Single(x => x.PokemonId == pokemonGroupToTransfer.Key);\n                //Lets calc new canBeRemoved pokemons according to transferring some of them for +1 candy or to evolving for +1 candy\n                if (keepPokemonsThatCanEvolve &&\n                    pokemonsToEvolve.Contains(pokemonGroupToTransfer.Key) &&\n                    settings.CandyToEvolve > 0 &&\n                    settings.EvolutionIds.Count != 0)\n                {\n                    var familyCandy = pokemonFamilies.Single(x => settings.FamilyId == x.FamilyId);\n\n                    // its an solution in fixed numbers of equations with two variables\n                    // (N = X + Y, X + C + Y >= Y * E) -> X >= (N * (E - 1) - C) / E\n                    // where N - current canBeRemoved,  X - new canBeRemoved, Y - possible to keep more, E - CandyToEvolve, C - candy amount\n                    canBeRemoved = (int)Math.Ceiling((double)((settings.CandyToEvolve - 1) * canBeRemoved - familyCandy.Candy_) / settings.CandyToEvolve);\n                }\n\n                if (canBeRemoved <= 0)\n                    continue;\n\n                if (prioritizeIVoverCp)\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(PokemonInfo.CalculatePokemonPerfection)\n                        .ThenBy(n => n.Cp)\n                        .Take(canBeRemoved));\n                }\n                else\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(x => x.Cp)\n                        .ThenBy(PokemonInfo.CalculatePokemonPerfection)\n                        .Take(canBeRemoved));\n                }\n            }","line_start":138,"line_end":183,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":138,"start_statement_line_end":138,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":183,"end_statement_line_end":183,"end_statement_line_in_start":46,"end_statement_line_in_end":46,"char_start":5636,"start_statement_char_start":5636,"start_statement_char_end":5637,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":7906,"end_statement_char_start":7905,"end_statement_char_end":7906,"end_statement_char_in_start":2269,"end_statement_char_in_end":2270},{"body_character":"/**\n            results.ForEach(data =>\n            {\n                var allpokemonoftype = myPokemonList.Where(x => x.PokemonId == data.PokemonId);\n                var bestPokemonOfType =\n                    (_logicSettings.PrioritizeIvOverCp\n                         ? allpokemonoftype\n                        .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                        .FirstOrDefault()\n                         : allpokemonoftype\n                        .OrderByDescending(x => x.Cp)\n                        .FirstOrDefault())\n                    ?? data;\n\n                var perfection = PokemonInfo.CalculatePokemonPerfection(data);\n                var cp = data.Cp;\n\n                var bestPerfection = PokemonInfo.CalculatePokemonPerfection(bestPokemonOfType);\n                var bestCp = bestPokemonOfType.Cp;\n            });\n*","children":[],"id":"30","children_ids":[],"type":"comment","name":null,"body":"/*\n            results.ForEach(data =>\n            {\n                var allpokemonoftype = myPokemonList.Where(x => x.PokemonId == data.PokemonId);\n                var bestPokemonOfType =\n                    (_logicSettings.PrioritizeIvOverCp\n                         ? allpokemonoftype\n                        .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                        .FirstOrDefault()\n                         : allpokemonoftype\n                        .OrderByDescending(x => x.Cp)\n                        .FirstOrDefault())\n                    ?? data;\n\n                var perfection = PokemonInfo.CalculatePokemonPerfection(data);\n                var cp = data.Cp;\n\n                var bestPerfection = PokemonInfo.CalculatePokemonPerfection(bestPokemonOfType);\n                var bestCp = bestPokemonOfType.Cp;\n            });\n*/","line_start":186,"line_end":206,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":"/*","end_statement":"*/","start_statement_regexp":"/\\/\\*/","start_statement_matched":"/*","start_statement_line_start":186,"start_statement_line_end":186,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\*\\//","end_statement_matched":"*/","end_statement_line_start":206,"end_statement_line_end":206,"end_statement_line_in_start":21,"end_statement_line_in_end":21,"char_start":7940,"start_statement_char_start":7940,"start_statement_char_end":7942,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":8803,"end_statement_char_start":8801,"end_statement_char_end":8803,"end_statement_char_in_start":861,"end_statement_char_in_end":863}],"id":"17","children_ids":["18","21","22","30"],"type":"method","name":"GetDuplicatePokemonToTransfer(\n                IEnumerable<PokemonId> pokemonsNotToTransfer, IEnumerable<PokemonId> pokemonsToEvolve,\n                bool keepPokemonsThatCanEvolve = false, bool prioritizeIVoverCp = false\n             )","body":"public async Task<IEnumerable<PokemonData>> GetDuplicatePokemonToTransfer(\n                IEnumerable<PokemonId> pokemonsNotToTransfer, IEnumerable<PokemonId> pokemonsToEvolve,\n                bool keepPokemonsThatCanEvolve = false, bool prioritizeIVoverCp = false\n             )\n        {\n            var myPokemon = await GetPokemons();\n\n            var myPokemonList = myPokemon.ToList();\n\n            var pokemonToTransfer = myPokemonList.Where(p => !pokemonsNotToTransfer.Contains(p.PokemonId) && p.DeployedFortId == string.Empty && p.Favorite == 0).ToList();\n\n            try\n            {\n                pokemonToTransfer =\n                    pokemonToTransfer.Where(\n                        p =>\n                        {\n                            var pokemonTransferFilter = GetPokemonTransferFilter(p.PokemonId);\n\n                            return !pokemonTransferFilter.MovesOperator.BoolFunc(\n                                        pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.MovesOperator.InverseBool(pokemonTransferFilter.Moves.Count > 0),\n                                                pokemonTransferFilter.Moves.Any(moveset =>\n                                                    pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                        pokemonTransferFilter.MovesOperator.InverseBool(moveset.Count > 0),\n                                                        moveset.Intersect(new[] { p.Move1, p.Move2 }).Count() == Math.Max(Math.Min(moveset.Count, 2),0)))),\n                                        pokemonTransferFilter.KeepMinOperator.BoolFunc(\n                                            p.Cp >= pokemonTransferFilter.KeepMinCp,\n                                            PokemonInfo.CalculatePokemonPerfection(p) >= pokemonTransferFilter.KeepMinIvPercentage,\n                                            pokemonTransferFilter.KeepMinOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.KeepMinOperator.InverseBool(pokemonTransferFilter.UseKeepMinLvl),\n                                                PokemonInfo.GetLevel(p) >= pokemonTransferFilter.KeepMinLvl)));\n\n                        }).ToList();\n            }\n            catch (Exception e)\n            {\n                throw e;\n            }\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var results = new List<PokemonData>();\n\n            foreach (var pokemonGroupToTransfer in pokemonToTransfer.GroupBy(p => p.PokemonId).ToList())\n            {\n                var amountToKeepInStorage = Math.Max(GetPokemonTransferFilter(pokemonGroupToTransfer.Key).KeepMinDuplicatePokemon, 0);\n\n                var inStorage = myPokemonList.Count(data => data.PokemonId == pokemonGroupToTransfer.Key);\n                var needToRemove = inStorage - amountToKeepInStorage;\n\n                if (needToRemove <= 0)\n                    continue;\n\n                var weakPokemonCount = pokemonGroupToTransfer.Count();\n                var canBeRemoved = Math.Min(needToRemove, weakPokemonCount);\n\n\n                var settings = pokemonSettings.Single(x => x.PokemonId == pokemonGroupToTransfer.Key);\n                //Lets calc new canBeRemoved pokemons according to transferring some of them for +1 candy or to evolving for +1 candy\n                if (keepPokemonsThatCanEvolve &&\n                    pokemonsToEvolve.Contains(pokemonGroupToTransfer.Key) &&\n                    settings.CandyToEvolve > 0 &&\n                    settings.EvolutionIds.Count != 0)\n                {\n                    var familyCandy = pokemonFamilies.Single(x => settings.FamilyId == x.FamilyId);\n\n                    // its an solution in fixed numbers of equations with two variables\n                    // (N = X + Y, X + C + Y >= Y * E) -> X >= (N * (E - 1) - C) / E\n                    // where N - current canBeRemoved,  X - new canBeRemoved, Y - possible to keep more, E - CandyToEvolve, C - candy amount\n                    canBeRemoved = (int)Math.Ceiling((double)((settings.CandyToEvolve - 1) * canBeRemoved - familyCandy.Candy_) / settings.CandyToEvolve);\n                }\n\n                if (canBeRemoved <= 0)\n                    continue;\n\n                if (prioritizeIVoverCp)\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(PokemonInfo.CalculatePokemonPerfection)\n                        .ThenBy(n => n.Cp)\n                        .Take(canBeRemoved));\n                }\n                else\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(x => x.Cp)\n                        .ThenBy(PokemonInfo.CalculatePokemonPerfection)\n                        .Take(canBeRemoved));\n                }\n            }\n\n            #region For testing\n/*\n            results.ForEach(data =>\n            {\n                var allpokemonoftype = myPokemonList.Where(x => x.PokemonId == data.PokemonId);\n                var bestPokemonOfType =\n                    (_logicSettings.PrioritizeIvOverCp\n                         ? allpokemonoftype\n                        .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                        .FirstOrDefault()\n                         : allpokemonoftype\n                        .OrderByDescending(x => x.Cp)\n                        .FirstOrDefault())\n                    ?? data;\n\n                var perfection = PokemonInfo.CalculatePokemonPerfection(data);\n                var cp = data.Cp;\n\n                var bestPerfection = PokemonInfo.CalculatePokemonPerfection(bestPokemonOfType);\n                var bestCp = bestPokemonOfType.Cp;\n            });\n*/\n            #endregion\n\n            return results;\n        }","line_start":89,"line_end":210,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<IEnumerable<PokemonData>> GetDuplicatePokemonToTransfer(\n                IEnumerable<PokemonId> pokemonsNotToTransfer, IEnumerable<PokemonId> pokemonsToEvolve,\n                bool keepPokemonsThatCanEvolve = false, bool prioritizeIVoverCp = false\n             )\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<IEnumerable<PokemonData>> GetDuplicatePokemonToTransfer(\n                IEnumerable<PokemonId> pokemonsNotToTransfer, IEnumerable<PokemonId> pokemonsToEvolve,\n                bool keepPokemonsThatCanEvolve = false, bool prioritizeIVoverCp = false\n             )\n        {","start_statement_line_start":89,"start_statement_line_end":93,"start_statement_line_in_start":1,"start_statement_line_in_end":5,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":210,"end_statement_line_end":210,"end_statement_line_in_start":122,"end_statement_line_in_end":122,"char_start":2806,"start_statement_char_start":2806,"start_statement_char_end":3096,"start_statement_char_in_start":0,"start_statement_char_in_end":290,"char_end":8865,"end_statement_char_start":8864,"end_statement_char_end":8865,"end_statement_char_in_start":6058,"end_statement_char_in_end":6059},{"body_character":"public async Task<IEnumerable<EggIncubator>> GetEggIncubators()\n        {ublic async Task<IEnumerable<EggIncubator>> GetEggIncubators()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems\n                    .Where(x => x.InventoryItemData.EggIncubators != null)\n                    .SelectMany(i => i.InventoryItemData.EggIncubators.EggIncubator)\n                    .Where(i => i != null);\n        }","children":[],"id":"31","children_ids":[],"type":"method","name":"GetEggIncubators()","body":"public async Task<IEnumerable<EggIncubator>> GetEggIncubators()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems\n                    .Where(x => x.InventoryItemData.EggIncubators != null)\n                    .SelectMany(i => i.InventoryItemData.EggIncubators.EggIncubator)\n                    .Where(i => i != null);\n        }","line_start":212,"line_end":220,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<IEnumerable<EggIncubator>> GetEggIncubators()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<IEnumerable<EggIncubator>> GetEggIncubators()\n        {","start_statement_line_start":212,"start_statement_line_end":213,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":220,"end_statement_line_end":220,"end_statement_line_in_start":9,"end_statement_line_in_end":9,"char_start":8875,"start_statement_char_start":8875,"start_statement_char_end":8948,"start_statement_char_in_start":0,"start_statement_char_in_end":73,"char_end":9293,"end_statement_char_start":9292,"end_statement_char_end":9293,"end_statement_char_in_start":417,"end_statement_char_in_end":418},{"body_character":"public async Task<IEnumerable<PokemonData>> GetEggs()\n        {ublic async Task<IEnumerable<PokemonData>> GetEggs()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.IsEgg);\n        }","children":[],"id":"32","children_ids":[],"type":"method","name":"GetEggs()","body":"public async Task<IEnumerable<PokemonData>> GetEggs()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.IsEgg);\n        }","line_start":222,"line_end":228,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<IEnumerable<PokemonData>> GetEggs()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<IEnumerable<PokemonData>> GetEggs()\n        {","start_statement_line_start":222,"start_statement_line_end":223,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":228,"end_statement_line_end":228,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":9303,"start_statement_char_start":9303,"start_statement_char_end":9366,"start_statement_char_in_start":0,"start_statement_char_in_end":63,"char_end":9608,"end_statement_char_start":9607,"end_statement_char_end":9608,"end_statement_char_in_start":304,"end_statement_char_in_end":305},{"body_character":"public async Task<PokemonData> GetHighestPokemonOfTypeByCp(PokemonData pokemon)\n        {ublic async Task<PokemonData> GetHighestPokemonOfTypeByCp(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(x => x.Cp)\n                .FirstOrDefault();\n        }","children":[],"id":"33","children_ids":[],"type":"method","name":"GetHighestPokemonOfTypeByCp(PokemonData pokemon)","body":"public async Task<PokemonData> GetHighestPokemonOfTypeByCp(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(x => x.Cp)\n                .FirstOrDefault();\n        }","line_start":230,"line_end":237,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<PokemonData> GetHighestPokemonOfTypeByCp(PokemonData pokemon)\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<PokemonData> GetHighestPokemonOfTypeByCp(PokemonData pokemon)\n        {","start_statement_line_start":230,"start_statement_line_end":231,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":237,"end_statement_line_end":237,"end_statement_line_in_start":8,"end_statement_line_in_end":8,"char_start":9618,"start_statement_char_start":9618,"start_statement_char_end":9707,"start_statement_char_in_start":0,"start_statement_char_in_end":89,"char_end":9967,"end_statement_char_start":9966,"end_statement_char_end":9967,"end_statement_char_in_start":348,"end_statement_char_in_end":349},{"body_character":"public int GetStarDust()\n        {ublic int GetStarDust()\n        {\n            GetPlayerData();\n            return _player.PlayerData.Currencies[1].Amount;\n        }","children":[],"id":"34","children_ids":[],"type":"method","name":"GetStarDust()","body":"public int GetStarDust()\n        {\n            GetPlayerData();\n            return _player.PlayerData.Currencies[1].Amount;\n        }","line_start":239,"line_end":243,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public int GetStarDust()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public int GetStarDust()\n        {","start_statement_line_start":239,"start_statement_line_end":240,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":243,"end_statement_line_end":243,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":9977,"start_statement_char_start":9977,"start_statement_char_end":10011,"start_statement_char_in_start":0,"start_statement_char_in_end":34,"char_end":10110,"end_statement_char_start":10109,"end_statement_char_end":10110,"end_statement_char_in_start":132,"end_statement_char_in_end":133},{"body_character":"public async void GetPlayerData()\n        {ublic async void GetPlayerData()\n        {\n            _player = await _client.Player.GetPlayer();\n        }","children":[],"id":"35","children_ids":[],"type":"method","name":"GetPlayerData()","body":"public async void GetPlayerData()\n        {\n            _player = await _client.Player.GetPlayer();\n        }","line_start":245,"line_end":248,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async void GetPlayerData()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async void GetPlayerData()\n        {","start_statement_line_start":245,"start_statement_line_end":246,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":248,"end_statement_line_end":248,"end_statement_line_in_start":4,"end_statement_line_in_end":4,"char_start":10120,"start_statement_char_start":10120,"start_statement_char_end":10163,"start_statement_char_in_start":0,"start_statement_char_in_end":43,"char_end":10229,"end_statement_char_start":10228,"end_statement_char_end":10229,"end_statement_char_in_start":108,"end_statement_char_in_end":109},{"body_character":"public async Task<PokemonData> GetHighestPokemonOfTypeByIv(PokemonData pokemon)\n        {ublic async Task<PokemonData> GetHighestPokemonOfTypeByIv(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                .FirstOrDefault();\n        }","children":[],"id":"36","children_ids":[],"type":"method","name":"GetHighestPokemonOfTypeByIv(PokemonData pokemon)","body":"public async Task<PokemonData> GetHighestPokemonOfTypeByIv(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                .FirstOrDefault();\n        }","line_start":250,"line_end":257,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<PokemonData> GetHighestPokemonOfTypeByIv(PokemonData pokemon)\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<PokemonData> GetHighestPokemonOfTypeByIv(PokemonData pokemon)\n        {","start_statement_line_start":250,"start_statement_line_end":251,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":257,"end_statement_line_end":257,"end_statement_line_in_start":8,"end_statement_line_in_end":8,"char_start":10239,"start_statement_char_start":10239,"start_statement_char_end":10328,"start_statement_char_in_start":0,"start_statement_char_in_end":89,"char_end":10617,"end_statement_char_start":10616,"end_statement_char_end":10617,"end_statement_char_in_start":377,"end_statement_char_in_end":378},{"body_character":"public async Task<IEnumerable<PokemonData>> GetHighestsCp(int limit)\n        {ublic async Task<IEnumerable<PokemonData>> GetHighestsCp(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(x => x.Cp).ThenBy(n => n.StaminaMax).Take(limit);\n        }","children":[],"id":"37","children_ids":[],"type":"method","name":"GetHighestsCp(int limit)","body":"public async Task<IEnumerable<PokemonData>> GetHighestsCp(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(x => x.Cp).ThenBy(n => n.StaminaMax).Take(limit);\n        }","line_start":259,"line_end":264,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<IEnumerable<PokemonData>> GetHighestsCp(int limit)\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<IEnumerable<PokemonData>> GetHighestsCp(int limit)\n        {","start_statement_line_start":259,"start_statement_line_end":260,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":264,"end_statement_line_end":264,"end_statement_line_in_start":6,"end_statement_line_in_end":6,"char_start":10627,"start_statement_char_start":10627,"start_statement_char_end":10705,"start_statement_char_in_start":0,"start_statement_char_in_end":78,"char_end":10907,"end_statement_char_start":10906,"end_statement_char_end":10907,"end_statement_char_in_start":279,"end_statement_char_in_end":280},{"body_character":"public async Task<IEnumerable<PokemonData>> GetHighestsPerfect(int limit)\n        {ublic async Task<IEnumerable<PokemonData>> GetHighestsPerfect(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).Take(limit);\n        }","children":[],"id":"38","children_ids":[],"type":"method","name":"GetHighestsPerfect(int limit)","body":"public async Task<IEnumerable<PokemonData>> GetHighestsPerfect(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).Take(limit);\n        }","line_start":266,"line_end":271,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<IEnumerable<PokemonData>> GetHighestsPerfect(int limit)\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<IEnumerable<PokemonData>> GetHighestsPerfect(int limit)\n        {","start_statement_line_start":266,"start_statement_line_end":267,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":271,"end_statement_line_end":271,"end_statement_line_in_start":6,"end_statement_line_in_end":6,"char_start":10917,"start_statement_char_start":10917,"start_statement_char_end":11000,"start_statement_char_in_start":0,"start_statement_char_in_end":83,"char_end":11205,"end_statement_char_start":11204,"end_statement_char_end":11205,"end_statement_char_in_start":287,"end_statement_char_in_end":288},{"body_character":"public async Task<int> GetItemAmountByType(ItemId type)\n        {ublic async Task<int> GetItemAmountByType(ItemId type)\n        {\n            var pokeballs = await GetItems();\n            return pokeballs.FirstOrDefault(i => i.ItemId == type)?.Count ?? 0;\n        }","children":[],"id":"39","children_ids":[],"type":"method","name":"GetItemAmountByType(ItemId type)","body":"public async Task<int> GetItemAmountByType(ItemId type)\n        {\n            var pokeballs = await GetItems();\n            return pokeballs.FirstOrDefault(i => i.ItemId == type)?.Count ?? 0;\n        }","line_start":273,"line_end":277,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<int> GetItemAmountByType(ItemId type)\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<int> GetItemAmountByType(ItemId type)\n        {","start_statement_line_start":273,"start_statement_line_end":274,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":277,"end_statement_line_end":277,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":11215,"start_statement_char_start":11215,"start_statement_char_end":11280,"start_statement_char_in_start":0,"start_statement_char_in_end":65,"char_end":11416,"end_statement_char_start":11415,"end_statement_char_end":11416,"end_statement_char_in_start":200,"end_statement_char_in_end":201},{"body_character":"public async Task<IEnumerable<ItemData>> GetItems()\n        {ublic async Task<IEnumerable<ItemData>> GetItems()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.Item)\n                .Where(p => p != null);\n        }","children":[],"id":"40","children_ids":[],"type":"method","name":"GetItems()","body":"public async Task<IEnumerable<ItemData>> GetItems()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.Item)\n                .Where(p => p != null);\n        }","line_start":279,"line_end":285,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<IEnumerable<ItemData>> GetItems()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<IEnumerable<ItemData>> GetItems()\n        {","start_statement_line_start":279,"start_statement_line_end":280,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":285,"end_statement_line_end":285,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":11426,"start_statement_char_start":11426,"start_statement_char_end":11487,"start_statement_char_in_start":0,"start_statement_char_in_end":61,"char_end":11708,"end_statement_char_start":11707,"end_statement_char_end":11708,"end_statement_char_in_start":281,"end_statement_char_in_end":282},{"body_character":"public async Task<int> GetTotalItemCount()\n        {ublic async Task<int> GetTotalItemCount()\n        {\n            var myItems = (await GetItems()).ToList();\n            int myItemCount = 0;\n            foreach (var myItem in myItems) myItemCount += myItem.Count;\n            return myItemCount;\n        }","children":[],"id":"41","children_ids":[],"type":"method","name":"GetTotalItemCount()","body":"public async Task<int> GetTotalItemCount()\n        {\n            var myItems = (await GetItems()).ToList();\n            int myItemCount = 0;\n            foreach (var myItem in myItems) myItemCount += myItem.Count;\n            return myItemCount;\n        }","line_start":287,"line_end":293,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<int> GetTotalItemCount()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<int> GetTotalItemCount()\n        {","start_statement_line_start":287,"start_statement_line_end":288,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":293,"end_statement_line_end":293,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":11718,"start_statement_char_start":11718,"start_statement_char_end":11770,"start_statement_char_in_start":0,"start_statement_char_in_end":52,"char_end":11973,"end_statement_char_start":11972,"end_statement_char_end":11973,"end_statement_char_in_start":254,"end_statement_char_in_end":255},{"body_character":"public async Task<IEnumerable<ItemData>> GetItemsToRecycle(ISession session)\n        {ublic async Task<IEnumerable<ItemData>> GetItemsToRecycle(ISession session)\n        {\n            var itemsToRecycle = new List<ItemData>();\n            var myItems = (await GetItems()).ToList();\n            if (myItems == null)\n                return itemsToRecycle;\n\n            var otherItemsToRecycle = myItems\n                .Where(x => _logicSettings.ItemRecycleFilter.Any(f => f.Key == x.ItemId && x.Count > f.Value))\n                .Select(\n                    x =>\n                        new ItemData\n                        {\n                            ItemId = x.ItemId,\n                            Count = x.Count - _logicSettings.ItemRecycleFilter.Single(f => f.Key == x.ItemId).Value,\n                            Unseen = x.Unseen\n                        });\n\n            itemsToRecycle.AddRange(otherItemsToRecycle);\n\n            return itemsToRecycle;\n        }","children":[{"body_character":"{\n                            ItemId = x.ItemId,\n                            Count = x.Count - _logicSettings.ItemRecycleFilter.Single(f => f.Key == x.ItemId).Value,\n                            Unseen = x.Unseen\n                        }","children":[],"id":"43","children_ids":[],"type":"statement","name":null,"body":"{\n                            ItemId = x.ItemId,\n                            Count = x.Count - _logicSettings.ItemRecycleFilter.Single(f => f.Key == x.ItemId).Value,\n                            Unseen = x.Unseen\n                        }","line_start":307,"line_end":311,"line_preserve_start_whitespaces":"                        ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":307,"start_statement_line_end":307,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":311,"end_statement_line_end":311,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":12521,"start_statement_char_start":12521,"start_statement_char_end":12522,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":12758,"end_statement_char_start":12757,"end_statement_char_end":12758,"end_statement_char_in_start":236,"end_statement_char_in_end":237}],"id":"42","children_ids":["43"],"type":"method","name":"GetItemsToRecycle(ISession session)","body":"public async Task<IEnumerable<ItemData>> GetItemsToRecycle(ISession session)\n        {\n            var itemsToRecycle = new List<ItemData>();\n            var myItems = (await GetItems()).ToList();\n            if (myItems == null)\n                return itemsToRecycle;\n\n            var otherItemsToRecycle = myItems\n                .Where(x => _logicSettings.ItemRecycleFilter.Any(f => f.Key == x.ItemId && x.Count > f.Value))\n                .Select(\n                    x =>\n                        new ItemData\n                        {\n                            ItemId = x.ItemId,\n                            Count = x.Count - _logicSettings.ItemRecycleFilter.Single(f => f.Key == x.ItemId).Value,\n                            Unseen = x.Unseen\n                        });\n\n            itemsToRecycle.AddRange(otherItemsToRecycle);\n\n            return itemsToRecycle;\n        }","line_start":295,"line_end":316,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<IEnumerable<ItemData>> GetItemsToRecycle(ISession session)\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<IEnumerable<ItemData>> GetItemsToRecycle(ISession session)\n        {","start_statement_line_start":295,"start_statement_line_end":296,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":316,"end_statement_line_end":316,"end_statement_line_in_start":22,"end_statement_line_in_end":22,"char_start":11983,"start_statement_char_start":11983,"start_statement_char_end":12069,"start_statement_char_in_start":0,"start_statement_char_in_end":86,"char_end":12865,"end_statement_char_start":12864,"end_statement_char_end":12865,"end_statement_char_in_start":881,"end_statement_char_in_end":882},{"body_character":"public double GetPerfect(PokemonData poke)\n        {ublic double GetPerfect(PokemonData poke)\n        {\n            var result = PokemonInfo.CalculatePokemonPerfection(poke);\n            return result;\n        }","children":[],"id":"44","children_ids":[],"type":"method","name":"GetPerfect(PokemonData poke)","body":"public double GetPerfect(PokemonData poke)\n        {\n            var result = PokemonInfo.CalculatePokemonPerfection(poke);\n            return result;\n        }","line_start":318,"line_end":322,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public double GetPerfect(PokemonData poke)\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public double GetPerfect(PokemonData poke)\n        {","start_statement_line_start":318,"start_statement_line_end":319,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":322,"end_statement_line_end":322,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":12875,"start_statement_char_start":12875,"start_statement_char_end":12927,"start_statement_char_in_start":0,"start_statement_char_in_end":52,"char_end":13035,"end_statement_char_start":13034,"end_statement_char_end":13035,"end_statement_char_in_start":159,"end_statement_char_in_end":160},{"body_character":"public async Task<IEnumerable<PlayerStats>> GetPlayerStats()\n        {ublic async Task<IEnumerable<PlayerStats>> GetPlayerStats()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.PlayerStats)\n                .Where(p => p != null);\n        }","children":[],"id":"45","children_ids":[],"type":"method","name":"GetPlayerStats()","body":"public async Task<IEnumerable<PlayerStats>> GetPlayerStats()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.PlayerStats)\n                .Where(p => p != null);\n        }","line_start":324,"line_end":330,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<IEnumerable<PlayerStats>> GetPlayerStats()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<IEnumerable<PlayerStats>> GetPlayerStats()\n        {","start_statement_line_start":324,"start_statement_line_end":325,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":330,"end_statement_line_end":330,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":13045,"start_statement_char_start":13045,"start_statement_char_end":13115,"start_statement_char_in_start":0,"start_statement_char_in_end":70,"char_end":13343,"end_statement_char_start":13342,"end_statement_char_end":13343,"end_statement_char_in_start":297,"end_statement_char_in_end":298},{"body_character":"public async Task<UseItemXpBoostResponse> UseLuckyEggConstantly()\n        {ublic async Task<UseItemXpBoostResponse> UseLuckyEggConstantly()\n        {\n            var UseLuckyEgg = await _client.Inventory.UseItemXpBoost();\n            return UseLuckyEgg;\n        }","children":[],"id":"46","children_ids":[],"type":"method","name":"UseLuckyEggConstantly()","body":"public async Task<UseItemXpBoostResponse> UseLuckyEggConstantly()\n        {\n            var UseLuckyEgg = await _client.Inventory.UseItemXpBoost();\n            return UseLuckyEgg;\n        }","line_start":332,"line_end":336,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<UseItemXpBoostResponse> UseLuckyEggConstantly()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<UseItemXpBoostResponse> UseLuckyEggConstantly()\n        {","start_statement_line_start":332,"start_statement_line_end":333,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":336,"end_statement_line_end":336,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":13353,"start_statement_char_start":13353,"start_statement_char_end":13428,"start_statement_char_in_start":0,"start_statement_char_in_end":75,"char_end":13542,"end_statement_char_start":13541,"end_statement_char_end":13542,"end_statement_char_in_start":188,"end_statement_char_in_end":189},{"body_character":"public async Task<UseIncenseResponse> UseIncenseConstantly()\n        {ublic async Task<UseIncenseResponse> UseIncenseConstantly()\n        {\n            var UseIncense = await _client.Inventory.UseIncense(ItemId.ItemIncenseOrdinary);\n            return UseIncense;\n        }","children":[],"id":"47","children_ids":[],"type":"method","name":"UseIncenseConstantly()","body":"public async Task<UseIncenseResponse> UseIncenseConstantly()\n        {\n            var UseIncense = await _client.Inventory.UseIncense(ItemId.ItemIncenseOrdinary);\n            return UseIncense;\n        }","line_start":337,"line_end":341,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<UseIncenseResponse> UseIncenseConstantly()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<UseIncenseResponse> UseIncenseConstantly()\n        {","start_statement_line_start":337,"start_statement_line_end":338,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":341,"end_statement_line_end":341,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":13551,"start_statement_char_start":13551,"start_statement_char_end":13621,"start_statement_char_in_start":0,"start_statement_char_in_end":70,"char_end":13755,"end_statement_char_start":13754,"end_statement_char_end":13755,"end_statement_char_in_start":203,"end_statement_char_in_end":204},{"body_character":"public async Task<List<InventoryItem>> GetPokeDexItems()\n        {ublic async Task<List<InventoryItem>> GetPokeDexItems()\n        {\n            List<InventoryItem> PokeDex = new List<InventoryItem>();\n            var inventory = await _client.Inventory.GetInventory();\n\n            return (from items in inventory.InventoryDelta.InventoryItems\n                   where items.InventoryItemData?.PokedexEntry != null\n                   select items).ToList();\n        }","children":[],"id":"48","children_ids":[],"type":"method","name":"GetPokeDexItems()","body":"public async Task<List<InventoryItem>> GetPokeDexItems()\n        {\n            List<InventoryItem> PokeDex = new List<InventoryItem>();\n            var inventory = await _client.Inventory.GetInventory();\n\n            return (from items in inventory.InventoryDelta.InventoryItems\n                   where items.InventoryItemData?.PokedexEntry != null\n                   select items).ToList();\n        }","line_start":343,"line_end":351,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<List<InventoryItem>> GetPokeDexItems()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<List<InventoryItem>> GetPokeDexItems()\n        {","start_statement_line_start":343,"start_statement_line_end":344,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":351,"end_statement_line_end":351,"end_statement_line_in_start":9,"end_statement_line_in_end":9,"char_start":13765,"start_statement_char_start":13765,"start_statement_char_end":13831,"start_statement_char_in_start":0,"start_statement_char_in_end":66,"char_end":14167,"end_statement_char_start":14166,"end_statement_char_end":14167,"end_statement_char_in_start":401,"end_statement_char_in_end":402},{"body_character":"public async Task<List<Candy>> GetPokemonFamilies(int retries=0)\n        {ublic async Task<List<Candy>> GetPokemonFamilies(int retries=0)\n        {\n            if (retries > 3) return null;\n\n            IEnumerable<Candy> families = null;\n            var inventory = await GetCachedInventory();\n            if ( inventory == null || inventory.InventoryDelta==null || inventory.InventoryDelta.InventoryItems==null)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                inventory = await GetCachedInventory();\n            }\n\n            try {\n                families = from item in inventory.InventoryDelta.InventoryItems\n                            where item.InventoryItemData?.Candy != null\n                            where item.InventoryItemData?.Candy.FamilyId != PokemonFamilyId.FamilyUnset\n                            group item by item.InventoryItemData?.Candy.FamilyId into family\n                            select new Candy\n                            {\n                                FamilyId = family.First().InventoryItemData.Candy.FamilyId,\n                                Candy_ = family.First().InventoryItemData.Candy.Candy_\n                            };\n            }\n            catch (NullReferenceException)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                return await GetPokemonFamilies(++retries);\n            }\n\n            return families.ToList();\n        }","children":[{"body_character":"{\n                DelayingUtils.Delay(3000, 3000);\n                inventory = await GetCachedInventory();\n            }","children":[],"id":"50","children_ids":[],"type":"statement","name":null,"body":"{\n                DelayingUtils.Delay(3000, 3000);\n                inventory = await GetCachedInventory();\n            }","line_start":360,"line_end":363,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":360,"start_statement_line_end":360,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":363,"end_statement_line_end":363,"end_statement_line_in_start":4,"end_statement_line_in_end":4,"char_start":14530,"start_statement_char_start":14530,"start_statement_char_end":14531,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":14650,"end_statement_char_start":14649,"end_statement_char_end":14650,"end_statement_char_in_start":119,"end_statement_char_in_end":120},{"body_character":"{\n                families = from item in inventory.InventoryDelta.InventoryItems\n                            where item.InventoryItemData?.Candy != null\n                            where item.InventoryItemData?.Candy.FamilyId != PokemonFamilyId.FamilyUnset\n                            group item by item.InventoryItemData?.Candy.FamilyId into family\n                            select new Candy\n                            {\n                                FamilyId = family.First().InventoryItemData.Candy.FamilyId,\n                                Candy_ = family.First().InventoryItemData.Candy.Candy_\n                            };\n            }","children":[{"body_character":"{\n                                FamilyId = family.First().InventoryItemData.Candy.FamilyId,\n                                Candy_ = family.First().InventoryItemData.Candy.Candy_\n                            }","children":[],"id":"52","children_ids":[],"type":"statement","name":null,"body":"{\n                                FamilyId = family.First().InventoryItemData.Candy.FamilyId,\n                                Candy_ = family.First().InventoryItemData.Candy.Candy_\n                            }","line_start":371,"line_end":374,"line_preserve_start_whitespaces":"                            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":371,"start_statement_line_end":371,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":374,"end_statement_line_end":374,"end_statement_line_in_start":4,"end_statement_line_in_end":4,"char_start":15092,"start_statement_char_start":15092,"start_statement_char_end":15093,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":15302,"end_statement_char_start":15301,"end_statement_char_end":15302,"end_statement_char_in_start":209,"end_statement_char_in_end":210}],"id":"51","children_ids":["52"],"type":"statement","name":null,"body":"{\n                families = from item in inventory.InventoryDelta.InventoryItems\n                            where item.InventoryItemData?.Candy != null\n                            where item.InventoryItemData?.Candy.FamilyId != PokemonFamilyId.FamilyUnset\n                            group item by item.InventoryItemData?.Candy.FamilyId into family\n                            select new Candy\n                            {\n                                FamilyId = family.First().InventoryItemData.Candy.FamilyId,\n                                Candy_ = family.First().InventoryItemData.Candy.Candy_\n                            };\n            }","line_start":365,"line_end":375,"line_preserve_start_whitespaces":"             ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":365,"start_statement_line_end":365,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":375,"end_statement_line_end":375,"end_statement_line_in_start":11,"end_statement_line_in_end":11,"char_start":14668,"start_statement_char_start":14668,"start_statement_char_end":14669,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":15317,"end_statement_char_start":15316,"end_statement_char_end":15317,"end_statement_char_in_start":648,"end_statement_char_in_end":649},{"body_character":"{\n                DelayingUtils.Delay(3000, 3000);\n                return await GetPokemonFamilies(++retries);\n            }","children":[],"id":"53","children_ids":[],"type":"statement","name":null,"body":"{\n                DelayingUtils.Delay(3000, 3000);\n                return await GetPokemonFamilies(++retries);\n            }","line_start":377,"line_end":380,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":377,"start_statement_line_end":377,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":380,"end_statement_line_end":380,"end_statement_line_in_start":4,"end_statement_line_in_end":4,"char_start":15373,"start_statement_char_start":15373,"start_statement_char_end":15374,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":15497,"end_statement_char_start":15496,"end_statement_char_end":15497,"end_statement_char_in_start":123,"end_statement_char_in_end":124}],"id":"49","children_ids":["50","51","53"],"type":"method","name":"GetPokemonFamilies(int retries=0)","body":"public async Task<List<Candy>> GetPokemonFamilies(int retries=0)\n        {\n            if (retries > 3) return null;\n\n            IEnumerable<Candy> families = null;\n            var inventory = await GetCachedInventory();\n            if ( inventory == null || inventory.InventoryDelta==null || inventory.InventoryDelta.InventoryItems==null)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                inventory = await GetCachedInventory();\n            }\n\n            try {\n                families = from item in inventory.InventoryDelta.InventoryItems\n                            where item.InventoryItemData?.Candy != null\n                            where item.InventoryItemData?.Candy.FamilyId != PokemonFamilyId.FamilyUnset\n                            group item by item.InventoryItemData?.Candy.FamilyId into family\n                            select new Candy\n                            {\n                                FamilyId = family.First().InventoryItemData.Candy.FamilyId,\n                                Candy_ = family.First().InventoryItemData.Candy.Candy_\n                            };\n            }\n            catch (NullReferenceException)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                return await GetPokemonFamilies(++retries);\n            }\n\n            return families.ToList();\n        }","line_start":353,"line_end":383,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<List<Candy>> GetPokemonFamilies(int retries=0)\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<List<Candy>> GetPokemonFamilies(int retries=0)\n        {","start_statement_line_start":353,"start_statement_line_end":354,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":383,"end_statement_line_end":383,"end_statement_line_in_start":31,"end_statement_line_in_end":31,"char_start":14177,"start_statement_char_start":14177,"start_statement_char_end":14251,"start_statement_char_in_start":0,"start_statement_char_in_end":74,"char_end":15546,"end_statement_char_start":15545,"end_statement_char_end":15546,"end_statement_char_in_start":1368,"end_statement_char_in_end":1369},{"body_character":"public async Task<IEnumerable<PokemonData>> GetPokemons()\n        {ublic async Task<IEnumerable<PokemonData>> GetPokemons()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.PokemonId > 0);\n        }","children":[],"id":"54","children_ids":[],"type":"method","name":"GetPokemons()","body":"public async Task<IEnumerable<PokemonData>> GetPokemons()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.PokemonId > 0);\n        }","line_start":385,"line_end":391,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<IEnumerable<PokemonData>> GetPokemons()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<IEnumerable<PokemonData>> GetPokemons()\n        {","start_statement_line_start":385,"start_statement_line_end":386,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":391,"end_statement_line_end":391,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":15556,"start_statement_char_start":15556,"start_statement_char_end":15623,"start_statement_char_in_start":0,"start_statement_char_in_end":67,"char_end":15873,"end_statement_char_start":15872,"end_statement_char_end":15873,"end_statement_char_in_start":316,"end_statement_char_in_end":317},{"body_character":"public async Task<IEnumerable<PokemonData>> GetFaveriotPokemon()\n        {ublic async Task<IEnumerable<PokemonData>> GetFaveriotPokemon()\n        {\n            var inventory = await GetPokemons();\n            return\n                inventory.Where(i => i.Favorite == 1);\n\n        }","children":[],"id":"55","children_ids":[],"type":"method","name":"GetFaveriotPokemon()","body":"public async Task<IEnumerable<PokemonData>> GetFaveriotPokemon()\n        {\n            var inventory = await GetPokemons();\n            return\n                inventory.Where(i => i.Favorite == 1);\n\n        }","line_start":392,"line_end":398,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<IEnumerable<PokemonData>> GetFaveriotPokemon()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<IEnumerable<PokemonData>> GetFaveriotPokemon()\n        {","start_statement_line_start":392,"start_statement_line_end":393,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":398,"end_statement_line_end":398,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":15882,"start_statement_char_start":15882,"start_statement_char_end":15956,"start_statement_char_in_start":0,"start_statement_char_in_end":74,"char_end":16090,"end_statement_char_start":16089,"end_statement_char_end":16090,"end_statement_char_in_start":207,"end_statement_char_in_end":208},{"body_character":"public async Task<IEnumerable<PokemonSettings>> GetPokemonSettings()\n        {ublic async Task<IEnumerable<PokemonSettings>> GetPokemonSettings()\n        {\n            if (_templates == null || _pokemonSettings == null)\n            {\n                _templates = await _client.Download.GetItemTemplates();\n                _pokemonSettings = _templates.ItemTemplates.Select(i => i.PokemonSettings).Where(p => p != null && p.FamilyId != PokemonFamilyId.FamilyUnset);\n            }\n\n            return _pokemonSettings;\n        }","children":[{"body_character":"{\n                _templates = await _client.Download.GetItemTemplates();\n                _pokemonSettings = _templates.ItemTemplates.Select(i => i.PokemonSettings).Where(p => p != null && p.FamilyId != PokemonFamilyId.FamilyUnset);\n            }","children":[],"id":"57","children_ids":[],"type":"statement","name":null,"body":"{\n                _templates = await _client.Download.GetItemTemplates();\n                _pokemonSettings = _templates.ItemTemplates.Select(i => i.PokemonSettings).Where(p => p != null && p.FamilyId != PokemonFamilyId.FamilyUnset);\n            }","line_start":403,"line_end":406,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":403,"start_statement_line_end":403,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":406,"end_statement_line_end":406,"end_statement_line_in_start":4,"end_statement_line_in_end":4,"char_start":16255,"start_statement_char_start":16255,"start_statement_char_end":16256,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":16501,"end_statement_char_start":16500,"end_statement_char_end":16501,"end_statement_char_in_start":245,"end_statement_char_in_end":246}],"id":"56","children_ids":["57"],"type":"method","name":"GetPokemonSettings()","body":"public async Task<IEnumerable<PokemonSettings>> GetPokemonSettings()\n        {\n            if (_templates == null || _pokemonSettings == null)\n            {\n                _templates = await _client.Download.GetItemTemplates();\n                _pokemonSettings = _templates.ItemTemplates.Select(i => i.PokemonSettings).Where(p => p != null && p.FamilyId != PokemonFamilyId.FamilyUnset);\n            }\n\n            return _pokemonSettings;\n        }","line_start":400,"line_end":409,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<IEnumerable<PokemonSettings>> GetPokemonSettings()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<IEnumerable<PokemonSettings>> GetPokemonSettings()\n        {","start_statement_line_start":400,"start_statement_line_end":401,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":409,"end_statement_line_end":409,"end_statement_line_in_start":10,"end_statement_line_in_end":10,"char_start":16100,"start_statement_char_start":16100,"start_statement_char_end":16178,"start_statement_char_in_start":0,"start_statement_char_in_end":78,"char_end":16549,"end_statement_char_start":16548,"end_statement_char_end":16549,"end_statement_char_in_start":448,"end_statement_char_in_end":449},{"body_character":"public async Task<IEnumerable<PokemonData>> GetPokemonToEvolve(IEnumerable<PokemonId> filter = null)\n        {ublic async Task<IEnumerable<PokemonData>> GetPokemonToEvolve(IEnumerable<PokemonId> filter = null)\n        {\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty).OrderByDescending(p => p.Cp);\n            //Don't evolve pokemon in gyms\n            IEnumerable<PokemonId> pokemonIds = filter as PokemonId[] ?? filter.ToArray();\n            if (pokemonIds.Any())\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => (pokemonIds.Contains(p.PokemonId)) ||\n                             (_logicSettings.EvolveAllPokemonAboveIv &&\n                              (PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue)));\n            }\n            else if (_logicSettings.EvolveAllPokemonAboveIv)\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue);\n            }\n            var pokemons = myPokemon.ToList();\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var pokemonToEvolve = new List<PokemonData>();\n            foreach (var pokemon in pokemons)\n            {\n                var settings = pokemonSettings.SingleOrDefault(x => x.PokemonId == pokemon.PokemonId);\n                var familyCandy = pokemonFamilies.SingleOrDefault(x => settings.FamilyId == x.FamilyId);\n\n                //Don't evolve if we can't evolve it\n                if (settings.EvolutionIds.Count == 0)\n                    continue;\n                //DO NOT CHANGE! TESTED AND WORKS\n                var pokemonCandyNeededAlready =\n                    (pokemonToEvolve.Count(\n                        p => pokemonSettings.Single(x => x.PokemonId == p.PokemonId).FamilyId == settings.FamilyId) + 1) *\n                    settings.CandyToEvolve;\n\n                if (familyCandy.Candy_ >= pokemonCandyNeededAlready)\n                {\n                    pokemonToEvolve.Add(pokemon);\n                }\n            }\n\n            return pokemonToEvolve;\n        }","children":[{"body_character":"///Don't evolve pokemon in gyms\n","children":[],"id":"59","children_ids":[],"type":"comment","name":null,"body":"//Don't evolve pokemon in gyms\n","line_start":415,"line_end":415,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"                   ","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":415,"start_statement_line_end":415,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":414,"end_statement_line_end":415,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":16840,"start_statement_char_start":16840,"start_statement_char_end":16842,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":16871,"end_statement_char_start":16870,"end_statement_char_end":16871,"end_statement_char_in_start":30,"end_statement_char_in_end":31},{"body_character":"{\n                myPokemon =\n                    myPokemon.Where(\n                        p => (pokemonIds.Contains(p.PokemonId)) ||\n                             (_logicSettings.EvolveAllPokemonAboveIv &&\n                              (PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue)));\n            }","children":[],"id":"60","children_ids":[],"type":"statement","name":null,"body":"{\n                myPokemon =\n                    myPokemon.Where(\n                        p => (pokemonIds.Contains(p.PokemonId)) ||\n                             (_logicSettings.EvolveAllPokemonAboveIv &&\n                              (PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue)));\n            }","line_start":418,"line_end":424,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":418,"start_statement_line_end":418,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":424,"end_statement_line_end":424,"end_statement_line_in_start":7,"end_statement_line_in_end":7,"char_start":17008,"start_statement_char_start":17008,"start_statement_char_end":17009,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":17341,"end_statement_char_start":17340,"end_statement_char_end":17341,"end_statement_char_in_start":332,"end_statement_char_in_end":333},{"body_character":"{\n                myPokemon =\n                    myPokemon.Where(\n                        p => PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue);\n            }","children":[],"id":"61","children_ids":[],"type":"statement","name":null,"body":"{\n                myPokemon =\n                    myPokemon.Where(\n                        p => PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue);\n            }","line_start":426,"line_end":430,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":426,"start_statement_line_end":426,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":430,"end_statement_line_end":430,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":17415,"start_statement_char_start":17415,"start_statement_char_end":17416,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":17605,"end_statement_char_start":17604,"end_statement_char_end":17605,"end_statement_char_in_start":189,"end_statement_char_in_end":190},{"body_character":"{\n                var settings = pokemonSettings.SingleOrDefault(x => x.PokemonId == pokemon.PokemonId);\n                var familyCandy = pokemonFamilies.SingleOrDefault(x => settings.FamilyId == x.FamilyId);\n\n                //Don't evolve if we can't evolve it\n                if (settings.EvolutionIds.Count == 0)\n                    continue;\n                //DO NOT CHANGE! TESTED AND WORKS\n                var pokemonCandyNeededAlready =\n                    (pokemonToEvolve.Count(\n                        p => pokemonSettings.Single(x => x.PokemonId == p.PokemonId).FamilyId == settings.FamilyId) + 1) *\n                    settings.CandyToEvolve;\n\n                if (familyCandy.Candy_ >= pokemonCandyNeededAlready)\n                {\n                    pokemonToEvolve.Add(pokemon);\n                }\n            }","children":[{"body_character":"///Don't evolve if we can't evolve it\n","children":[],"id":"63","children_ids":[],"type":"comment","name":null,"body":"//Don't evolve if we can't evolve it\n","line_start":445,"line_end":445,"line_preserve_start_whitespaces":"                ","line_preserve_end_whitespaces":"                   ","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":445,"start_statement_line_end":445,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":444,"end_statement_line_end":445,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":18253,"start_statement_char_start":18253,"start_statement_char_end":18255,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":18290,"end_statement_char_start":18289,"end_statement_char_end":18290,"end_statement_char_in_start":36,"end_statement_char_in_end":37},{"body_character":"///DO NOT CHANGE! TESTED AND WORKS\n","children":[],"id":"64","children_ids":[],"type":"comment","name":null,"body":"//DO NOT CHANGE! TESTED AND WORKS\n","line_start":448,"line_end":448,"line_preserve_start_whitespaces":"                ","line_preserve_end_whitespaces":"                  ","start_statement":"//","end_statement":"\n","start_statement_regexp":"/\\/\\//","start_statement_matched":"//","start_statement_line_start":448,"start_statement_line_end":448,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/\\n/","end_statement_matched":"\n","end_statement_line_start":447,"end_statement_line_end":448,"end_statement_line_in_start":1,"end_statement_line_in_end":2,"char_start":18390,"start_statement_char_start":18390,"start_statement_char_end":18392,"start_statement_char_in_start":0,"start_statement_char_in_end":2,"char_end":18424,"end_statement_char_start":18423,"end_statement_char_end":18424,"end_statement_char_in_start":33,"end_statement_char_in_end":34},{"body_character":"{\n                    pokemonToEvolve.Add(pokemon);\n                }","children":[],"id":"65","children_ids":[],"type":"statement","name":null,"body":"{\n                    pokemonToEvolve.Add(pokemon);\n                }","line_start":455,"line_end":457,"line_preserve_start_whitespaces":"                ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":455,"start_statement_line_end":455,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":457,"end_statement_line_end":457,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":18769,"start_statement_char_start":18769,"start_statement_char_end":18770,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":18838,"end_statement_char_start":18837,"end_statement_char_end":18838,"end_statement_char_in_start":68,"end_statement_char_in_end":69}],"id":"62","children_ids":["63","64","65"],"type":"statement","name":null,"body":"{\n                var settings = pokemonSettings.SingleOrDefault(x => x.PokemonId == pokemon.PokemonId);\n                var familyCandy = pokemonFamilies.SingleOrDefault(x => settings.FamilyId == x.FamilyId);\n\n                //Don't evolve if we can't evolve it\n                if (settings.EvolutionIds.Count == 0)\n                    continue;\n                //DO NOT CHANGE! TESTED AND WORKS\n                var pokemonCandyNeededAlready =\n                    (pokemonToEvolve.Count(\n                        p => pokemonSettings.Single(x => x.PokemonId == p.PokemonId).FamilyId == settings.FamilyId) + 1) *\n                    settings.CandyToEvolve;\n\n                if (familyCandy.Candy_ >= pokemonCandyNeededAlready)\n                {\n                    pokemonToEvolve.Add(pokemon);\n                }\n            }","line_start":441,"line_end":458,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":441,"start_statement_line_end":441,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":458,"end_statement_line_end":458,"end_statement_line_in_start":18,"end_statement_line_in_end":18,"char_start":18026,"start_statement_char_start":18026,"start_statement_char_end":18027,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":18852,"end_statement_char_start":18851,"end_statement_char_end":18852,"end_statement_char_in_start":825,"end_statement_char_in_end":826}],"id":"58","children_ids":["59","60","61","62"],"type":"method","name":"GetPokemonToEvolve(IEnumerable<PokemonId> filter = null)","body":"public async Task<IEnumerable<PokemonData>> GetPokemonToEvolve(IEnumerable<PokemonId> filter = null)\n        {\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty).OrderByDescending(p => p.Cp);\n            //Don't evolve pokemon in gyms\n            IEnumerable<PokemonId> pokemonIds = filter as PokemonId[] ?? filter.ToArray();\n            if (pokemonIds.Any())\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => (pokemonIds.Contains(p.PokemonId)) ||\n                             (_logicSettings.EvolveAllPokemonAboveIv &&\n                              (PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue)));\n            }\n            else if (_logicSettings.EvolveAllPokemonAboveIv)\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue);\n            }\n            var pokemons = myPokemon.ToList();\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var pokemonToEvolve = new List<PokemonData>();\n            foreach (var pokemon in pokemons)\n            {\n                var settings = pokemonSettings.SingleOrDefault(x => x.PokemonId == pokemon.PokemonId);\n                var familyCandy = pokemonFamilies.SingleOrDefault(x => settings.FamilyId == x.FamilyId);\n\n                //Don't evolve if we can't evolve it\n                if (settings.EvolutionIds.Count == 0)\n                    continue;\n                //DO NOT CHANGE! TESTED AND WORKS\n                var pokemonCandyNeededAlready =\n                    (pokemonToEvolve.Count(\n                        p => pokemonSettings.Single(x => x.PokemonId == p.PokemonId).FamilyId == settings.FamilyId) + 1) *\n                    settings.CandyToEvolve;\n\n                if (familyCandy.Candy_ >= pokemonCandyNeededAlready)\n                {\n                    pokemonToEvolve.Add(pokemon);\n                }\n            }\n\n            return pokemonToEvolve;\n        }","line_start":411,"line_end":461,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<IEnumerable<PokemonData>> GetPokemonToEvolve(IEnumerable<PokemonId> filter = null)\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<IEnumerable<PokemonData>> GetPokemonToEvolve(IEnumerable<PokemonId> filter = null)\n        {","start_statement_line_start":411,"start_statement_line_end":412,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":461,"end_statement_line_end":461,"end_statement_line_in_start":51,"end_statement_line_in_end":51,"char_start":16559,"start_statement_char_start":16559,"start_statement_char_end":16669,"start_statement_char_in_start":0,"start_statement_char_in_end":110,"char_end":18899,"end_statement_char_start":18898,"end_statement_char_end":18899,"end_statement_char_in_start":2339,"end_statement_char_in_end":2340},{"body_character":"public async Task<LevelUpRewardsResponse> GetLevelUpRewards(int level)\n        {ublic async Task<LevelUpRewardsResponse> GetLevelUpRewards(int level)\n        {\n            if (_level == 0 || level > _level)\n            {\n                _level = level;\n                return await _client.Player.GetLevelUpRewards(level);\n            }\n\n            return new LevelUpRewardsResponse();\n        }","children":[{"body_character":"{\n                _level = level;\n                return await _client.Player.GetLevelUpRewards(level);\n            }","children":[],"id":"67","children_ids":[],"type":"statement","name":null,"body":"{\n                _level = level;\n                return await _client.Player.GetLevelUpRewards(level);\n            }","line_start":466,"line_end":469,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":466,"start_statement_line_end":466,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":469,"end_statement_line_end":469,"end_statement_line_in_start":4,"end_statement_line_in_end":4,"char_start":19049,"start_statement_char_start":19049,"start_statement_char_end":19050,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":19166,"end_statement_char_start":19165,"end_statement_char_end":19166,"end_statement_char_in_start":116,"end_statement_char_in_end":117}],"id":"66","children_ids":["67"],"type":"method","name":"GetLevelUpRewards(int level)","body":"public async Task<LevelUpRewardsResponse> GetLevelUpRewards(int level)\n        {\n            if (_level == 0 || level > _level)\n            {\n                _level = level;\n                return await _client.Player.GetLevelUpRewards(level);\n            }\n\n            return new LevelUpRewardsResponse();\n        }","line_start":463,"line_end":472,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<LevelUpRewardsResponse> GetLevelUpRewards(int level)\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<LevelUpRewardsResponse> GetLevelUpRewards(int level)\n        {","start_statement_line_start":463,"start_statement_line_end":464,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":472,"end_statement_line_end":472,"end_statement_line_in_start":10,"end_statement_line_in_end":10,"char_start":18909,"start_statement_char_start":18909,"start_statement_char_end":18989,"start_statement_char_in_start":0,"start_statement_char_in_end":80,"char_end":19226,"end_statement_char_start":19225,"end_statement_char_end":19226,"end_statement_char_in_start":316,"end_statement_char_in_end":317},{"body_character":"public async Task<List<PokemonData>> GetPokemonToUpgrade()\n        {ublic async Task<List<PokemonData>> GetPokemonToUpgrade()\n        {\n            var upgradePokemon = new List<PokemonData>();\n\n            if (!_logicSettings.AutomaticallyLevelUpPokemon)\n                return upgradePokemon;\n\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty);\n\n            IEnumerable<PokemonData> highestPokemonForUpgrade = (_logicSettings.UpgradePokemonMinimumStatsOperator.ToLower().Equals(\"and)) ?\n                myPokemon.Where(\n                        p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum &&\n                            PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList() :\n                myPokemon.Where(\n                    p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum ||\n                        PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList();\n\n            return upgradePokemon = (_logicSettings.LevelUpByCPorIv.ToLower().Equals(\"iv)) ?\n                    highestPokemonForUpgrade.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).ToList() :\n                    highestPokemonForUpgrade.OrderByDescending(p => p.Cp).ToList();\n        }","children":[],"id":"68","children_ids":[],"type":"method","name":"GetPokemonToUpgrade()","body":"public async Task<List<PokemonData>> GetPokemonToUpgrade()\n        {\n            var upgradePokemon = new List<PokemonData>();\n\n            if (!_logicSettings.AutomaticallyLevelUpPokemon)\n                return upgradePokemon;\n\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty);\n\n            IEnumerable<PokemonData> highestPokemonForUpgrade = (_logicSettings.UpgradePokemonMinimumStatsOperator.ToLower().Equals(\"and\")) ?\n                myPokemon.Where(\n                        p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum &&\n                            PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList() :\n                myPokemon.Where(\n                    p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum ||\n                        PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList();\n\n            return upgradePokemon = (_logicSettings.LevelUpByCPorIv.ToLower().Equals(\"iv\")) ?\n                    highestPokemonForUpgrade.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).ToList() :\n                    highestPokemonForUpgrade.OrderByDescending(p => p.Cp).ToList();\n        }","line_start":474,"line_end":495,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<List<PokemonData>> GetPokemonToUpgrade()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<List<PokemonData>> GetPokemonToUpgrade()\n        {","start_statement_line_start":474,"start_statement_line_end":475,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":495,"end_statement_line_end":495,"end_statement_line_in_start":22,"end_statement_line_in_end":22,"char_start":19236,"start_statement_char_start":19236,"start_statement_char_end":19304,"start_statement_char_in_start":0,"start_statement_char_in_end":68,"char_end":20564,"end_statement_char_start":20563,"end_statement_char_end":20564,"end_statement_char_in_start":1327,"end_statement_char_in_end":1328},{"body_character":"public TransferFilter GetPokemonTransferFilter(PokemonId pokemon)\n        {ublic TransferFilter GetPokemonTransferFilter(PokemonId pokemon)\n        {\n            if (_logicSettings.PokemonsTransferFilter != null &&\n                _logicSettings.PokemonsTransferFilter.ContainsKey(pokemon))\n            {\n                return _logicSettings.PokemonsTransferFilter[pokemon];\n            }\n            return new TransferFilter(_logicSettings.KeepMinCp, _logicSettings.KeepMinLvl, _logicSettings.UseKeepMinLvl, _logicSettings.KeepMinIvPercentage,\n                _logicSettings.KeepMinOperator, _logicSettings.KeepMinDuplicatePokemon);\n        }","children":[{"body_character":"{\n                return _logicSettings.PokemonsTransferFilter[pokemon];\n            }","children":[],"id":"70","children_ids":[],"type":"statement","name":null,"body":"{\n                return _logicSettings.PokemonsTransferFilter[pokemon];\n            }","line_start":501,"line_end":503,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":501,"start_statement_line_end":501,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":503,"end_statement_line_end":503,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":20803,"start_statement_char_start":20803,"start_statement_char_end":20804,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":20889,"end_statement_char_start":20888,"end_statement_char_end":20889,"end_statement_char_in_start":85,"end_statement_char_in_end":86}],"id":"69","children_ids":["70"],"type":"method","name":"GetPokemonTransferFilter(PokemonId pokemon)","body":"public TransferFilter GetPokemonTransferFilter(PokemonId pokemon)\n        {\n            if (_logicSettings.PokemonsTransferFilter != null &&\n                _logicSettings.PokemonsTransferFilter.ContainsKey(pokemon))\n            {\n                return _logicSettings.PokemonsTransferFilter[pokemon];\n            }\n            return new TransferFilter(_logicSettings.KeepMinCp, _logicSettings.KeepMinLvl, _logicSettings.UseKeepMinLvl, _logicSettings.KeepMinIvPercentage,\n                _logicSettings.KeepMinOperator, _logicSettings.KeepMinDuplicatePokemon);\n        }","line_start":497,"line_end":506,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public TransferFilter GetPokemonTransferFilter(PokemonId pokemon)\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public TransferFilter GetPokemonTransferFilter(PokemonId pokemon)\n        {","start_statement_line_start":497,"start_statement_line_end":498,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":506,"end_statement_line_end":506,"end_statement_line_in_start":10,"end_statement_line_in_end":10,"char_start":20574,"start_statement_char_start":20574,"start_statement_char_end":20649,"start_statement_char_in_start":0,"start_statement_char_in_end":75,"char_end":21145,"end_statement_char_start":21144,"end_statement_char_end":21145,"end_statement_char_in_start":570,"end_statement_char_in_end":571},{"body_character":"public async Task<GetInventoryResponse> RefreshCachedInventory()\n        {ublic async Task<GetInventoryResponse> RefreshCachedInventory()\n        {\n            var now = DateTime.UtcNow;\n            var ss = new SemaphoreSlim(10);\n\n            await ss.WaitAsync();\n            try\n            {\n                _lastRefresh = now;\n                _cachedInventory = await _client.Inventory.GetInventory();\n                return _cachedInventory;\n            }\n            finally\n            {\n                ss.Release();\n            }\n        }","children":[{"body_character":"{\n                _lastRefresh = now;\n                _cachedInventory = await _client.Inventory.GetInventory();\n                return _cachedInventory;\n            }","children":[],"id":"72","children_ids":[],"type":"statement","name":null,"body":"{\n                _lastRefresh = now;\n                _cachedInventory = await _client.Inventory.GetInventory();\n                return _cachedInventory;\n            }","line_start":515,"line_end":519,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":515,"start_statement_line_end":515,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":519,"end_statement_line_end":519,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":21376,"start_statement_char_start":21376,"start_statement_char_end":21377,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":21543,"end_statement_char_start":21542,"end_statement_char_end":21543,"end_statement_char_in_start":166,"end_statement_char_in_end":167},{"body_character":"{\n                ss.Release();\n            }","children":[],"id":"73","children_ids":[],"type":"statement","name":null,"body":"{\n                ss.Release();\n            }","line_start":521,"line_end":523,"line_preserve_start_whitespaces":"            ","line_preserve_end_whitespaces":"","start_statement":"{","end_statement":"}","start_statement_regexp":"/{/","start_statement_matched":"{","start_statement_line_start":521,"start_statement_line_end":521,"start_statement_line_in_start":1,"start_statement_line_in_end":1,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":523,"end_statement_line_end":523,"end_statement_line_in_start":3,"end_statement_line_in_end":3,"char_start":21576,"start_statement_char_start":21576,"start_statement_char_end":21577,"start_statement_char_in_start":0,"start_statement_char_in_end":1,"char_end":21621,"end_statement_char_start":21620,"end_statement_char_end":21621,"end_statement_char_in_start":44,"end_statement_char_in_end":45}],"id":"71","children_ids":["72","73"],"type":"method","name":"RefreshCachedInventory()","body":"public async Task<GetInventoryResponse> RefreshCachedInventory()\n        {\n            var now = DateTime.UtcNow;\n            var ss = new SemaphoreSlim(10);\n\n            await ss.WaitAsync();\n            try\n            {\n                _lastRefresh = now;\n                _cachedInventory = await _client.Inventory.GetInventory();\n                return _cachedInventory;\n            }\n            finally\n            {\n                ss.Release();\n            }\n        }","line_start":508,"line_end":524,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<GetInventoryResponse> RefreshCachedInventory()\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<GetInventoryResponse> RefreshCachedInventory()\n        {","start_statement_line_start":508,"start_statement_line_end":509,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":524,"end_statement_line_end":524,"end_statement_line_in_start":17,"end_statement_line_in_end":17,"char_start":21155,"start_statement_char_start":21155,"start_statement_char_end":21229,"start_statement_char_in_start":0,"start_statement_char_in_end":74,"char_end":21631,"end_statement_char_start":21630,"end_statement_char_end":21631,"end_statement_char_in_start":475,"end_statement_char_in_end":476},{"body_character":"public async Task<UpgradePokemonResponse> UpgradePokemon(ulong pokemonid)\n        {ublic async Task<UpgradePokemonResponse> UpgradePokemon(ulong pokemonid)\n        {\n            var upgradeResult = await _client.Inventory.UpgradePokemon(pokemonid);\n            return upgradeResult;\n        }","children":[],"id":"74","children_ids":[],"type":"method","name":"UpgradePokemon(ulong pokemonid)","body":"public async Task<UpgradePokemonResponse> UpgradePokemon(ulong pokemonid)\n        {\n            var upgradeResult = await _client.Inventory.UpgradePokemon(pokemonid);\n            return upgradeResult;\n        }","line_start":526,"line_end":530,"line_preserve_start_whitespaces":"        ","line_preserve_end_whitespaces":"","start_statement":"public async Task<UpgradePokemonResponse> UpgradePokemon(ulong pokemonid)\n        {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+([a-zA-Z0-9_]+)\\s*\\(([^()]|\\n)*?\\)[a-zA-Z0-9_\\s]*{/","start_statement_matched":"public async Task<UpgradePokemonResponse> UpgradePokemon(ulong pokemonid)\n        {","start_statement_line_start":526,"start_statement_line_end":527,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":530,"end_statement_line_end":530,"end_statement_line_in_start":5,"end_statement_line_in_end":5,"char_start":21641,"start_statement_char_start":21641,"start_statement_char_end":21724,"start_statement_char_in_start":0,"start_statement_char_in_end":83,"char_end":21851,"end_statement_char_start":21850,"end_statement_char_end":21851,"end_statement_char_in_start":209,"end_statement_char_in_end":210}],"id":"1","children_ids":["2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","31","32","33","34","35","36","37","38","39","40","41","42","44","45","46","47","48","49","54","55","56","58","66","68","69","71","74"],"type":"class","name":"Inventory","body":"public class Inventory\n    {\n        private readonly Client _client;\n        private readonly ILogicSettings _logicSettings;\n        private GetPlayerResponse _player = null;\n        private int _level = 0;\n        private DownloadItemTemplatesResponse _templates;\n        private IEnumerable<PokemonSettings> _pokemonSettings;\n\n        private readonly List<ItemId> _revives = new List<ItemId> { ItemId.ItemRevive, ItemId.ItemMaxRevive };\n        private GetInventoryResponse _cachedInventory;\n        private DateTime _lastRefresh;\n\n        public Inventory(Client client, ILogicSettings logicSettings)\n        {\n            _client = client;\n            _logicSettings = logicSettings;\n        }\n\n        private readonly List<ItemId> _pokeballs = new List<ItemId>\n        {\n            ItemId.ItemPokeBall,\n            ItemId.ItemGreatBall,\n            ItemId.ItemUltraBall,\n            ItemId.ItemMasterBall\n        };\n\n        private readonly List<ItemId> _potions = new List<ItemId>\n        {\n            ItemId.ItemPotion,\n            ItemId.ItemSuperPotion,\n            ItemId.ItemHyperPotion,\n            ItemId.ItemMaxPotion\n        };\n\n        public async Task DeletePokemonFromInvById(ulong id)\n        {\n            var inventory = await GetCachedInventory();\n            var pokemon =\n                inventory.InventoryDelta.InventoryItems.FirstOrDefault(\n                    i => i.InventoryItemData.PokemonData != null && i.InventoryItemData.PokemonData.Id == id);\n            if (pokemon != null)\n                inventory.InventoryDelta.InventoryItems.Remove(pokemon);\n        }\n\n        public async Task<LevelUpRewardsResponse> GetLevelUpRewards(Inventory inv )\n        {\n            return await GetLevelUpRewards(inv.GetPlayerStats().Result.FirstOrDefault().Level);\n        }\n\n        private async Task<GetInventoryResponse> GetCachedInventory()\n        {\n            if (_player==null) GetPlayerData();\n            var now = DateTime.UtcNow;\n\n            if (_cachedInventory!=null && _lastRefresh.AddSeconds(30).Ticks > now.Ticks)\n                return _cachedInventory;\n\n            return await RefreshCachedInventory();\n        }\n\n\n        public async Task<IEnumerable<PokemonData>> GetDuplicatePokemonToTransfer(\n                IEnumerable<PokemonId> pokemonsNotToTransfer, IEnumerable<PokemonId> pokemonsToEvolve,\n                bool keepPokemonsThatCanEvolve = false, bool prioritizeIVoverCp = false\n             )\n        {\n            var myPokemon = await GetPokemons();\n\n            var myPokemonList = myPokemon.ToList();\n\n            var pokemonToTransfer = myPokemonList.Where(p => !pokemonsNotToTransfer.Contains(p.PokemonId) && p.DeployedFortId == string.Empty && p.Favorite == 0).ToList();\n\n            try\n            {\n                pokemonToTransfer =\n                    pokemonToTransfer.Where(\n                        p =>\n                        {\n                            var pokemonTransferFilter = GetPokemonTransferFilter(p.PokemonId);\n\n                            return !pokemonTransferFilter.MovesOperator.BoolFunc(\n                                        pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.MovesOperator.InverseBool(pokemonTransferFilter.Moves.Count > 0),\n                                                pokemonTransferFilter.Moves.Any(moveset =>\n                                                    pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                        pokemonTransferFilter.MovesOperator.InverseBool(moveset.Count > 0),\n                                                        moveset.Intersect(new[] { p.Move1, p.Move2 }).Count() == Math.Max(Math.Min(moveset.Count, 2),0)))),\n                                        pokemonTransferFilter.KeepMinOperator.BoolFunc(\n                                            p.Cp >= pokemonTransferFilter.KeepMinCp,\n                                            PokemonInfo.CalculatePokemonPerfection(p) >= pokemonTransferFilter.KeepMinIvPercentage,\n                                            pokemonTransferFilter.KeepMinOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.KeepMinOperator.InverseBool(pokemonTransferFilter.UseKeepMinLvl),\n                                                PokemonInfo.GetLevel(p) >= pokemonTransferFilter.KeepMinLvl)));\n\n                        }).ToList();\n            }\n            catch (Exception e)\n            {\n                throw e;\n            }\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var results = new List<PokemonData>();\n\n            foreach (var pokemonGroupToTransfer in pokemonToTransfer.GroupBy(p => p.PokemonId).ToList())\n            {\n                var amountToKeepInStorage = Math.Max(GetPokemonTransferFilter(pokemonGroupToTransfer.Key).KeepMinDuplicatePokemon, 0);\n\n                var inStorage = myPokemonList.Count(data => data.PokemonId == pokemonGroupToTransfer.Key);\n                var needToRemove = inStorage - amountToKeepInStorage;\n\n                if (needToRemove <= 0)\n                    continue;\n\n                var weakPokemonCount = pokemonGroupToTransfer.Count();\n                var canBeRemoved = Math.Min(needToRemove, weakPokemonCount);\n\n\n                var settings = pokemonSettings.Single(x => x.PokemonId == pokemonGroupToTransfer.Key);\n                //Lets calc new canBeRemoved pokemons according to transferring some of them for +1 candy or to evolving for +1 candy\n                if (keepPokemonsThatCanEvolve &&\n                    pokemonsToEvolve.Contains(pokemonGroupToTransfer.Key) &&\n                    settings.CandyToEvolve > 0 &&\n                    settings.EvolutionIds.Count != 0)\n                {\n                    var familyCandy = pokemonFamilies.Single(x => settings.FamilyId == x.FamilyId);\n\n                    // its an solution in fixed numbers of equations with two variables\n                    // (N = X + Y, X + C + Y >= Y * E) -> X >= (N * (E - 1) - C) / E\n                    // where N - current canBeRemoved,  X - new canBeRemoved, Y - possible to keep more, E - CandyToEvolve, C - candy amount\n                    canBeRemoved = (int)Math.Ceiling((double)((settings.CandyToEvolve - 1) * canBeRemoved - familyCandy.Candy_) / settings.CandyToEvolve);\n                }\n\n                if (canBeRemoved <= 0)\n                    continue;\n\n                if (prioritizeIVoverCp)\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(PokemonInfo.CalculatePokemonPerfection)\n                        .ThenBy(n => n.Cp)\n                        .Take(canBeRemoved));\n                }\n                else\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(x => x.Cp)\n                        .ThenBy(PokemonInfo.CalculatePokemonPerfection)\n                        .Take(canBeRemoved));\n                }\n            }\n\n            #region For testing\n/*\n            results.ForEach(data =>\n            {\n                var allpokemonoftype = myPokemonList.Where(x => x.PokemonId == data.PokemonId);\n                var bestPokemonOfType =\n                    (_logicSettings.PrioritizeIvOverCp\n                         ? allpokemonoftype\n                        .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                        .FirstOrDefault()\n                         : allpokemonoftype\n                        .OrderByDescending(x => x.Cp)\n                        .FirstOrDefault())\n                    ?? data;\n\n                var perfection = PokemonInfo.CalculatePokemonPerfection(data);\n                var cp = data.Cp;\n\n                var bestPerfection = PokemonInfo.CalculatePokemonPerfection(bestPokemonOfType);\n                var bestCp = bestPokemonOfType.Cp;\n            });\n*/\n            #endregion\n\n            return results;\n        }\n\n        public async Task<IEnumerable<EggIncubator>> GetEggIncubators()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems\n                    .Where(x => x.InventoryItemData.EggIncubators != null)\n                    .SelectMany(i => i.InventoryItemData.EggIncubators.EggIncubator)\n                    .Where(i => i != null);\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetEggs()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.IsEgg);\n        }\n\n        public async Task<PokemonData> GetHighestPokemonOfTypeByCp(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(x => x.Cp)\n                .FirstOrDefault();\n        }\n\n        public int GetStarDust()\n        {\n            GetPlayerData();\n            return _player.PlayerData.Currencies[1].Amount;\n        }\n\n        public async void GetPlayerData()\n        {\n            _player = await _client.Player.GetPlayer();\n        }\n\n        public async Task<PokemonData> GetHighestPokemonOfTypeByIv(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                .FirstOrDefault();\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetHighestsCp(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(x => x.Cp).ThenBy(n => n.StaminaMax).Take(limit);\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetHighestsPerfect(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).Take(limit);\n        }\n\n        public async Task<int> GetItemAmountByType(ItemId type)\n        {\n            var pokeballs = await GetItems();\n            return pokeballs.FirstOrDefault(i => i.ItemId == type)?.Count ?? 0;\n        }\n\n        public async Task<IEnumerable<ItemData>> GetItems()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.Item)\n                .Where(p => p != null);\n        }\n\n        public async Task<int> GetTotalItemCount()\n        {\n            var myItems = (await GetItems()).ToList();\n            int myItemCount = 0;\n            foreach (var myItem in myItems) myItemCount += myItem.Count;\n            return myItemCount;\n        }\n\n        public async Task<IEnumerable<ItemData>> GetItemsToRecycle(ISession session)\n        {\n            var itemsToRecycle = new List<ItemData>();\n            var myItems = (await GetItems()).ToList();\n            if (myItems == null)\n                return itemsToRecycle;\n\n            var otherItemsToRecycle = myItems\n                .Where(x => _logicSettings.ItemRecycleFilter.Any(f => f.Key == x.ItemId && x.Count > f.Value))\n                .Select(\n                    x =>\n                        new ItemData\n                        {\n                            ItemId = x.ItemId,\n                            Count = x.Count - _logicSettings.ItemRecycleFilter.Single(f => f.Key == x.ItemId).Value,\n                            Unseen = x.Unseen\n                        });\n\n            itemsToRecycle.AddRange(otherItemsToRecycle);\n\n            return itemsToRecycle;\n        }\n\n        public double GetPerfect(PokemonData poke)\n        {\n            var result = PokemonInfo.CalculatePokemonPerfection(poke);\n            return result;\n        }\n\n        public async Task<IEnumerable<PlayerStats>> GetPlayerStats()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.PlayerStats)\n                .Where(p => p != null);\n        }\n\n        public async Task<UseItemXpBoostResponse> UseLuckyEggConstantly()\n        {\n            var UseLuckyEgg = await _client.Inventory.UseItemXpBoost();\n            return UseLuckyEgg;\n        }\n        public async Task<UseIncenseResponse> UseIncenseConstantly()\n        {\n            var UseIncense = await _client.Inventory.UseIncense(ItemId.ItemIncenseOrdinary);\n            return UseIncense;\n        }\n\n        public async Task<List<InventoryItem>> GetPokeDexItems()\n        {\n            List<InventoryItem> PokeDex = new List<InventoryItem>();\n            var inventory = await _client.Inventory.GetInventory();\n\n            return (from items in inventory.InventoryDelta.InventoryItems\n                   where items.InventoryItemData?.PokedexEntry != null\n                   select items).ToList();\n        }\n\n        public async Task<List<Candy>> GetPokemonFamilies(int retries=0)\n        {\n            if (retries > 3) return null;\n\n            IEnumerable<Candy> families = null;\n            var inventory = await GetCachedInventory();\n            if ( inventory == null || inventory.InventoryDelta==null || inventory.InventoryDelta.InventoryItems==null)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                inventory = await GetCachedInventory();\n            }\n\n            try {\n                families = from item in inventory.InventoryDelta.InventoryItems\n                            where item.InventoryItemData?.Candy != null\n                            where item.InventoryItemData?.Candy.FamilyId != PokemonFamilyId.FamilyUnset\n                            group item by item.InventoryItemData?.Candy.FamilyId into family\n                            select new Candy\n                            {\n                                FamilyId = family.First().InventoryItemData.Candy.FamilyId,\n                                Candy_ = family.First().InventoryItemData.Candy.Candy_\n                            };\n            }\n            catch (NullReferenceException)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                return await GetPokemonFamilies(++retries);\n            }\n\n            return families.ToList();\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetPokemons()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.PokemonId > 0);\n        }\n        public async Task<IEnumerable<PokemonData>> GetFaveriotPokemon()\n        {\n            var inventory = await GetPokemons();\n            return\n                inventory.Where(i => i.Favorite == 1);\n\n        }\n\n        public async Task<IEnumerable<PokemonSettings>> GetPokemonSettings()\n        {\n            if (_templates == null || _pokemonSettings == null)\n            {\n                _templates = await _client.Download.GetItemTemplates();\n                _pokemonSettings = _templates.ItemTemplates.Select(i => i.PokemonSettings).Where(p => p != null && p.FamilyId != PokemonFamilyId.FamilyUnset);\n            }\n\n            return _pokemonSettings;\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetPokemonToEvolve(IEnumerable<PokemonId> filter = null)\n        {\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty).OrderByDescending(p => p.Cp);\n            //Don't evolve pokemon in gyms\n            IEnumerable<PokemonId> pokemonIds = filter as PokemonId[] ?? filter.ToArray();\n            if (pokemonIds.Any())\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => (pokemonIds.Contains(p.PokemonId)) ||\n                             (_logicSettings.EvolveAllPokemonAboveIv &&\n                              (PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue)));\n            }\n            else if (_logicSettings.EvolveAllPokemonAboveIv)\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue);\n            }\n            var pokemons = myPokemon.ToList();\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var pokemonToEvolve = new List<PokemonData>();\n            foreach (var pokemon in pokemons)\n            {\n                var settings = pokemonSettings.SingleOrDefault(x => x.PokemonId == pokemon.PokemonId);\n                var familyCandy = pokemonFamilies.SingleOrDefault(x => settings.FamilyId == x.FamilyId);\n\n                //Don't evolve if we can't evolve it\n                if (settings.EvolutionIds.Count == 0)\n                    continue;\n                //DO NOT CHANGE! TESTED AND WORKS\n                var pokemonCandyNeededAlready =\n                    (pokemonToEvolve.Count(\n                        p => pokemonSettings.Single(x => x.PokemonId == p.PokemonId).FamilyId == settings.FamilyId) + 1) *\n                    settings.CandyToEvolve;\n\n                if (familyCandy.Candy_ >= pokemonCandyNeededAlready)\n                {\n                    pokemonToEvolve.Add(pokemon);\n                }\n            }\n\n            return pokemonToEvolve;\n        }\n\n        public async Task<LevelUpRewardsResponse> GetLevelUpRewards(int level)\n        {\n            if (_level == 0 || level > _level)\n            {\n                _level = level;\n                return await _client.Player.GetLevelUpRewards(level);\n            }\n\n            return new LevelUpRewardsResponse();\n        }\n\n        public async Task<List<PokemonData>> GetPokemonToUpgrade()\n        {\n            var upgradePokemon = new List<PokemonData>();\n\n            if (!_logicSettings.AutomaticallyLevelUpPokemon)\n                return upgradePokemon;\n\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty);\n\n            IEnumerable<PokemonData> highestPokemonForUpgrade = (_logicSettings.UpgradePokemonMinimumStatsOperator.ToLower().Equals(\"and\")) ?\n                myPokemon.Where(\n                        p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum &&\n                            PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList() :\n                myPokemon.Where(\n                    p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum ||\n                        PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList();\n\n            return upgradePokemon = (_logicSettings.LevelUpByCPorIv.ToLower().Equals(\"iv\")) ?\n                    highestPokemonForUpgrade.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).ToList() :\n                    highestPokemonForUpgrade.OrderByDescending(p => p.Cp).ToList();\n        }\n\n        public TransferFilter GetPokemonTransferFilter(PokemonId pokemon)\n        {\n            if (_logicSettings.PokemonsTransferFilter != null &&\n                _logicSettings.PokemonsTransferFilter.ContainsKey(pokemon))\n            {\n                return _logicSettings.PokemonsTransferFilter[pokemon];\n            }\n            return new TransferFilter(_logicSettings.KeepMinCp, _logicSettings.KeepMinLvl, _logicSettings.UseKeepMinLvl, _logicSettings.KeepMinIvPercentage,\n                _logicSettings.KeepMinOperator, _logicSettings.KeepMinDuplicatePokemon);\n        }\n\n        public async Task<GetInventoryResponse> RefreshCachedInventory()\n        {\n            var now = DateTime.UtcNow;\n            var ss = new SemaphoreSlim(10);\n\n            await ss.WaitAsync();\n            try\n            {\n                _lastRefresh = now;\n                _cachedInventory = await _client.Inventory.GetInventory();\n                return _cachedInventory;\n            }\n            finally\n            {\n                ss.Release();\n            }\n        }\n\n        public async Task<UpgradePokemonResponse> UpgradePokemon(ulong pokemonid)\n        {\n            var upgradeResult = await _client.Inventory.UpgradePokemon(pokemonid);\n            return upgradeResult;\n        }\n    }","line_start":27,"line_end":531,"line_preserve_start_whitespaces":"    ","line_preserve_end_whitespaces":"","start_statement":"public class Inventory\n    {","end_statement":"}","start_statement_regexp":"/[a-zA-Z]{1}[a-zA-Z0-9_<>\\s]+\\s+class\\s+([A-Za-z0-9_]+)\\s?[A-Za-z0-9_\\\\\\s]*{/","start_statement_matched":"public class Inventory\n    {","start_statement_line_start":27,"start_statement_line_end":28,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":531,"end_statement_line_end":531,"end_statement_line_in_start":505,"end_statement_line_in_end":505,"char_start":632,"start_statement_char_start":632,"start_statement_char_end":660,"start_statement_char_in_start":0,"start_statement_char_in_end":28,"char_end":21857,"end_statement_char_start":21856,"end_statement_char_end":21857,"end_statement_char_in_start":21224,"end_statement_char_in_end":21225}],"id":"0","children_ids":["1"],"type":"namespace","name":"PoGo.NecroBot.Logic","body":"namespace PoGo.NecroBot.Logic\n{\n\n    public class Inventory\n    {\n        private readonly Client _client;\n        private readonly ILogicSettings _logicSettings;\n        private GetPlayerResponse _player = null;\n        private int _level = 0;\n        private DownloadItemTemplatesResponse _templates;\n        private IEnumerable<PokemonSettings> _pokemonSettings;\n\n        private readonly List<ItemId> _revives = new List<ItemId> { ItemId.ItemRevive, ItemId.ItemMaxRevive };\n        private GetInventoryResponse _cachedInventory;\n        private DateTime _lastRefresh;\n\n        public Inventory(Client client, ILogicSettings logicSettings)\n        {\n            _client = client;\n            _logicSettings = logicSettings;\n        }\n\n        private readonly List<ItemId> _pokeballs = new List<ItemId>\n        {\n            ItemId.ItemPokeBall,\n            ItemId.ItemGreatBall,\n            ItemId.ItemUltraBall,\n            ItemId.ItemMasterBall\n        };\n\n        private readonly List<ItemId> _potions = new List<ItemId>\n        {\n            ItemId.ItemPotion,\n            ItemId.ItemSuperPotion,\n            ItemId.ItemHyperPotion,\n            ItemId.ItemMaxPotion\n        };\n\n        public async Task DeletePokemonFromInvById(ulong id)\n        {\n            var inventory = await GetCachedInventory();\n            var pokemon =\n                inventory.InventoryDelta.InventoryItems.FirstOrDefault(\n                    i => i.InventoryItemData.PokemonData != null && i.InventoryItemData.PokemonData.Id == id);\n            if (pokemon != null)\n                inventory.InventoryDelta.InventoryItems.Remove(pokemon);\n        }\n\n        public async Task<LevelUpRewardsResponse> GetLevelUpRewards(Inventory inv )\n        {\n            return await GetLevelUpRewards(inv.GetPlayerStats().Result.FirstOrDefault().Level);\n        }\n\n        private async Task<GetInventoryResponse> GetCachedInventory()\n        {\n            if (_player==null) GetPlayerData();\n            var now = DateTime.UtcNow;\n\n            if (_cachedInventory!=null && _lastRefresh.AddSeconds(30).Ticks > now.Ticks)\n                return _cachedInventory;\n\n            return await RefreshCachedInventory();\n        }\n\n\n        public async Task<IEnumerable<PokemonData>> GetDuplicatePokemonToTransfer(\n                IEnumerable<PokemonId> pokemonsNotToTransfer, IEnumerable<PokemonId> pokemonsToEvolve,\n                bool keepPokemonsThatCanEvolve = false, bool prioritizeIVoverCp = false\n             )\n        {\n            var myPokemon = await GetPokemons();\n\n            var myPokemonList = myPokemon.ToList();\n\n            var pokemonToTransfer = myPokemonList.Where(p => !pokemonsNotToTransfer.Contains(p.PokemonId) && p.DeployedFortId == string.Empty && p.Favorite == 0).ToList();\n\n            try\n            {\n                pokemonToTransfer =\n                    pokemonToTransfer.Where(\n                        p =>\n                        {\n                            var pokemonTransferFilter = GetPokemonTransferFilter(p.PokemonId);\n\n                            return !pokemonTransferFilter.MovesOperator.BoolFunc(\n                                        pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.MovesOperator.InverseBool(pokemonTransferFilter.Moves.Count > 0),\n                                                pokemonTransferFilter.Moves.Any(moveset =>\n                                                    pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                        pokemonTransferFilter.MovesOperator.InverseBool(moveset.Count > 0),\n                                                        moveset.Intersect(new[] { p.Move1, p.Move2 }).Count() == Math.Max(Math.Min(moveset.Count, 2),0)))),\n                                        pokemonTransferFilter.KeepMinOperator.BoolFunc(\n                                            p.Cp >= pokemonTransferFilter.KeepMinCp,\n                                            PokemonInfo.CalculatePokemonPerfection(p) >= pokemonTransferFilter.KeepMinIvPercentage,\n                                            pokemonTransferFilter.KeepMinOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.KeepMinOperator.InverseBool(pokemonTransferFilter.UseKeepMinLvl),\n                                                PokemonInfo.GetLevel(p) >= pokemonTransferFilter.KeepMinLvl)));\n\n                        }).ToList();\n            }\n            catch (Exception e)\n            {\n                throw e;\n            }\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var results = new List<PokemonData>();\n\n            foreach (var pokemonGroupToTransfer in pokemonToTransfer.GroupBy(p => p.PokemonId).ToList())\n            {\n                var amountToKeepInStorage = Math.Max(GetPokemonTransferFilter(pokemonGroupToTransfer.Key).KeepMinDuplicatePokemon, 0);\n\n                var inStorage = myPokemonList.Count(data => data.PokemonId == pokemonGroupToTransfer.Key);\n                var needToRemove = inStorage - amountToKeepInStorage;\n\n                if (needToRemove <= 0)\n                    continue;\n\n                var weakPokemonCount = pokemonGroupToTransfer.Count();\n                var canBeRemoved = Math.Min(needToRemove, weakPokemonCount);\n\n\n                var settings = pokemonSettings.Single(x => x.PokemonId == pokemonGroupToTransfer.Key);\n                //Lets calc new canBeRemoved pokemons according to transferring some of them for +1 candy or to evolving for +1 candy\n                if (keepPokemonsThatCanEvolve &&\n                    pokemonsToEvolve.Contains(pokemonGroupToTransfer.Key) &&\n                    settings.CandyToEvolve > 0 &&\n                    settings.EvolutionIds.Count != 0)\n                {\n                    var familyCandy = pokemonFamilies.Single(x => settings.FamilyId == x.FamilyId);\n\n                    // its an solution in fixed numbers of equations with two variables\n                    // (N = X + Y, X + C + Y >= Y * E) -> X >= (N * (E - 1) - C) / E\n                    // where N - current canBeRemoved,  X - new canBeRemoved, Y - possible to keep more, E - CandyToEvolve, C - candy amount\n                    canBeRemoved = (int)Math.Ceiling((double)((settings.CandyToEvolve - 1) * canBeRemoved - familyCandy.Candy_) / settings.CandyToEvolve);\n                }\n\n                if (canBeRemoved <= 0)\n                    continue;\n\n                if (prioritizeIVoverCp)\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(PokemonInfo.CalculatePokemonPerfection)\n                        .ThenBy(n => n.Cp)\n                        .Take(canBeRemoved));\n                }\n                else\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(x => x.Cp)\n                        .ThenBy(PokemonInfo.CalculatePokemonPerfection)\n                        .Take(canBeRemoved));\n                }\n            }\n\n            #region For testing\n/*\n            results.ForEach(data =>\n            {\n                var allpokemonoftype = myPokemonList.Where(x => x.PokemonId == data.PokemonId);\n                var bestPokemonOfType =\n                    (_logicSettings.PrioritizeIvOverCp\n                         ? allpokemonoftype\n                        .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                        .FirstOrDefault()\n                         : allpokemonoftype\n                        .OrderByDescending(x => x.Cp)\n                        .FirstOrDefault())\n                    ?? data;\n\n                var perfection = PokemonInfo.CalculatePokemonPerfection(data);\n                var cp = data.Cp;\n\n                var bestPerfection = PokemonInfo.CalculatePokemonPerfection(bestPokemonOfType);\n                var bestCp = bestPokemonOfType.Cp;\n            });\n*/\n            #endregion\n\n            return results;\n        }\n\n        public async Task<IEnumerable<EggIncubator>> GetEggIncubators()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems\n                    .Where(x => x.InventoryItemData.EggIncubators != null)\n                    .SelectMany(i => i.InventoryItemData.EggIncubators.EggIncubator)\n                    .Where(i => i != null);\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetEggs()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.IsEgg);\n        }\n\n        public async Task<PokemonData> GetHighestPokemonOfTypeByCp(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(x => x.Cp)\n                .FirstOrDefault();\n        }\n\n        public int GetStarDust()\n        {\n            GetPlayerData();\n            return _player.PlayerData.Currencies[1].Amount;\n        }\n\n        public async void GetPlayerData()\n        {\n            _player = await _client.Player.GetPlayer();\n        }\n\n        public async Task<PokemonData> GetHighestPokemonOfTypeByIv(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                .FirstOrDefault();\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetHighestsCp(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(x => x.Cp).ThenBy(n => n.StaminaMax).Take(limit);\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetHighestsPerfect(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).Take(limit);\n        }\n\n        public async Task<int> GetItemAmountByType(ItemId type)\n        {\n            var pokeballs = await GetItems();\n            return pokeballs.FirstOrDefault(i => i.ItemId == type)?.Count ?? 0;\n        }\n\n        public async Task<IEnumerable<ItemData>> GetItems()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.Item)\n                .Where(p => p != null);\n        }\n\n        public async Task<int> GetTotalItemCount()\n        {\n            var myItems = (await GetItems()).ToList();\n            int myItemCount = 0;\n            foreach (var myItem in myItems) myItemCount += myItem.Count;\n            return myItemCount;\n        }\n\n        public async Task<IEnumerable<ItemData>> GetItemsToRecycle(ISession session)\n        {\n            var itemsToRecycle = new List<ItemData>();\n            var myItems = (await GetItems()).ToList();\n            if (myItems == null)\n                return itemsToRecycle;\n\n            var otherItemsToRecycle = myItems\n                .Where(x => _logicSettings.ItemRecycleFilter.Any(f => f.Key == x.ItemId && x.Count > f.Value))\n                .Select(\n                    x =>\n                        new ItemData\n                        {\n                            ItemId = x.ItemId,\n                            Count = x.Count - _logicSettings.ItemRecycleFilter.Single(f => f.Key == x.ItemId).Value,\n                            Unseen = x.Unseen\n                        });\n\n            itemsToRecycle.AddRange(otherItemsToRecycle);\n\n            return itemsToRecycle;\n        }\n\n        public double GetPerfect(PokemonData poke)\n        {\n            var result = PokemonInfo.CalculatePokemonPerfection(poke);\n            return result;\n        }\n\n        public async Task<IEnumerable<PlayerStats>> GetPlayerStats()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.PlayerStats)\n                .Where(p => p != null);\n        }\n\n        public async Task<UseItemXpBoostResponse> UseLuckyEggConstantly()\n        {\n            var UseLuckyEgg = await _client.Inventory.UseItemXpBoost();\n            return UseLuckyEgg;\n        }\n        public async Task<UseIncenseResponse> UseIncenseConstantly()\n        {\n            var UseIncense = await _client.Inventory.UseIncense(ItemId.ItemIncenseOrdinary);\n            return UseIncense;\n        }\n\n        public async Task<List<InventoryItem>> GetPokeDexItems()\n        {\n            List<InventoryItem> PokeDex = new List<InventoryItem>();\n            var inventory = await _client.Inventory.GetInventory();\n\n            return (from items in inventory.InventoryDelta.InventoryItems\n                   where items.InventoryItemData?.PokedexEntry != null\n                   select items).ToList();\n        }\n\n        public async Task<List<Candy>> GetPokemonFamilies(int retries=0)\n        {\n            if (retries > 3) return null;\n\n            IEnumerable<Candy> families = null;\n            var inventory = await GetCachedInventory();\n            if ( inventory == null || inventory.InventoryDelta==null || inventory.InventoryDelta.InventoryItems==null)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                inventory = await GetCachedInventory();\n            }\n\n            try {\n                families = from item in inventory.InventoryDelta.InventoryItems\n                            where item.InventoryItemData?.Candy != null\n                            where item.InventoryItemData?.Candy.FamilyId != PokemonFamilyId.FamilyUnset\n                            group item by item.InventoryItemData?.Candy.FamilyId into family\n                            select new Candy\n                            {\n                                FamilyId = family.First().InventoryItemData.Candy.FamilyId,\n                                Candy_ = family.First().InventoryItemData.Candy.Candy_\n                            };\n            }\n            catch (NullReferenceException)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                return await GetPokemonFamilies(++retries);\n            }\n\n            return families.ToList();\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetPokemons()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.PokemonId > 0);\n        }\n        public async Task<IEnumerable<PokemonData>> GetFaveriotPokemon()\n        {\n            var inventory = await GetPokemons();\n            return\n                inventory.Where(i => i.Favorite == 1);\n\n        }\n\n        public async Task<IEnumerable<PokemonSettings>> GetPokemonSettings()\n        {\n            if (_templates == null || _pokemonSettings == null)\n            {\n                _templates = await _client.Download.GetItemTemplates();\n                _pokemonSettings = _templates.ItemTemplates.Select(i => i.PokemonSettings).Where(p => p != null && p.FamilyId != PokemonFamilyId.FamilyUnset);\n            }\n\n            return _pokemonSettings;\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetPokemonToEvolve(IEnumerable<PokemonId> filter = null)\n        {\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty).OrderByDescending(p => p.Cp);\n            //Don't evolve pokemon in gyms\n            IEnumerable<PokemonId> pokemonIds = filter as PokemonId[] ?? filter.ToArray();\n            if (pokemonIds.Any())\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => (pokemonIds.Contains(p.PokemonId)) ||\n                             (_logicSettings.EvolveAllPokemonAboveIv &&\n                              (PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue)));\n            }\n            else if (_logicSettings.EvolveAllPokemonAboveIv)\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue);\n            }\n            var pokemons = myPokemon.ToList();\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var pokemonToEvolve = new List<PokemonData>();\n            foreach (var pokemon in pokemons)\n            {\n                var settings = pokemonSettings.SingleOrDefault(x => x.PokemonId == pokemon.PokemonId);\n                var familyCandy = pokemonFamilies.SingleOrDefault(x => settings.FamilyId == x.FamilyId);\n\n                //Don't evolve if we can't evolve it\n                if (settings.EvolutionIds.Count == 0)\n                    continue;\n                //DO NOT CHANGE! TESTED AND WORKS\n                var pokemonCandyNeededAlready =\n                    (pokemonToEvolve.Count(\n                        p => pokemonSettings.Single(x => x.PokemonId == p.PokemonId).FamilyId == settings.FamilyId) + 1) *\n                    settings.CandyToEvolve;\n\n                if (familyCandy.Candy_ >= pokemonCandyNeededAlready)\n                {\n                    pokemonToEvolve.Add(pokemon);\n                }\n            }\n\n            return pokemonToEvolve;\n        }\n\n        public async Task<LevelUpRewardsResponse> GetLevelUpRewards(int level)\n        {\n            if (_level == 0 || level > _level)\n            {\n                _level = level;\n                return await _client.Player.GetLevelUpRewards(level);\n            }\n\n            return new LevelUpRewardsResponse();\n        }\n\n        public async Task<List<PokemonData>> GetPokemonToUpgrade()\n        {\n            var upgradePokemon = new List<PokemonData>();\n\n            if (!_logicSettings.AutomaticallyLevelUpPokemon)\n                return upgradePokemon;\n\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty);\n\n            IEnumerable<PokemonData> highestPokemonForUpgrade = (_logicSettings.UpgradePokemonMinimumStatsOperator.ToLower().Equals(\"and\")) ?\n                myPokemon.Where(\n                        p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum &&\n                            PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList() :\n                myPokemon.Where(\n                    p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum ||\n                        PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList();\n\n            return upgradePokemon = (_logicSettings.LevelUpByCPorIv.ToLower().Equals(\"iv\")) ?\n                    highestPokemonForUpgrade.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).ToList() :\n                    highestPokemonForUpgrade.OrderByDescending(p => p.Cp).ToList();\n        }\n\n        public TransferFilter GetPokemonTransferFilter(PokemonId pokemon)\n        {\n            if (_logicSettings.PokemonsTransferFilter != null &&\n                _logicSettings.PokemonsTransferFilter.ContainsKey(pokemon))\n            {\n                return _logicSettings.PokemonsTransferFilter[pokemon];\n            }\n            return new TransferFilter(_logicSettings.KeepMinCp, _logicSettings.KeepMinLvl, _logicSettings.UseKeepMinLvl, _logicSettings.KeepMinIvPercentage,\n                _logicSettings.KeepMinOperator, _logicSettings.KeepMinDuplicatePokemon);\n        }\n\n        public async Task<GetInventoryResponse> RefreshCachedInventory()\n        {\n            var now = DateTime.UtcNow;\n            var ss = new SemaphoreSlim(10);\n\n            await ss.WaitAsync();\n            try\n            {\n                _lastRefresh = now;\n                _cachedInventory = await _client.Inventory.GetInventory();\n                return _cachedInventory;\n            }\n            finally\n            {\n                ss.Release();\n            }\n        }\n\n        public async Task<UpgradePokemonResponse> UpgradePokemon(ulong pokemonid)\n        {\n            var upgradeResult = await _client.Inventory.UpgradePokemon(pokemonid);\n            return upgradeResult;\n        }\n    }\n}","line_start":24,"line_end":532,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":"namespace PoGo.NecroBot.Logic\n{","end_statement":"}","start_statement_regexp":"/namespace\\s+([A-Za-z0-9_\\.]+)\\s?[A-Za-z0-9_\\.\\\\\\s]*{/","start_statement_matched":"namespace PoGo.NecroBot.Logic\n{","start_statement_line_start":24,"start_statement_line_end":25,"start_statement_line_in_start":1,"start_statement_line_in_end":2,"end_statement_regexp":"/}/","end_statement_matched":"}","end_statement_line_start":532,"end_statement_line_end":532,"end_statement_line_in_start":509,"end_statement_line_in_end":509,"char_start":595,"start_statement_char_start":595,"start_statement_char_end":626,"start_statement_char_in_start":0,"start_statement_char_in_end":31,"char_end":21859,"end_statement_char_start":21858,"end_statement_char_end":21859,"end_statement_char_in_start":21263,"end_statement_char_in_end":21264}],"id":null,"children_ids":[],"type":"file","name":null,"body":"#region using directives\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing PoGo.NecroBot.Logic.Interfaces.Configuration;\nusing PoGo.NecroBot.Logic.Model.Settings;\nusing PoGo.NecroBot.Logic.PoGoUtils;\nusing PoGo.NecroBot.Logic.State;\nusing PoGo.NecroBot.Logic.Utils;\nusing PokemonGo.RocketAPI;\nusing POGOProtos.Data;\nusing POGOProtos.Data.Player;\nusing POGOProtos.Enums;\nusing POGOProtos.Inventory;\nusing POGOProtos.Inventory.Item;\nusing POGOProtos.Networking.Responses;\nusing POGOProtos.Settings.Master;\n\n#endregion\n\nnamespace PoGo.NecroBot.Logic\n{\n\n    public class Inventory\n    {\n        private readonly Client _client;\n        private readonly ILogicSettings _logicSettings;\n        private GetPlayerResponse _player = null;\n        private int _level = 0;\n        private DownloadItemTemplatesResponse _templates;\n        private IEnumerable<PokemonSettings> _pokemonSettings;\n\n        private readonly List<ItemId> _revives = new List<ItemId> { ItemId.ItemRevive, ItemId.ItemMaxRevive };\n        private GetInventoryResponse _cachedInventory;\n        private DateTime _lastRefresh;\n\n        public Inventory(Client client, ILogicSettings logicSettings)\n        {\n            _client = client;\n            _logicSettings = logicSettings;\n        }\n\n        private readonly List<ItemId> _pokeballs = new List<ItemId>\n        {\n            ItemId.ItemPokeBall,\n            ItemId.ItemGreatBall,\n            ItemId.ItemUltraBall,\n            ItemId.ItemMasterBall\n        };\n\n        private readonly List<ItemId> _potions = new List<ItemId>\n        {\n            ItemId.ItemPotion,\n            ItemId.ItemSuperPotion,\n            ItemId.ItemHyperPotion,\n            ItemId.ItemMaxPotion\n        };\n\n        public async Task DeletePokemonFromInvById(ulong id)\n        {\n            var inventory = await GetCachedInventory();\n            var pokemon =\n                inventory.InventoryDelta.InventoryItems.FirstOrDefault(\n                    i => i.InventoryItemData.PokemonData != null && i.InventoryItemData.PokemonData.Id == id);\n            if (pokemon != null)\n                inventory.InventoryDelta.InventoryItems.Remove(pokemon);\n        }\n\n        public async Task<LevelUpRewardsResponse> GetLevelUpRewards(Inventory inv )\n        {\n            return await GetLevelUpRewards(inv.GetPlayerStats().Result.FirstOrDefault().Level);\n        }\n\n        private async Task<GetInventoryResponse> GetCachedInventory()\n        {\n            if (_player==null) GetPlayerData();\n            var now = DateTime.UtcNow;\n\n            if (_cachedInventory!=null && _lastRefresh.AddSeconds(30).Ticks > now.Ticks)\n                return _cachedInventory;\n\n            return await RefreshCachedInventory();\n        }\n\n\n        public async Task<IEnumerable<PokemonData>> GetDuplicatePokemonToTransfer(\n                IEnumerable<PokemonId> pokemonsNotToTransfer, IEnumerable<PokemonId> pokemonsToEvolve,\n                bool keepPokemonsThatCanEvolve = false, bool prioritizeIVoverCp = false\n             )\n        {\n            var myPokemon = await GetPokemons();\n\n            var myPokemonList = myPokemon.ToList();\n\n            var pokemonToTransfer = myPokemonList.Where(p => !pokemonsNotToTransfer.Contains(p.PokemonId) && p.DeployedFortId == string.Empty && p.Favorite == 0).ToList();\n\n            try\n            {\n                pokemonToTransfer =\n                    pokemonToTransfer.Where(\n                        p =>\n                        {\n                            var pokemonTransferFilter = GetPokemonTransferFilter(p.PokemonId);\n\n                            return !pokemonTransferFilter.MovesOperator.BoolFunc(\n                                        pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.MovesOperator.InverseBool(pokemonTransferFilter.Moves.Count > 0),\n                                                pokemonTransferFilter.Moves.Any(moveset =>\n                                                    pokemonTransferFilter.MovesOperator.ReverseBoolFunc(\n                                                        pokemonTransferFilter.MovesOperator.InverseBool(moveset.Count > 0),\n                                                        moveset.Intersect(new[] { p.Move1, p.Move2 }).Count() == Math.Max(Math.Min(moveset.Count, 2),0)))),\n                                        pokemonTransferFilter.KeepMinOperator.BoolFunc(\n                                            p.Cp >= pokemonTransferFilter.KeepMinCp,\n                                            PokemonInfo.CalculatePokemonPerfection(p) >= pokemonTransferFilter.KeepMinIvPercentage,\n                                            pokemonTransferFilter.KeepMinOperator.ReverseBoolFunc(\n                                                pokemonTransferFilter.KeepMinOperator.InverseBool(pokemonTransferFilter.UseKeepMinLvl),\n                                                PokemonInfo.GetLevel(p) >= pokemonTransferFilter.KeepMinLvl)));\n\n                        }).ToList();\n            }\n            catch (Exception e)\n            {\n                throw e;\n            }\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var results = new List<PokemonData>();\n\n            foreach (var pokemonGroupToTransfer in pokemonToTransfer.GroupBy(p => p.PokemonId).ToList())\n            {\n                var amountToKeepInStorage = Math.Max(GetPokemonTransferFilter(pokemonGroupToTransfer.Key).KeepMinDuplicatePokemon, 0);\n\n                var inStorage = myPokemonList.Count(data => data.PokemonId == pokemonGroupToTransfer.Key);\n                var needToRemove = inStorage - amountToKeepInStorage;\n\n                if (needToRemove <= 0)\n                    continue;\n\n                var weakPokemonCount = pokemonGroupToTransfer.Count();\n                var canBeRemoved = Math.Min(needToRemove, weakPokemonCount);\n\n\n                var settings = pokemonSettings.Single(x => x.PokemonId == pokemonGroupToTransfer.Key);\n                //Lets calc new canBeRemoved pokemons according to transferring some of them for +1 candy or to evolving for +1 candy\n                if (keepPokemonsThatCanEvolve &&\n                    pokemonsToEvolve.Contains(pokemonGroupToTransfer.Key) &&\n                    settings.CandyToEvolve > 0 &&\n                    settings.EvolutionIds.Count != 0)\n                {\n                    var familyCandy = pokemonFamilies.Single(x => settings.FamilyId == x.FamilyId);\n\n                    // its an solution in fixed numbers of equations with two variables\n                    // (N = X + Y, X + C + Y >= Y * E) -> X >= (N * (E - 1) - C) / E\n                    // where N - current canBeRemoved,  X - new canBeRemoved, Y - possible to keep more, E - CandyToEvolve, C - candy amount\n                    canBeRemoved = (int)Math.Ceiling((double)((settings.CandyToEvolve - 1) * canBeRemoved - familyCandy.Candy_) / settings.CandyToEvolve);\n                }\n\n                if (canBeRemoved <= 0)\n                    continue;\n\n                if (prioritizeIVoverCp)\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(PokemonInfo.CalculatePokemonPerfection)\n                        .ThenBy(n => n.Cp)\n                        .Take(canBeRemoved));\n                }\n                else\n                {\n                    results.AddRange(pokemonGroupToTransfer\n                        .OrderBy(x => x.Cp)\n                        .ThenBy(PokemonInfo.CalculatePokemonPerfection)\n                        .Take(canBeRemoved));\n                }\n            }\n\n            #region For testing\n/*\n            results.ForEach(data =>\n            {\n                var allpokemonoftype = myPokemonList.Where(x => x.PokemonId == data.PokemonId);\n                var bestPokemonOfType =\n                    (_logicSettings.PrioritizeIvOverCp\n                         ? allpokemonoftype\n                        .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                        .FirstOrDefault()\n                         : allpokemonoftype\n                        .OrderByDescending(x => x.Cp)\n                        .FirstOrDefault())\n                    ?? data;\n\n                var perfection = PokemonInfo.CalculatePokemonPerfection(data);\n                var cp = data.Cp;\n\n                var bestPerfection = PokemonInfo.CalculatePokemonPerfection(bestPokemonOfType);\n                var bestCp = bestPokemonOfType.Cp;\n            });\n*/\n            #endregion\n\n            return results;\n        }\n\n        public async Task<IEnumerable<EggIncubator>> GetEggIncubators()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems\n                    .Where(x => x.InventoryItemData.EggIncubators != null)\n                    .SelectMany(i => i.InventoryItemData.EggIncubators.EggIncubator)\n                    .Where(i => i != null);\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetEggs()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.IsEgg);\n        }\n\n        public async Task<PokemonData> GetHighestPokemonOfTypeByCp(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(x => x.Cp)\n                .FirstOrDefault();\n        }\n\n        public int GetStarDust()\n        {\n            GetPlayerData();\n            return _player.PlayerData.Currencies[1].Amount;\n        }\n\n        public async void GetPlayerData()\n        {\n            _player = await _client.Player.GetPlayer();\n        }\n\n        public async Task<PokemonData> GetHighestPokemonOfTypeByIv(PokemonData pokemon)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.Where(x => x.PokemonId == pokemon.PokemonId)\n                .OrderByDescending(PokemonInfo.CalculatePokemonPerfection)\n                .FirstOrDefault();\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetHighestsCp(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(x => x.Cp).ThenBy(n => n.StaminaMax).Take(limit);\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetHighestsPerfect(int limit)\n        {\n            var myPokemon = await GetPokemons();\n            var pokemons = myPokemon.ToList();\n            return pokemons.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).Take(limit);\n        }\n\n        public async Task<int> GetItemAmountByType(ItemId type)\n        {\n            var pokeballs = await GetItems();\n            return pokeballs.FirstOrDefault(i => i.ItemId == type)?.Count ?? 0;\n        }\n\n        public async Task<IEnumerable<ItemData>> GetItems()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.Item)\n                .Where(p => p != null);\n        }\n\n        public async Task<int> GetTotalItemCount()\n        {\n            var myItems = (await GetItems()).ToList();\n            int myItemCount = 0;\n            foreach (var myItem in myItems) myItemCount += myItem.Count;\n            return myItemCount;\n        }\n\n        public async Task<IEnumerable<ItemData>> GetItemsToRecycle(ISession session)\n        {\n            var itemsToRecycle = new List<ItemData>();\n            var myItems = (await GetItems()).ToList();\n            if (myItems == null)\n                return itemsToRecycle;\n\n            var otherItemsToRecycle = myItems\n                .Where(x => _logicSettings.ItemRecycleFilter.Any(f => f.Key == x.ItemId && x.Count > f.Value))\n                .Select(\n                    x =>\n                        new ItemData\n                        {\n                            ItemId = x.ItemId,\n                            Count = x.Count - _logicSettings.ItemRecycleFilter.Single(f => f.Key == x.ItemId).Value,\n                            Unseen = x.Unseen\n                        });\n\n            itemsToRecycle.AddRange(otherItemsToRecycle);\n\n            return itemsToRecycle;\n        }\n\n        public double GetPerfect(PokemonData poke)\n        {\n            var result = PokemonInfo.CalculatePokemonPerfection(poke);\n            return result;\n        }\n\n        public async Task<IEnumerable<PlayerStats>> GetPlayerStats()\n        {\n            var inventory = await GetCachedInventory();\n            return inventory.InventoryDelta.InventoryItems\n                .Select(i => i.InventoryItemData?.PlayerStats)\n                .Where(p => p != null);\n        }\n\n        public async Task<UseItemXpBoostResponse> UseLuckyEggConstantly()\n        {\n            var UseLuckyEgg = await _client.Inventory.UseItemXpBoost();\n            return UseLuckyEgg;\n        }\n        public async Task<UseIncenseResponse> UseIncenseConstantly()\n        {\n            var UseIncense = await _client.Inventory.UseIncense(ItemId.ItemIncenseOrdinary);\n            return UseIncense;\n        }\n\n        public async Task<List<InventoryItem>> GetPokeDexItems()\n        {\n            List<InventoryItem> PokeDex = new List<InventoryItem>();\n            var inventory = await _client.Inventory.GetInventory();\n\n            return (from items in inventory.InventoryDelta.InventoryItems\n                   where items.InventoryItemData?.PokedexEntry != null\n                   select items).ToList();\n        }\n\n        public async Task<List<Candy>> GetPokemonFamilies(int retries=0)\n        {\n            if (retries > 3) return null;\n\n            IEnumerable<Candy> families = null;\n            var inventory = await GetCachedInventory();\n            if ( inventory == null || inventory.InventoryDelta==null || inventory.InventoryDelta.InventoryItems==null)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                inventory = await GetCachedInventory();\n            }\n\n            try {\n                families = from item in inventory.InventoryDelta.InventoryItems\n                            where item.InventoryItemData?.Candy != null\n                            where item.InventoryItemData?.Candy.FamilyId != PokemonFamilyId.FamilyUnset\n                            group item by item.InventoryItemData?.Candy.FamilyId into family\n                            select new Candy\n                            {\n                                FamilyId = family.First().InventoryItemData.Candy.FamilyId,\n                                Candy_ = family.First().InventoryItemData.Candy.Candy_\n                            };\n            }\n            catch (NullReferenceException)\n            {\n                DelayingUtils.Delay(3000, 3000);\n                return await GetPokemonFamilies(++retries);\n            }\n\n            return families.ToList();\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetPokemons()\n        {\n            var inventory = await GetCachedInventory();\n            return\n                inventory.InventoryDelta.InventoryItems.Select(i => i.InventoryItemData?.PokemonData)\n                    .Where(p => p != null && p.PokemonId > 0);\n        }\n        public async Task<IEnumerable<PokemonData>> GetFaveriotPokemon()\n        {\n            var inventory = await GetPokemons();\n            return\n                inventory.Where(i => i.Favorite == 1);\n\n        }\n\n        public async Task<IEnumerable<PokemonSettings>> GetPokemonSettings()\n        {\n            if (_templates == null || _pokemonSettings == null)\n            {\n                _templates = await _client.Download.GetItemTemplates();\n                _pokemonSettings = _templates.ItemTemplates.Select(i => i.PokemonSettings).Where(p => p != null && p.FamilyId != PokemonFamilyId.FamilyUnset);\n            }\n\n            return _pokemonSettings;\n        }\n\n        public async Task<IEnumerable<PokemonData>> GetPokemonToEvolve(IEnumerable<PokemonId> filter = null)\n        {\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty).OrderByDescending(p => p.Cp);\n            //Don't evolve pokemon in gyms\n            IEnumerable<PokemonId> pokemonIds = filter as PokemonId[] ?? filter.ToArray();\n            if (pokemonIds.Any())\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => (pokemonIds.Contains(p.PokemonId)) ||\n                             (_logicSettings.EvolveAllPokemonAboveIv &&\n                              (PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue)));\n            }\n            else if (_logicSettings.EvolveAllPokemonAboveIv)\n            {\n                myPokemon =\n                    myPokemon.Where(\n                        p => PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.EvolveAboveIvValue);\n            }\n            var pokemons = myPokemon.ToList();\n\n            var myPokemonSettings = await GetPokemonSettings();\n            var pokemonSettings = myPokemonSettings.ToList();\n\n            var myPokemonFamilies = await GetPokemonFamilies();\n            var pokemonFamilies = myPokemonFamilies.ToArray();\n\n            var pokemonToEvolve = new List<PokemonData>();\n            foreach (var pokemon in pokemons)\n            {\n                var settings = pokemonSettings.SingleOrDefault(x => x.PokemonId == pokemon.PokemonId);\n                var familyCandy = pokemonFamilies.SingleOrDefault(x => settings.FamilyId == x.FamilyId);\n\n                //Don't evolve if we can't evolve it\n                if (settings.EvolutionIds.Count == 0)\n                    continue;\n                //DO NOT CHANGE! TESTED AND WORKS\n                var pokemonCandyNeededAlready =\n                    (pokemonToEvolve.Count(\n                        p => pokemonSettings.Single(x => x.PokemonId == p.PokemonId).FamilyId == settings.FamilyId) + 1) *\n                    settings.CandyToEvolve;\n\n                if (familyCandy.Candy_ >= pokemonCandyNeededAlready)\n                {\n                    pokemonToEvolve.Add(pokemon);\n                }\n            }\n\n            return pokemonToEvolve;\n        }\n\n        public async Task<LevelUpRewardsResponse> GetLevelUpRewards(int level)\n        {\n            if (_level == 0 || level > _level)\n            {\n                _level = level;\n                return await _client.Player.GetLevelUpRewards(level);\n            }\n\n            return new LevelUpRewardsResponse();\n        }\n\n        public async Task<List<PokemonData>> GetPokemonToUpgrade()\n        {\n            var upgradePokemon = new List<PokemonData>();\n\n            if (!_logicSettings.AutomaticallyLevelUpPokemon)\n                return upgradePokemon;\n\n            var myPokemon = await GetPokemons();\n            myPokemon = myPokemon.Where(p => p.DeployedFortId == string.Empty);\n\n            IEnumerable<PokemonData> highestPokemonForUpgrade = (_logicSettings.UpgradePokemonMinimumStatsOperator.ToLower().Equals(\"and\")) ?\n                myPokemon.Where(\n                        p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum &&\n                            PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList() :\n                myPokemon.Where(\n                    p => (p.Cp >= _logicSettings.UpgradePokemonCpMinimum ||\n                        PokemonInfo.CalculatePokemonPerfection(p) >= _logicSettings.UpgradePokemonIvMinimum)).OrderByDescending(p => p.Cp).ToList();\n\n            return upgradePokemon = (_logicSettings.LevelUpByCPorIv.ToLower().Equals(\"iv\")) ?\n                    highestPokemonForUpgrade.OrderByDescending(PokemonInfo.CalculatePokemonPerfection).ToList() :\n                    highestPokemonForUpgrade.OrderByDescending(p => p.Cp).ToList();\n        }\n\n        public TransferFilter GetPokemonTransferFilter(PokemonId pokemon)\n        {\n            if (_logicSettings.PokemonsTransferFilter != null &&\n                _logicSettings.PokemonsTransferFilter.ContainsKey(pokemon))\n            {\n                return _logicSettings.PokemonsTransferFilter[pokemon];\n            }\n            return new TransferFilter(_logicSettings.KeepMinCp, _logicSettings.KeepMinLvl, _logicSettings.UseKeepMinLvl, _logicSettings.KeepMinIvPercentage,\n                _logicSettings.KeepMinOperator, _logicSettings.KeepMinDuplicatePokemon);\n        }\n\n        public async Task<GetInventoryResponse> RefreshCachedInventory()\n        {\n            var now = DateTime.UtcNow;\n            var ss = new SemaphoreSlim(10);\n\n            await ss.WaitAsync();\n            try\n            {\n                _lastRefresh = now;\n                _cachedInventory = await _client.Inventory.GetInventory();\n                return _cachedInventory;\n            }\n            finally\n            {\n                ss.Release();\n            }\n        }\n\n        public async Task<UpgradePokemonResponse> UpgradePokemon(ulong pokemonid)\n        {\n            var upgradeResult = await _client.Inventory.UpgradePokemon(pokemonid);\n            return upgradeResult;\n        }\n    }\n}\n","line_start":1,"line_end":533,"line_preserve_start_whitespaces":"","line_preserve_end_whitespaces":"","start_statement":null,"end_statement":null,"start_statement_regexp":null,"start_statement_matched":null,"start_statement_line_start":null,"start_statement_line_end":null,"start_statement_line_in_start":null,"start_statement_line_in_end":null,"end_statement_regexp":null,"end_statement_matched":null,"end_statement_line_start":null,"end_statement_line_end":null,"end_statement_line_in_start":null,"end_statement_line_in_end":null}